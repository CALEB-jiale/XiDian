1
00:00:00,000 --> 00:00:04,748
In this segment I wanna show you how RSA
is used in practice and in particular, I

2
00:00:04,748 --> 00:00:09,497
wanna tell you about a standard called a
Public Key Cryptography standard number

3
00:00:09,497 --> 00:00:14,734
one PKCS one. So I've already told you a
couple of times that you should never use

4
00:00:14,734 --> 00:00:19,262
what's called textbook RSA. You should
never directly encrypt the message using

5
00:00:19,262 --> 00:00:23,962
RSA because that's insecure. You always
have to do something to the message before

6
00:00:23,962 --> 00:00:28,318
you actually apply the RSA function. We
saw the ISO standard in the previous

7
00:00:28,318 --> 00:00:32,846
segment where what we did is we generated
a random x, encrypted x using RSA, and

8
00:00:32,846 --> 00:00:37,375
then from this x we derived a symmetric
encryption key. But that's actually not how

9
00:00:37,375 --> 00:00:41,677
RSA is used in practice. In practice
things worked a little differently and

10
00:00:41,677 --> 00:00:46,150
typically what happens is the system
generates a symmetric encryption key and

11
00:00:46,150 --> 00:00:50,508
then RSA is asked to encrypt the given
symmetric encryption key rather than

12
00:00:50,508 --> 00:00:55,275
generating the symmetric key as part of
[our same encryption or RSA encryption?]. So in practice as I

13
00:00:55,275 --> 00:01:00,908
say, what happens the RSA system is given
this input a symmetric encryption key to

14
00:01:00,908 --> 00:01:06,408
encrypt for example this could be a, an AES
key that would be like 128 bits and then

15
00:01:06,408 --> 00:01:12,040
the way this key is actually encrypted is
first we take these 128 bits and we expand

16
00:01:12,040 --> 00:01:17,077
them into the full modulo size. For
example, this would be 2048 bits, and then

17
00:01:17,077 --> 00:01:21,678
we apply the RSA function. And so the
question is, how should this preprocessing

18
00:01:21,678 --> 00:01:26,132
be done? How should we expand the 128 bit
AES key that was given to us into a 2048

19
00:01:26,132 --> 00:01:30,531
bit value that can then be applied with
RSA. And then furthermore the question is,

20
00:01:30,531 --> 00:01:35,150
how do we argue that the resulting system
is secure? So in all the way of doing it

21
00:01:35,150 --> 00:01:40,082
which is actually very widely deployed in
practice is what's called PKCS1 version

22
00:01:40,082 --> 00:01:44,491
1.5, Public Key Cryptography Standard,
that's what PKCS stands for. So I wanna

23
00:01:44,491 --> 00:01:49,307
show you how this mechanism works and in
particular, I'll show you what's called

24
00:01:49,307 --> 00:01:53,775
PKCS1 Mode 2. Mode 2 denotes
encryption, mode 1 denotes signatures so

25
00:01:53,775 --> 00:01:58,126
here we're gonna just focus on the
encryption. So the way PKCS1 works is

26
00:01:58,126 --> 00:02:02,710
as follows, you take your message, this
would be the 128 bit AES key for example,

27
00:02:02,710 --> 00:02:07,392
and you put it as a least significant bit
of the value that you're creating. The

28
00:02:07,392 --> 00:02:12,641
next thing you do is you append sixteen
bits of one to it, you know [foreign].

29
00:02:12,641 --> 00:02:18,009
This is sixteen bits of one. And then the
next you do is you append the random pad

30
00:02:18,009 --> 00:02:23,104
that actually does not contain FF
anywhere inside the random pad. So this

31
00:02:23,104 --> 00:02:28,072
is basically something like on the order
of what is it, 1900 random bits except

32
00:02:28,072 --> 00:02:33,356
that there are on FF's inside those random
bits and finally at the very top, you put

33
00:02:33,356 --> 00:02:38,513
the number 02. This indicates that this
plain text has been encoded using PKCS1

34
00:02:38,513 --> 00:02:43,476
mode 2. And then this whole value here,
this whole thing that we just created.

35
00:02:43,476 --> 00:02:48,893
This is just 2048 bit string is the thing
that gets fed into the RSA function and is

36
00:02:48,893 --> 00:02:54,118
raised to the power of e modulo N. And the
resulting thing is PKCS1 ciphertext. Now

37
00:02:54,118 --> 00:02:59,471
the decrypter of course is going to invert
the RSA function, He's gonna get back this

38
00:02:59,471 --> 00:03:03,267
block, He's gonna look at the most
significant bits and he's gonna say

39
00:03:03,430 --> 00:03:07,885
there's a 02 in there that means that this
PKCS one formatted. Since it's PKCS one

40
00:03:07,885 --> 00:03:12,123
formatted, it's gonna remove those 02.
It's gonna remove all the random pad up

41
00:03:12,123 --> 00:03:16,810
until the FF. And then anything
that stays beyond that is the original

42
00:03:16,810 --> 00:03:22,180
message which is then used you know to say
decrypt the actual body of the ciphertext.

43
00:03:22,180 --> 00:03:28,206
And as I said, this mechanism is extremely
widely deployed, For example, it's used in

44
00:03:28,206 --> 00:03:33,088
HTTPS. Now interestingly, this PKCS1
version 1.5 was designed in the late 80's.

45
00:03:33,088 --> 00:03:37,861
There was really no security proof to
argue that this mechanism is in fact

46
00:03:37,861 --> 00:03:42,952
secure. And as it turns out, it is very
common when there is no security proof, it

47
00:03:42,952 --> 00:03:48,234
turns out that actually things break and
there's a very, very elegant attack due to

48
00:03:48,234 --> 00:03:53,071
Bleichenbacher back in 1998, Daniel
Bleichenbacher which shows how to attack

49
00:03:53,071 --> 00:03:58,290
PKCS1 when it's used for example inside of
HTTPS. So let's see how the attack works.

50
00:03:58,290 --> 00:04:03,228
So the idea is this, supposed the attacker
intercepted a certain ciphertext so this

51
00:04:03,228 --> 00:04:07,988
is PKCS1 ciphertext so the point is
it's encoded using PKCS1 and then the

52
00:04:07,988 --> 00:04:12,812
result is fed into the RSA function. And
we call the ciphertext the output of the

53
00:04:12,812 --> 00:04:16,797
RSA function. The attacker wants to
basically decrypt the ciphertext, So let

54
00:04:16,797 --> 00:04:21,065
me show you abstractly what the attacker
is gonna do. We're gonna just simplify SSL

55
00:04:21,065 --> 00:04:25,349
and just say that the attacker can
basically send the ciphertext directly to

56
00:04:25,349 --> 00:04:29,421
the web server. The web server is gonna
try and decrypt the ciphertext using its

57
00:04:29,421 --> 00:04:33,441
secret key. And then what is it gonna do?
Well, the first thing it does after the

58
00:04:33,441 --> 00:04:37,208
encryption, well, it's gonna ask: is the
decryption of the ciphertext PKCS1

59
00:04:37,208 --> 00:04:41,229
encoded? In other words, it's gonna look
at the most significant bits and ask: is

60
00:04:41,229 --> 00:04:45,250
this 02 in the most significant positions? If
they are, it's gonna continue properly

61
00:04:45,250 --> 00:04:49,322
decrypting and then continue with the
protocol and if there is no 02 in those

62
00:04:49,322 --> 00:04:53,292
positions, it's gonna announce an error.
So if the most significant bits of the

63
00:04:53,292 --> 00:04:57,558
plaintext are 02, it's gonna continue
with the protocol as expected, if the most

64
00:04:57,558 --> 00:05:01,951
significant bits are not 02 is gonna send
back an error message and tell the

65
00:05:01,951 --> 00:05:06,059
attacker, hey, you sent in invalid
ciphertext. Now the amazing thing is that,

66
00:05:06,059 --> 00:05:10,276
this lets the attacker test whether the
sixteen most significant bits of the

67
00:05:10,276 --> 00:05:14,712
decryption of the given ciphertext are 02
or not. In other words, the attacker can

68
00:05:14,712 --> 00:05:19,635
submit whatever ciphertext he wants to the
web server. The web server will invert the

69
00:05:19,635 --> 00:05:24,772
RSA function and then tell the attacker
whether the inversion started with 02 or

70
00:05:24,772 --> 00:05:30,210
not. So in some sense gives the attacker an
oracle that lets him test whether the

71
00:05:30,210 --> 00:05:35,407
inversion of any ciphertext begins with 02
or not. And it turns out that's actually

72
00:05:35,407 --> 00:05:39,916
enough to completely decrypt any
ciphertext the attacker wants, Just add

73
00:05:39,916 --> 00:05:44,800
little bit of information leakage just by
properties of RSA lest the attacker

74
00:05:44,800 --> 00:05:49,860
completely decrypt a given ciphertext.
Also here's what the attacker is gonna do,

75
00:05:49,860 --> 00:05:54,052
well, he has a ciphertext that he wants to
decrypt so what he'll do is he'll take a

76
00:05:54,052 --> 00:05:57,940
cyphertext and of course feed that
directly into the web server and ask does

77
00:05:57,940 --> 00:06:01,929
it begin with the 02 or not. The next
thing he's gonna do is he's gonna chose a

78
00:06:01,929 --> 00:06:06,480
random value r and he's gonna build a new
ciphertext c prime. Which is (r to the e)

79
00:06:06,480 --> 00:06:12,013
c modulo N. Now what does that do? If we
pull the r into the RSA function, really

80
00:06:12,013 --> 00:06:17,546
what we just did is we multiply the RSA
plaintext, you know the PKCS1 including

81
00:06:17,546 --> 00:06:23,289
in m, we multiply that by r and that,
that whole thing gets raised to the power

82
00:06:23,289 --> 00:06:27,897
of e. Okay. So that's the effect of
multiplying c by (r to the e). It multiplies

83
00:06:27,897 --> 00:06:32,334
the plaintext by r, a value that the
attacker controls. And then he's gonna

84
00:06:32,334 --> 00:06:37,371
send c prime to the web server and the web
server is gonna say yes, this starts with

85
00:06:37,371 --> 00:06:42,132
02 or no, this doesn't start with 02. So
now we can abstract this problem to

86
00:06:42,132 --> 00:06:47,805
something more general which you can think
of as the following so I have this number

87
00:06:47,805 --> 00:06:53,010
x in my head. This is the number I'm
trying to get The PKCS1 encoding on m. I'm

88
00:06:53,010 --> 00:06:58,483
thinking of this number x and then what I
let you do is for r, which way r of your

89
00:06:58,483 --> 00:07:04,088
choice I will tell you whether r times x mod n
starts with 02 or not. And it turns out by

90
00:07:04,088 --> 00:07:09,294
asking enough questions it turns out
either by million questions of this type,

91
00:07:09,294 --> 00:07:14,962
you can basically recover all of x. Just
by learning whether r times x begins with 02

92
00:07:14,962 --> 00:07:20,533
or not by asking enough questions, you can
actually recover x. So in reality what

93
00:07:20,533 --> 00:07:24,634
this means is that the attacker can
capture a given ciphertext. This maybe

94
00:07:24,634 --> 00:07:28,847
corresponds to a ciphertext where the user
enters the credit card number or a

95
00:07:28,847 --> 00:07:33,226
password, and now the attacker wants to
decrypt the ciphertext. What he would do

96
00:07:33,226 --> 00:07:37,272
is he would send about a million
ciphertext like this, the web server for

97
00:07:37,272 --> 00:07:41,928
each ciphertext is gonna respond whether
the plaintext begins with 02 or not and at

98
00:07:41,928 --> 00:07:46,473
the end of the attack, the attacker just
blocks away with the, decryption of the

99
00:07:46,473 --> 00:07:50,727
ciphertext c. So this might seem a
little magical to you, how are you able to

100
00:07:50,727 --> 00:07:54,896
just from learning whether the most
significant bits are 02 or not, how you're

101
00:07:54,896 --> 00:07:59,439
able to recover the entire plain text. So
let me show you a simple example of this.

102
00:07:59,439 --> 00:08:03,822
I'll call those bab y Bleichenbacher just
to kinda get the idea across on how this

103
00:08:03,822 --> 00:08:08,098
attack might work. So imagine that the
attacker is able to send the ciphertext c,

104
00:08:08,098 --> 00:08:12,641
the web server is gonna use the secret key
to decrypt but let's suppose that instead

105
00:08:12,641 --> 00:08:16,596
of checking for 02 or not, all the web
server does is he asked is the most

106
00:08:16,596 --> 00:08:21,036
significant bit one or not. If the most
significant bit is one, the web server

107
00:08:21,036 --> 00:08:25,710
says yes. If the most significant bit is
not one, the web server is no. Moreover,

108
00:08:25,710 --> 00:08:30,565
to simplify things, let's assume that the
RSA module is n is a power of two. So n =

109
00:08:30,565 --> 00:08:35,539
two^n. Of course, this is not a valid RSA
modulus. An RSA modulus used to be a

110
00:08:35,539 --> 00:08:40,453
product of two distinct primes. But again,
just to keep things simple, let's pretend

111
00:08:40,453 --> 00:08:45,367
for a second that n is actually a power of
two. So now you realize that by sending

112
00:08:45,367 --> 00:08:49,802
the ciphertext c over to the web server,
the adversary just learn the most

113
00:08:49,802 --> 00:08:54,551
significant bits of the plaintext x.
Basically, the servers behavior completely

114
00:08:54,551 --> 00:08:59,240
reveals what the most significant is. Now
what the attacker can do is he can

115
00:08:59,240 --> 00:09:04,175
multiply the ciphertext by two to the e.
Now multiplying by two to the e has the

116
00:09:04,175 --> 00:09:09,274
effect of multiplying the plaintext x. By
two simply multiplying x by two and

117
00:09:09,274 --> 00:09:15,067
because we're working mod two to the N,
multiplying by two basically means shift

118
00:09:15,067 --> 00:09:20,789
left, okay. So now when we shift left in
fact we get to learn the most significant

119
00:09:20,789 --> 00:09:26,581
bits of 2x which is really the second most
significant bit of x, okay. So, again the

120
00:09:26,581 --> 00:09:32,257
most significant bit of 2x basically we
shift x to the left. And we reduce modulo

121
00:09:32,257 --> 00:09:37,596
n. So now, the most significant bit of 2x
modulo n is basically the second most

122
00:09:37,596 --> 00:09:42,846
significant bit of x. So now we learned
another bit of x. And now we're gonna

123
00:09:42,846 --> 00:09:48,158
repeat this again. We're gonna query a
four to the e  c, That corresponds to

124
00:09:48,158 --> 00:09:54,108
querying of 4x to the power e. Querying of
4x basically reveals the most significant

125
00:09:54,108 --> 00:09:59,454
bit of 4x mod n. 4x  four corresponds the
shifting by two bits. Which mean now we

126
00:09:59,454 --> 00:10:03,641
get to learn the third most significant
bit of x. And when we repeat this again,

127
00:10:03,641 --> 00:10:08,041
and again, and again for different multip
les of c and you can see that after just a

128
00:10:08,041 --> 00:10:11,751
few queries, about a 1,000 or 2,000
queries, we'll recover all of x. The

129
00:10:11,751 --> 00:10:15,674
reason Bleichenbacher needed about a
million queries is because he wasn't

130
00:10:15,674 --> 00:10:20,020
testing for one, He was actually testing
for 02 or not 02 and that basically means

131
00:10:20,020 --> 00:10:24,208
that he needs instead of 2,000 queries he
needs actually a million queries but

132
00:10:24,208 --> 00:10:28,729
that's still enough to recover all of the
plaintext text. Okay? So I hope this is

133
00:10:28,729 --> 00:10:34,337
explains why this attack is possible. Why
just this little bit of information about

134
00:10:34,337 --> 00:10:39,359
the most significant bits of the RSA
inverse is enough to completely decrypt

135
00:10:39,359 --> 00:10:46,023
RSA. So the bottom line here is that PKCS1 as implemented in web server as up

136
00:10:46,023 --> 00:10:50,323
until this attack was discovered was
basically insecure because the attacker

137
00:10:50,323 --> 00:10:54,902
could essentially decrypt a ciphertext he
wants just by issuing enough queries to

138
00:10:54,902 --> 00:11:00,215
the web server. So how do we defend
against this attack? Well, so the SSL

139
00:11:00,215 --> 00:11:05,004
community basically wanted the minimum
change in their code that would prevent

140
00:11:05,004 --> 00:11:09,854
this attack from working and so if you
look at the RFC, what they propose is the

141
00:11:09,854 --> 00:11:14,704
following. Well, there's a lot of text
here but basically what they propose is to

142
00:11:14,704 --> 00:11:19,433
say that if after you apply the RSA
decryption, you get a plaintext that's not

143
00:11:19,433 --> 00:11:24,344
PKCS1 encoded. In other words it doesn't
start with 02. What you're supposed to do

144
00:11:24,344 --> 00:11:28,949
is basically choose some random string r.
And just pretend that the plaintext is

145
00:11:28,949 --> 00:11:33,078
just a random string r and continuous as
nothing happened and of course the

146
00:11:33,078 --> 00:11:38,438
protocol will fail later on. So to be
concrete you see if the PKCS one encoding

147
00:11:38,438 --> 00:11:42,526
is not correct, what you would do is you
would just say the premaster secret is

148
00:11:42,526 --> 00:11:46,873
this random string or that we just picked
up off thin air and let's continue the

149
00:11:46,873 --> 00:11:50,961
protocol and of course the session set up
will fail because the client and the

150
00:11:50,961 --> 00:11:55,152
server will end up agreeing on different
keys and that will cause the session to

151
00:11:55,152 --> 00:11:59,447
terminate. So we actually don't tell the
attacker whether the plaintext begins with

152
00:11:59,447 --> 00:12:05,479
02 or not. All we do is just pretend that
the plaintext is some random value. So

153
00:12:05,479 --> 00:12:10,096
this was a minor code change to many web
servers and it was fairly easy to get

154
00:12:10,096 --> 00:12:14,892
deployed and in fact most web servers out
there today implement this version of

155
00:12:14,892 --> 00:12:19,329
PKCS1. However, this kind of raises the
question of whether PKCS1 should be

156
00:12:19,329 --> 00:12:23,946
changed all together so that we actually
are able to prove chosen ciphertext

157
00:12:23,946 --> 00:12:28,322
security. And that brings us to a
different way of doing encryption using

158
00:12:28,322 --> 00:12:33,391
RSA which is called Optimal Asymmetric
Encryption Padding, OAEP. And in fact the

159
00:12:33,391 --> 00:12:40,092
PKCS standard was updated and PKCS1 version
2.0 actually has support for OAEP which is

160
00:12:40,092 --> 00:12:48,871
a better way of doing RSA encryption. So
let me explain how OAEP works. So OAEP is

161
00:12:48,871 --> 00:12:54,911
due to the Bellare and Rogaway back in 1994. And
the way OAEP works is as follows. So you

162
00:12:54,911 --> 00:13:01,334
take your message that you wanna encrypt
this for example could be the 128 bits AES

163
00:13:01,334 --> 00:13:06,589
key. And then the first thing you do is
you append a short pad to it. So in this

164
00:13:06,589 --> 00:13:11,249
case, you put a 01 in the beginning and
then you add a whole bunch of zeroes. How

165
00:13:11,249 --> 00:13:16,026
many zeroes is actually depends on the
standard but you know that's supposed like

166
00:13:16,026 --> 00:13:20,686
they're 128 zeroes in here. And then you
also choose a random value so that this

167
00:13:20,686 --> 00:13:25,521
whole string is as big as your RSA modulus
so let's just say this is 2047 bits. Now

168
00:13:25,521 --> 00:13:30,065
before you apply the RSA function, you
first of all take the random value that

169
00:13:30,065 --> 00:13:34,491
you chose and you feed it into the hash
function. This hash function produces a

170
00:13:34,491 --> 00:13:38,787
value that's as big as the left hand side
of your encoding. You XOR the outputs.

171
00:13:38,787 --> 00:13:42,768
You feed the result into another hash
function which we call a g. You XOR

172
00:13:42,768 --> 00:13:46,750
that with a random value. And then
finally, you get these two values that you

173
00:13:46,750 --> 00:13:51,365
concatenate together. Okay, So, you
concatenate either left side and the

174
00:13:51,365 --> 00:13:56,852
right side that gives you something that
says is 2047 bits long and that's the thing

175
00:13:56,852 --> 00:14:03,131
that you apply the RSA function to. And the
result is the RSA encryption. Now there's

176
00:14:03,131 --> 00:14:07,636
a theory that was proved in 2001, due to
Fujisaki, Okamoto, Pointcheval, and Stern,

177
00:14:07,636 --> 00:14:12,557
that shows that in fact if all you do is
you, you assume that the RSA function is a

178
00:14:12,557 --> 00:14:17,062
Trapdoor permutation, a secure Trapdoor
permut ation, but in fact this mode of

179
00:14:17,062 --> 00:14:21,686
encrypting using RSA is in fact chosen
ciphertext secure but we have to

180
00:14:21,686 --> 00:14:26,607
assume that the functions h and g are kind
of ideal hash functions as I said these

181
00:14:26,607 --> 00:14:31,053
are called random oracles. Basically, we
assume that h and g are just random

182
00:14:31,053 --> 00:14:36,293
functions from their domains to their
range. In practice of course when OAEP is

183
00:14:36,293 --> 00:14:41,277
implemented, people just use SHA-256
say for h and g. Why is this called

184
00:14:41,277 --> 00:14:45,618
Optimal Asymmetric Encryption Padding?
Why is this o? Why does this stands for

185
00:14:45,618 --> 00:14:50,070
optimal? Well, the reason is if you look
at the ciphertext, you'll notice that the

186
00:14:50,070 --> 00:14:54,690
ciphertext is basically as short as it can
be. The ciphertext is exactly the length

187
00:14:54,690 --> 00:14:59,286
of one RSA output, there are no trailing
values that are appended to the ciphertext

188
00:14:59,286 --> 00:15:03,992
whereas for example, the ISO standard
if you remember even if you had to encrypt

189
00:15:03,992 --> 00:15:08,589
a very short message, what you would have
to do is you would have to encrypt x using

190
00:15:08,589 --> 00:15:12,638
RSA and then append to that x, the
encryption with the short message under

191
00:15:12,638 --> 00:15:17,126
the symmetric encryption system. So even
if you have just to encrypt a 128 bit AES

192
00:15:17,126 --> 00:15:21,411
key, with the ISO standard you would
get one RSA output plus a symmetric

193
00:15:21,411 --> 00:15:26,643
cipher whereas with OAEP, you just get one
RSA output and nothing else so in that

194
00:15:26,643 --> 00:15:31,090
sense, it's optimal, Optimal in terms of
the length of the ciphertext.

195
00:15:31,090 --> 00:15:35,897
Interestingly, this theorem here really
rely on properties of RSA. And in fact,

196
00:15:35,897 --> 00:15:40,644
the theorem is known to be false if
you use a general trapdoor permutation.

197
00:15:40,644 --> 00:15:45,512
Some other permutation doesn't have the
algebraic properties of RSA. So that left

198
00:15:45,512 --> 00:15:50,260
this question of if we have a general
trapdoor permutation, what is the correct

199
00:15:50,260 --> 00:15:55,127
way to do OAEP? And it turns out, there's
a minor modification to OAEP which makes

200
00:15:55,127 --> 00:16:00,115
the result more general. This is a result
due to Shoup back in 2001. Just shows that

201
00:16:00,115 --> 00:16:04,729
if you give me a general trapdoor
permutation f. It turns out if you replace

202
00:16:04,729 --> 00:16:09,546
the fixed pad that's using OAEP by a hash
function, this hash function w, which

203
00:16:09,546 --> 00:16:14,116
happens to be a hash function of the
message m and the randomness r that

204
00:16:14,116 --> 00:16:18,996
you're encrypting with, and then during
decryption, you actually check that this

205
00:16:18,996 --> 00:16:23,875
hash function value is correct. So when
you decrypt, you actually check the w of

206
00:16:23,875 --> 00:16:28,816
mr is really what's written in this
position in the plaintext. If you do that

207
00:16:28,816 --> 00:16:33,829
then basically this OAEP called OAEP+.
Is in fact CCS secure, Chosen Ciphertext

208
00:16:33,829 --> 00:16:38,078
Secure for any trapdoor permutation. You
don't have to rely on a specific

209
00:16:38,078 --> 00:16:42,621
properties of RSA. There's another result
called Simple Asymmetric Encryption

210
00:16:42,621 --> 00:16:47,342
Padding, SAEP+ which basically says
that if you are gonna rely on properties

211
00:16:47,342 --> 00:16:51,827
of RSA, then in particular way with RSA
when the public exponent is equal to

212
00:16:51,827 --> 00:16:56,429
3, it turns out you actually don't
need the second stage of encryption. The

213
00:16:56,429 --> 00:17:01,386
simple padding scheme here again using the
function w is actually already enough to

214
00:17:01,386 --> 00:17:06,321
guarantee chosen ciphertext security. So
these are variants OAEP but they're not

215
00:17:06,321 --> 00:17:11,760
really used. I just wanted to mention and
to let you know they exist. These are not

216
00:17:11,760 --> 00:17:16,239
really used mainly OAEP has been
standardized is what's used. Although

217
00:17:16,239 --> 00:17:20,974
again in reality, the most common
application of RSA for public encryption

218
00:17:20,974 --> 00:17:25,729
is in fact this PKCS1 that's
standardized in the HTTPS RFC. So just to

219
00:17:25,729 --> 00:17:30,526
make sure it is clear in your mind how
decryption actually works, let me ask you,

220
00:17:30,526 --> 00:17:35,683
how would you decrypt an SAEP ciphertext
ct. So here, you're given the ciphertext

221
00:17:35,863 --> 00:17:40,600
ct here and the question is which of these
three methods is the correct way of

222
00:17:40,600 --> 00:17:47,177
decrypting the ciphertext. So the correct
answer is the first one and let's see why.

223
00:17:47,177 --> 00:17:52,181
Well, given the ciphertext the first thing
what we need to do is apply the RSA

224
00:17:52,181 --> 00:17:57,250
inverse functions, the ciphertext and that
will give us the RSA plaintext which

225
00:17:57,250 --> 00:18:02,447
happens to be in this case x and r. So we
get this x and r here. The next thing we

226
00:18:02,447 --> 00:18:07,709
need to do is we need to hash r using the
function h and XOR the result with x and

227
00:18:07,709 --> 00:18:12,152
that will give us m and wm, r. And the
last we need to do is to make sure that

228
00:18:12,152 --> 00:18:17,213
the pad W(m,r) is correct so we check that
in fact w is equal to W(m,r) and if so we

229
00:18:17,213 --> 00:18:22,711
output m and if not, we output bottom to
say that the ciphertext is invalid and

230
00:18:22,711 --> 00:18:27,304
the decryption algorithm rejects it. And
by the way I'd like to emphasize that this

231
00:18:27,304 --> 00:18:31,731
checking of the pad during decryption is
crucial in all of the schemes that we

232
00:18:31,731 --> 00:18:36,956
just saw. So for example, in both OAEP+ and SAEP+, it's doing decryption.

233
00:18:36,956 --> 00:18:42,917
It's very important to check that the pad
is in fact correct so that the value of w

234
00:18:42,917 --> 00:18:48,534
that you get here during the encryption
really is the hash under the capital W of

235
00:18:48,534 --> 00:18:54,152
m and r and similarly on OAEP, it's very
important to check it during decryption.

236
00:18:54,152 --> 00:18:59,544
In fact, the value of the pad is the
constant 010000000. And of course if it

237
00:18:59,544 --> 00:19:04,556
happens to be not 01000 then you output
bottom and you say the ciphertext is

238
00:19:04,556 --> 00:19:08,713
invalid. The last thing I wanna point out
is that actually implementing OAEP can be

239
00:19:08,713 --> 00:19:12,679
quite tricky and let's see why. So
supposed you have, you write an OAEP

240
00:19:12,679 --> 00:19:17,347
decryption routine that takes the
ciphertext as input. The first thing you

241
00:19:17,347 --> 00:19:22,330
would do is you would apply the RSA
inverse function to the ciphertext and you

242
00:19:22,330 --> 00:19:27,565
would say well, you expect to get an n bit
value out, you know 2047 bits in the case

243
00:19:27,565 --> 00:19:32,548
of 2048 bit RSA modulus and if you get
something that's bigger than two to the

244
00:19:32,548 --> 00:19:37,150
2047, you say reject. We say error = one
and we go to Exit. The next thing we're

245
00:19:37,150 --> 00:19:42,014
gonna do is we're gonna check whether the
pad is in fact the correct pad and again

246
00:19:42,014 --> 00:19:46,820
if the pad is not the correct pad, then
again, we're gonna reject and go to Exit.

247
00:19:46,820 --> 00:19:51,512
The problem with this implementation is
well by now I hope you kind of guessed it

248
00:19:51,512 --> 00:19:55,918
is it's vulnerable to a timing attack,
right. So essentially by leaking timing

249
00:19:55,918 --> 00:20:00,382
information the attacker can now figure
out what caused the error. Was it, that

250
00:20:00,382 --> 00:20:04,674
was there an error the RSA decryption
happened to be too big or was there an

251
00:20:04,674 --> 00:20:08,909
error because the pad happened to be too
large? And if the attacker can this

252
00:20:08,909 --> 00:20:13,257
distinguish these two errors say by
timing. Then it turns out similar to the

253
00:20:13,257 --> 00:20:17,889
Bleichenbacher attack, it's possible to
completely decrypt any ciphertext of your

254
00:20:17,889 --> 00:20:22,408
choice. Just at very, very, very small
leak of information would completely allow

255
00:20:22,408 --> 00:20:28,203
the attacker to decrypt completely any
ciphertext that he wants to. So this shows

256
00:20:28,203 --> 00:20:32,624
that if you, even if you implement the
mathematics of OAEP decryption correctly,

257
00:20:32,624 --> 00:20:37,101
you can very easily mess up and open
yourself up to a timing attack which would

258
00:20:37,101 --> 00:20:41,074
make your implementation completely
insecure. So as usual, the lesson is,

259
00:20:41,074 --> 00:20:45,215
don't implement crypto yourself in
particular, RSA OAEP is particularly

260
00:20:45,215 --> 00:20:49,692
dangerous to implement yourself. Just use one
of the standard libraries for example,

261
00:20:49,692 --> 00:20:54,281
OpenSSL has an OAEP implementation and of
course what they do is very careful to

262
00:20:54,281 --> 00:20:59,038
make sure that the running time of OAEP
decrypt is always the same no matter what

263
00:20:59,038 --> 00:21:03,401
causes the error. Okay, So let's stop here
and then in the next segment we'll talk

264
00:21:03,401 --> 00:21:07,435
about the security of the RSA trapdoor
permutation.
