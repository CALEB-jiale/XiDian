1
00:00:00,365 --> 00:00:02,577
在之前的课程中 我们学习了公钥

2
00:00:02,577 --> 00:00:04,714
加密系统 是基于RSA的

3
00:00:04,714 --> 00:00:06,733
或者更一般的是来自陷门函数

4
00:00:06,733 --> 00:00:08,986
这节课 我们将学习公钥加密

5
00:00:08,986 --> 00:00:12,516
方案 这是基于diffie - hellman协议的

6
00:00:12,516 --> 00:00:14,327
先来回顾公钥加密系统 这里有

7
00:00:14,327 --> 00:00:16,370
三个算法 有一个密钥

8
00:00:16,370 --> 00:00:19,017
生成算法由Gen表示

9
00:00:19,017 --> 00:00:20,968
可以生成一个公钥和

10
00:00:20,968 --> 00:00:23,057
私钥 然后这里有两个算法 E

11
00:00:23,057 --> 00:00:27,237
和D分别是加密和解密算法 重点是

12
00:00:27,237 --> 00:00:29,467
加密算法加密时用的是

13
00:00:29,467 --> 00:00:31,788
公钥 解密算法解密时

14
00:00:31,788 --> 00:00:35,736
用的是私钥 物理世界中类似

15
00:00:35,736 --> 00:00:39,600
公钥加密是一个锁箱 任何人

16
00:00:39,600 --> 00:00:42,609
都可以置消息于箱子中 然后锁上

17
00:00:42,609 --> 00:00:45,200
箱子 和公钥对应 而且

18
00:00:45,200 --> 00:00:47,733
没有人可以打开这个箱子 除了

19
00:00:47,733 --> 00:00:50,736
拥有私钥的人 他的钥匙可以插入

20
00:00:50,736 --> 00:00:52,872
锁中 解锁箱子 恢复箱子里的消息

21
00:00:52,872 --> 00:00:56,912
之前的课程 我们学习了

22
00:00:56,912 --> 00:00:59,141
很多公钥加密的应用

23
00:00:59,141 --> 00:01:01,928
特别的 我们研究了密钥交换

24
00:01:01,928 --> 00:01:03,878
的应用 事实上 这就是SSL中如何

25
00:01:03,878 --> 00:01:06,107
使用公钥加密 服务器将公钥发送

26
00:01:06,107 --> 00:01:08,667
到浏览器 浏览器选择一个私钥

27
00:01:08,667 --> 00:01:11,434
然后用服务器公钥加密秘密

28
00:01:11,434 --> 00:01:13,538
将其发送到服务器

29
00:01:13,538 --> 00:01:15,860
服务器解密  现在浏览器和

30
00:01:15,860 --> 00:01:18,042
服务器有了公共的秘密信息 就可以

31
00:01:18,042 --> 00:01:20,600
用它加密数据 在他们之间交互

32
00:01:20,600 --> 00:01:23,383
在交互设置中 像这样在一个

33
00:01:23,383 --> 00:01:25,983
网络协议中 公钥加密

34
00:01:25,983 --> 00:01:28,667
主要是被用于建立共享的对称密钥

35
00:01:28,667 --> 00:01:30,999
通信双方可以用它来交换

36
00:01:30,999 --> 00:01:33,228
信息 然而 这有很多设置

37
00:01:33,228 --> 00:01:35,922
其交互就不可能的 那么

38
00:01:35,922 --> 00:01:38,429
公钥加密直接用于加密

39
00:01:38,429 --> 00:01:41,587
消息 对此有个例子是安全邮件系统

40
00:01:41,587 --> 00:01:44,002
邮件系统在某种意义上更适合于非

41
00:01:44,002 --> 00:01:46,696
交互系统 在某种意义上 发送者发送一个

42
00:01:46,696 --> 00:01:49,250
邮件 邮件在中继之间传送

43
00:01:49,250 --> 00:01:52,067
直到最后到达目的地

44
00:01:52,067 --> 00:01:54,133
目的地会有人可以解密

45
00:01:54,133 --> 00:01:56,262
不用与这边的发送者交互

46
00:01:56,262 --> 00:01:57,731
这可以做到 基本上 借助于发送者

47
00:01:57,731 --> 00:02:00,467
使用接收者的公钥加密这个消息

48
00:02:00,467 --> 00:02:04,250
密文会沿着SMTP链传送

49
00:02:04,250 --> 00:02:06,990
直到到达接收者那里 接收者会

50
00:02:06,990 --> 00:02:09,544
使用密钥去恢复原始发送的消息

51
00:02:09,544 --> 00:02:13,074
然而 有很多其他情况下

52
00:02:13,074 --> 00:02:15,227
交互是不可能的 我想要给你们介绍

53
00:02:15,227 --> 00:02:17,857
这两种情况 第一个例子是

54
00:02:17,857 --> 00:02:20,922
文件系统 事实上 公钥加密是一个

55
00:02:20,922 --> 00:02:23,277
管理文件共享的好方法 在加密文件系统

56
00:02:23,277 --> 00:02:24,934
我来解释这是什么意思

57
00:02:24,934 --> 00:02:27,379
想象我们的朋友Bob在这里

58
00:02:27,379 --> 00:02:29,792
他想把一个加密文件存储在某个

59
00:02:29,792 --> 00:02:31,603
存储服务器中 所以他要继续把

60
00:02:31,603 --> 00:02:34,533
加密文件写到存储服务器中 其实

61
00:02:34,533 --> 00:02:36,867
他写到服务器里的是如下内容：

62
00:02:36,867 --> 00:02:40,334
他要产生一个随机文件加密密钥

63
00:02:40,334 --> 00:02:42,667
我们称之为Kf（下标） 然后他会使用用密钥Kf

64
00:02:42,667 --> 00:02:45,674
用对称加密的方法

65
00:02:45,674 --> 00:02:49,715
去加密文件，然后加密

66
00:02:49,715 --> 00:02:52,780
密钥Kf' 用他所拥有的公钥 即Bob的公钥

67
00:02:52,780 --> 00:02:56,402
这可以使得Bob稍后有权限访问那个文件

68
00:02:56,402 --> 00:02:59,188
好 使用私钥 Bob可以解密消息开头

69
00:02:59,188 --> 00:03:02,532
恢复Kf 然后就可以

70
00:03:02,532 --> 00:03:04,933
解密实际的加密文件 恢复

71
00:03:04,933 --> 00:03:08,523
明文文件 所以 解密工作有两步

72
00:03:08,523 --> 00:03:11,216
但是 Bob现在想让Alice也有权限

73
00:03:11,216 --> 00:03:13,678
访问这个文件 他要做的就是继续下去

74
00:03:13,678 --> 00:03:16,400
在文件头里面另外也加入

75
00:03:16,400 --> 00:03:19,529
一个用Alice的公钥加密的Kf'

76
00:03:19,529 --> 00:03:22,315
好 注意这里没有交互

77
00:03:22,315 --> 00:03:24,916
Bob现在只知道的是Alice的公钥

78
00:03:24,916 --> 00:03:27,192
但他能够将文件访问权

79
00:03:27,192 --> 00:03:29,699
稍后授权于Alice

80
00:03:29,699 --> 00:03:32,767
现在Bob走了 然后Alice

81
00:03:32,767 --> 00:03:35,272
过来 稍后接手这个磁盘

82
00:03:35,272 --> 00:03:37,966
她能看到密文 解密她那部分的

83
00:03:37,966 --> 00:03:41,542
文件头 恢复Kf 然后就可以解密

84
00:03:41,542 --> 00:03:44,533
这个对称加密文件 恢复

85
00:03:44,533 --> 00:03:47,207
实际的文件内容 好 你们可以看见

86
00:03:47,207 --> 00:03:49,576
无需任何交互 Bob可以对这个文件系统进行写操作

87
00:03:49,576 --> 00:03:55,195
赋予Alice对文件的访问权 还有

88
00:03:55,195 --> 00:03:57,825
当Alice在读这个文件的时候 是不能

89
00:03:57,825 --> 00:04:00,443
与Bob交互的 因为可能已经找不到Bob了

90
00:04:00,443 --> 00:04:02,267
但目前Alice可以读取

91
00:04:02,267 --> 00:04:04,754
自己恢复的文件

92
00:04:05,800 --> 00:04:07,933
另外一个关于无交互应用的

93
00:04:07,933 --> 00:04:10,667
公钥加密的例子叫做

94
00:04:10,667 --> 00:04:14,003
密钥托管 也许这听起来

95
00:04:14,003 --> 00:04:16,186
像是一件坏事情 但事实上它是

96
00:04:16,186 --> 00:04:18,740
公司环境中的强制性特征 所以这里的

97
00:04:18,740 --> 00:04:21,573
概念就是这个 想象Bob对

98
00:04:21,573 --> 00:04:25,733
磁盘写数据 然后走了

99
00:04:25,733 --> 00:04:28,600
假设是Bob被解雇 或者生病了

100
00:04:28,600 --> 00:04:30,675
公司在某种情况下需要访问

101
00:04:30,675 --> 00:04:33,667
Bob的文件 那只能Bob可以解密

102
00:04:33,667 --> 00:04:36,133
这些文件的情况在公司环境是不适用

103
00:04:36,133 --> 00:04:38,198
的 公司可能需要

104
00:04:38,198 --> 00:04:41,635
访问这些文件 那问题就是如何做到这一点

105
00:04:41,635 --> 00:04:43,667
答案是介绍这个实体名为

106
00:04:43,667 --> 00:04:46,296
密钥托管服务 这个体系的

107
00:04:46,296 --> 00:04:48,322
运行方式如下

108
00:04:48,322 --> 00:04:51,248
基本上 当Bob向磁盘写他的文件时 他的

109
00:04:51,248 --> 00:04:54,406
系统 就是他将文件里的内容写到这个共享的

110
00:04:54,406 --> 00:04:56,800
存储介质 这当然跟以前的一样

111
00:04:56,800 --> 00:05:01,186
他会用文件加密密钥Kf加密这个文件

112
00:05:01,186 --> 00:05:04,467
用Bob的公钥加密这个Kf 但也会

113
00:05:04,467 --> 00:05:08,200
用一个托管服务加密Kf 所以这里

114
00:05:08,200 --> 00:05:11,400
托管服务是完全离线的 我们不

115
00:05:11,400 --> 00:05:14,329
提到这个 除非我们真的需要这个服务

116
00:05:14,329 --> 00:05:17,000
当Bob在写文件 他所做的就只是将

117
00:05:17,000 --> 00:05:20,366
托管组织公钥下的Kf加密的内容

118
00:05:20,366 --> 00:05:23,477
写到文件头 然后Bob

119
00:05:23,477 --> 00:05:26,067
离开了 现在公司需要恢复

120
00:05:26,067 --> 00:05:28,200
Bob的文件 该怎么做？ 好 此时他们

121
00:05:28,200 --> 00:05:30,536
应该联系托管服务 托管服务

122
00:05:30,536 --> 00:05:33,400
会读取这部分的文件头 用其私钥

123
00:05:33,400 --> 00:05:36,333
解密头文件来恢复Kf 然后用Kf

124
00:05:36,333 --> 00:05:38,802
去解密实际文件

125
00:05:38,802 --> 00:05:42,007
好 这种方法下你们也能注意到 托管服务是

126
00:05:42,007 --> 00:05:44,607
完全离线的 公司与托管服务

127
00:05:44,607 --> 00:05:47,600
没有交互 除非是真正需要

128
00:05:47,600 --> 00:05:50,737
托管的时候 同样可以看到

129
00:05:50,737 --> 00:05:53,133
这是一个非常干净简洁的的

130
00:05:53,133 --> 00:05:56,333
公钥加密应用 如我在前面的

131
00:05:56,333 --> 00:05:58,867
课程中所说 我们看到了基于

132
00:05:58,867 --> 00:06:01,333
陷门函数的公钥加密结构

133
00:06:01,333 --> 00:06:03,667
特别的 我们来看RSA 我们学过

134
00:06:03,667 --> 00:06:05,867
通用的结构 名为ISO标准

135
00:06:05,867 --> 00:06:09,467
也学过像OAEP+等结构

136
00:06:09,467 --> 00:06:11,887
这节课我们要学习的公钥结构

137
00:06:11,887 --> 00:06:13,467
来自Diffie-Hellman协议

138
00:06:13,467 --> 00:06:15,800
这是公钥系统的另一个类别

139
00:06:15,800 --> 00:06:18,508
我来介绍他们是如何工作的这些公钥

140
00:06:18,508 --> 00:06:21,133
系统通常被称为EIGamal公钥

141
00:06:21,133 --> 00:06:24,200
加密体制 Taher ElGamal其实是Marty

142
00:06:24,200 --> 00:06:26,635
Hellman的学生 他想到这个EIGamal

143
00:06:26,635 --> 00:06:30,165
加密系统作为其PhD论文的一部分

144
00:06:30,165 --> 00:06:32,400
其实ElGamal加密 因历史

145
00:06:32,400 --> 00:06:35,800
原因 被用于名为GPG的邮件加密系统

146
00:06:35,800 --> 00:06:39,360
GNU隐私保护 一如既然 当我们

147
00:06:39,360 --> 00:06:41,333
构建公钥加密系统 我们的目标是

148
00:06:41,333 --> 00:06:44,050
构建有选择密文安全的系统

149
00:06:44,050 --> 00:06:46,667
所以同时具有针对窃听和篡改

150
00:06:46,667 --> 00:06:50,599
攻击的安全性 所以在我介绍ELGamal

151
00:06:50,599 --> 00:06:53,333
系统之前 我们先来对Diffie-Hellman协议

152
00:06:53,333 --> 00:06:56,133
简短复习 在我的描述中 我要

153
00:06:56,133 --> 00:06:58,679
从我们上周版本中摘取一小部分

154
00:06:58,679 --> 00:07:00,467
其实 我只是想借用

155
00:07:00,467 --> 00:07:03,933
有限循环群的概念 事实上 比如我们有一个任意的有限

156
00:07:03,933 --> 00:07:07,131
循环群 可以是群（Zp）

157
00:07:07,131 --> 00:07:10,521
它也可以是椭圆曲线上的点群

158
00:07:10,521 --> 00:07:12,533
如我提到的 将Diffie-Hellman对应到

159
00:07:12,533 --> 00:07:15,467
椭圆曲线上有好处 但是为了简单起见

160
00:07:15,467 --> 00:07:18,000
我只提到G作为抽象的有限

161
00:07:18,000 --> 00:07:20,000
循环群 但是在你们脑海里 你们应该

162
00:07:20,000 --> 00:07:22,456
想象G是群（Zp） 我们来假设

163
00:07:22,456 --> 00:07:25,467
这个集合阶为n

164
00:07:25,467 --> 00:07:27,667
现在我们要选定这个群的一个生成元

165
00:07:27,667 --> 00:07:29,933
这就表示 基本上 如果你研究一下

166
00:07:29,933 --> 00:07:32,905
g的连续次数 那就可以得到

167
00:07:32,905 --> 00:07:35,200
集合G里面的所有元素 注意

168
00:07:35,200 --> 00:07:37,667
因为集合有n阶 我们知道

169
00:07:37,667 --> 00:07:41,133
g的n次方等于1 因此

170
00:07:41,133 --> 00:07:44,053
不需要超过g的n-1次方

171
00:07:44,053 --> 00:07:48,036
g的n次方等于1 我们就绕回来了

172
00:07:48,990 --> 00:07:51,600
好 我们有了这个循环群G 有了

173
00:07:51,600 --> 00:07:54,453
生产元 它的幂次生成G的所有元素

174
00:07:54,453 --> 00:07:57,565
现在我来介绍Diffie-Hellman协议的

175
00:07:57,565 --> 00:08:00,133
工作原理 基本上 Alice所做的就是她选择

176
00:08:00,133 --> 00:08:03,133
一个随机数a 然后计算g的a次方并把它

177
00:08:03,133 --> 00:08:06,621
发送给Bob Bob选择了一个随机数b 我们来看有谁

178
00:08:06,621 --> 00:08:10,905
记得 Bob给Alice发送的什么

179
00:08:12,936 --> 00:08:15,398
好 Bob将g的b次方发送给了Alice

180
00:08:15,398 --> 00:08:18,370
当然我要提醒你们 g的a次方和

181
00:08:18,370 --> 00:08:21,867
g的b次方都是集合G中的元素 现在

182
00:08:21,867 --> 00:08:24,133
他们可以获得导处共享秘密 如果你们记得

183
00:08:24,133 --> 00:08:27,667
共享密钥是g的ab次方 这些等式

184
00:08:27,667 --> 00:08:30,467
表明双方实际上都可以算得

185
00:08:30,467 --> 00:08:33,133
他们发送的值里隐含的共享秘密

186
00:08:33,133 --> 00:08:35,800
所以 比如Alice有B 也有a

187
00:08:35,800 --> 00:08:38,667
计算B的a次方 她就能得到共享密钥

188
00:08:38,667 --> 00:08:41,776
攻击者 当然 弱攻击者

189
00:08:41,776 --> 00:08:46,512
得到了A和B 现在他的目标是

190
00:08:46,512 --> 00:08:49,438
当然 他还得到了生成元g

191
00:08:49,438 --> 00:08:52,333
现在他的目标是计算g的ab次方 但是 我们讲过

192
00:08:52,333 --> 00:08:55,600
这的确是个难题 给定g g的a次方

193
00:08:55,600 --> 00:08:59,067
以及g的b次方 在一个集合比如Zp<i> 计算g

194
00:08:59,067 --> 00:09:03,533
的ab次方很难 所以 我们来看怎么将

195
00:09:03,533 --> 00:09:05,467
DH协议转换到一个实际的公钥系统

196
00:09:05,467 --> 00:09:08,533
如我所讲 这是Taher EIGamal的一个杰出的注意

197
00:09:08,533 --> 00:09:11,133
所以 一如既往 我们要准备我们的

198
00:09:11,133 --> 00:09:15,305
循环域G 和生成元G里面的g

199
00:09:15,305 --> 00:09:19,400
现在 这里我再写一次DH协议

200
00:09:19,400 --> 00:09:21,800
就是我们现在要假设这些东西

201
00:09:21,800 --> 00:09:25,533
在时间上是离散的 这两步不用

202
00:09:25,533 --> 00:09:28,133
同时出现 实际上它们可以在不同

203
00:09:28,133 --> 00:09:31,800
的时刻发生 DH协议的第一步

204
00:09:31,800 --> 00:09:34,578
是我们要研究的密钥

205
00:09:34,578 --> 00:09:36,533
生成 那是因为公钥要用这个

206
00:09:36,533 --> 00:09:39,200
大写字母A表示 私钥就用这个

207
00:09:39,200 --> 00:09:42,200
小写字母a表示 当然你们可以注意到

208
00:09:42,200 --> 00:09:45,667
从公钥中提取私钥

209
00:09:45,667 --> 00:09:49,333
也就是从大写字母A得出小a是

210
00:09:49,333 --> 00:09:52,132
离散对数问题 所以 恢复私钥

211
00:09:52,132 --> 00:09:55,787
实际上很困难 好 现在我们得到了公钥

212
00:09:55,787 --> 00:09:57,805
那等会儿Bob会加密一个消息并

213
00:09:57,805 --> 00:10:01,083
发送给Alice 用她的公钥加密

214
00:10:01,083 --> 00:10:04,161
那么Bob是怎么加密的呢？他会这么做

215
00:10:04,161 --> 00:10:06,400
他计算在DH协议中他的部分

216
00:10:06,400 --> 00:10:08,990
即，他把g的b次方发出去

217
00:10:08,990 --> 00:10:11,467
当然他会随机地选择小b

218
00:10:11,467 --> 00:10:14,005
现在他会自己算

219
00:10:14,005 --> 00:10:16,133
共享密钥 即他就可以计算

220
00:10:16,133 --> 00:10:20,276
g的ab次方，从这个g的ab次方

221
00:10:20,276 --> 00:10:23,249
他能得到对称密码系统的对称密钥

222
00:10:23,249 --> 00:10:25,282
接着他会

223
00:10:25,282 --> 00:10:27,844
用这个对称密钥对消息m加密

224
00:10:27,844 --> 00:10:30,306
他刚推导出来的密钥 这就是他会发送的密钥组

225
00:10:30,306 --> 00:10:32,200
那么他把自己在

226
00:10:32,200 --> 00:10:34,933
DH协议中部分和经过对称

227
00:10:34,933 --> 00:10:38,067
加密的消息m，他想发给Alice

228
00:10:38,067 --> 00:10:41,733
的消息m。好，现在你基本可以发现 我们

229
00:10:41,733 --> 00:10:43,933
和在DH协议中一样，我们进行同样的操作

230
00:10:43,933 --> 00:10:48,046
除了现在，Bob直接立即就使用

231
00:10:48,046 --> 00:10:51,067
他的DH秘密信息他要

232
00:10:51,067 --> 00:10:52,600
发送给Alice的加密消息

233
00:10:52,600 --> 00:10:54,200
现在，Alice怎么解密呢？

234
00:10:54,200 --> 00:10:56,733
基本上，她会计算

235
00:10:56,733 --> 00:10:58,615
DH秘密信息 回忆一下 她现在

236
00:10:58,615 --> 00:11:00,600
刚收到Bob在DH协议中的部分

237
00:11:00,600 --> 00:11:03,400
她有自己的秘密钥a，因此她可以

238
00:11:03,400 --> 00:11:06,733
计算DH秘密信息即

239
00:11:06,733 --> 00:11:09,400
g的ab次方，从这个她可以导出

240
00:11:09,400 --> 00:11:12,055
对称密钥k，接着，她会

241
00:11:12,055 --> 00:11:13,800
解密消息恢复出

242
00:11:13,800 --> 00:11:17,584
真正的明文 好这是我们直观的解释

243
00:11:17,584 --> 00:11:20,461
如何把DH协议转换成一个公钥加密

244
00:11:20,461 --> 00:11:22,318
系统 通过这种方法 这是一种比较有意思的

245
00:11:22,318 --> 00:11:25,400
的改进方法，在一开始的时候 部分因为

246
00:11:25,400 --> 00:11:28,000
你注意到，这是一个随机加密体制

247
00:11:28,000 --> 00:11:31,188
因此，每次Bob加密一个消息

248
00:11:31,188 --> 00:11:34,133
需要他随机选一个b

249
00:11:34,133 --> 00:11:38,015
用这个新的随机数b对消息进行加密

250
00:11:38,015 --> 00:11:40,364
我们看一下ElGamal系统 更详细的

251
00:11:40,364 --> 00:11:42,708
即我们认为它是一个实际的

252
00:11:42,708 --> 00:11:45,800
公钥密码系统，即算法Gen

253
00:11:45,800 --> 00:11:48,333
算法E和算法D

254
00:11:48,333 --> 00:11:50,533
所以，和往常一样，我们研究一下我们的有限

255
00:11:50,533 --> 00:11:53,133
n阶循环群。我们需要的另外一个因素是

256
00:11:53,133 --> 00:11:55,600
一个对称加密机制。因此我

257
00:11:55,600 --> 00:11:58,402
用Es和Ds标识这个。这是

258
00:11:58,402 --> 00:12:00,651
一个对称加密系统的加密和解密算法

259
00:12:00,651 --> 00:12:02,767
它能够保证

260
00:12:02,767 --> 00:12:05,077
认证加密。这个系统的密钥空间是

261
00:12:05,077 --> 00:12:08,667
大K。这样，我们还需要一个

262
00:12:08,667 --> 00:12:11,859
杂凑函数能把这些元素映射到群里

263
00:12:11,859 --> 00:12:14,533
即把G平方映射到

264
00:12:14,533 --> 00:12:17,200
密钥空间 现在 这是公钥密码系统的

265
00:12:17,200 --> 00:12:19,467
工作方式 现在我们描述

266
00:12:19,467 --> 00:12:22,133
一下这算个算法 算法生成

267
00:12:22,133 --> 00:12:24,200
公钥和私钥 接着加密

268
00:12:24,200 --> 00:12:26,600
和解密算法 密钥生成算法

269
00:12:26,600 --> 00:12:28,733
工作如下 我们所做的，基本上，

270
00:12:28,733 --> 00:12:31,600
构造Alice的DH协议部分

271
00:12:31,600 --> 00:12:34,133
接下来选择一个

272
00:12:34,133 --> 00:12:37,662
G中的随机生成元g， 选一个随机

273
00:12:37,662 --> 00:12:39,800
的指数a 密钥就是

274
00:12:39,800 --> 00:12:42,267
a，公钥是

275
00:12:42,267 --> 00:12:45,867
生成元g和Alice的

276
00:12:45,867 --> 00:12:48,262
DH协议部分，我们不用

277
00:12:48,262 --> 00:12:50,090
固定的生成元的原因是

278
00:12:50,090 --> 00:12:52,662
这样允许我们使用一个弱假设

279
00:12:52,662 --> 00:12:54,933
提高安全性 而且每次都

280
00:12:54,933 --> 00:12:57,845
选一个随机生成元好一些，选随机

281
00:12:57,845 --> 00:13:00,000
生成元很容易 我们要做的就是

282
00:13:00,000 --> 00:13:02,533
选一个起始的生成元 然后

283
00:13:02,533 --> 00:13:05,667
求a次方，a与n互素

284
00:13:05,667 --> 00:13:07,600
就能给我们另外一个生成元了 一个随机的

285
00:13:07,600 --> 00:13:10,400
群G的生成元 好。这样 你会

286
00:13:10,400 --> 00:13:12,799
发现这里公钥就是Alice

287
00:13:12,799 --> 00:13:15,000
在DH协议中的部分

288
00:13:15,000 --> 00:13:18,667
密钥是她随机选择的 现在

289
00:13:18,667 --> 00:13:21,400
我们怎么加密和解密呢？好 当Bob想

290
00:13:21,400 --> 00:13:23,067
加密一个消息时，他会使用公钥

291
00:13:23,067 --> 00:13:25,467
记着，它由g和h组成

292
00:13:25,467 --> 00:13:28,533
这里 他要加密消息m

293
00:13:28,533 --> 00:13:30,533
所以 他会这么做，他

294
00:13:30,533 --> 00:13:32,768
先构造他的DH协议部分

295
00:13:32,768 --> 00:13:35,200
他选择秘密信息b和在DH协议

296
00:13:35,200 --> 00:13:37,267
中一样，他计算

297
00:13:37,267 --> 00:13:40,667
g的b次方 实际上就是他的消息

298
00:13:40,667 --> 00:13:43,600
在DH协议中他发给Alice的

299
00:13:43,600 --> 00:13:46,050
他计算DH秘密信息

300
00:13:46,050 --> 00:13:49,000
即h的b次方 如果你还记得 h是g的a次方

301
00:13:49,000 --> 00:13:52,000
因此这个值实际上是g的ab次方

302
00:13:52,000 --> 00:13:54,067
这就是DH秘密消息 这是

303
00:13:54,067 --> 00:13:56,600
攻击者不知道的一部分消息 接着他

304
00:13:56,600 --> 00:13:59,067
计算一个对称密钥 通过hash

305
00:13:59,067 --> 00:14:02,333
u,v  这里u是

306
00:14:02,333 --> 00:14:04,102
攻击者会知道的，因为这会

307
00:14:04,102 --> 00:14:06,733
作为密文的一部分公开传播 但是v

308
00:14:06,733 --> 00:14:09,667
攻击者不知道。对安全性的证明

309
00:14:09,667 --> 00:14:13,267
实际上hash u和v对证明有帮助。

310
00:14:13,267 --> 00:14:15,667
这样我们对这两个进行hash，但是，严格地说

311
00:14:15,667 --> 00:14:18,600
我们只需要hash v，因为v是唯一攻击者

312
00:14:18,600 --> 00:14:20,200
不知道的值。攻击者已经知道

313
00:14:20,200 --> 00:14:22,737
u，因为它是在网络上传送的数据的一部分

314
00:14:22,737 --> 00:14:25,000
不管怎么样 Bob

315
00:14:25,000 --> 00:14:28,933
导出这个密钥k 通过hash u和v 接着

316
00:14:28,933 --> 00:14:30,867
他继续加密消息

317
00:14:30,867 --> 00:14:33,933
就用这个密钥k 最后他输出他的

318
00:14:33,933 --> 00:14:35,733
DH协议部分

319
00:14:35,733 --> 00:14:38,867
u值，然后对称密文

320
00:14:38,867 --> 00:14:41,223
是对消息m的直接加密

321
00:14:41,223 --> 00:14:43,841
好了 密文包括这两个

322
00:14:43,841 --> 00:14:45,764
部分 这些是我们要通过网络

323
00:14:45,764 --> 00:14:48,098
传送的 现在看一下 Alice怎么解密

324
00:14:48,098 --> 00:14:50,800
她会用她的密钥解密

325
00:14:50,800 --> 00:14:53,800
她这里接收到的 Bob在

326
00:14:53,800 --> 00:14:55,533
DH协议中的部分和对称

327
00:14:55,533 --> 00:14:59,000
消息加密，Bob发过来的

328
00:14:59,000 --> 00:15:01,800
她要做的是计算她自己的DH秘密

329
00:15:01,800 --> 00:15:05,267
消息 如果你记得 u的a次方就是g的b次方

330
00:15:05,267 --> 00:15:07,933
的a次方，就是g的ab次方 这里Alice

331
00:15:07,933 --> 00:15:11,467
计算DH秘密信息 那么我问个问题

332
00:15:11,467 --> 00:15:14,467
她怎么得到对称密钥k

333
00:15:14,467 --> 00:15:16,867
已知DH秘密信息 g的ab次方

334
00:15:16,867 --> 00:15:19,103
和她得到的密文

335
00:15:22,088 --> 00:15:23,933
好， 她这么做 还是很简单

336
00:15:23,933 --> 00:15:27,267
从密文中得到u，她有v，因为她刚才

337
00:15:27,267 --> 00:15:29,667
自己通过计算得到 那么现在她可以通过

338
00:15:29,667 --> 00:15:31,800
对u和v进行hash得到

339
00:15:31,800 --> 00:15:34,333
对称加密密钥

340
00:15:34,333 --> 00:15:36,667
用这个密钥对密文解密即

341
00:15:36,667 --> 00:15:39,600
得到明文 好 就这样

342
00:15:39,600 --> 00:15:42,333
这就是整个加密算法和解密算法 如果图形化

343
00:15:42,333 --> 00:15:45,493
密文看起来是这样的 和我们

344
00:15:45,493 --> 00:15:47,667
上一讲看到的类似 基本上

345
00:15:47,667 --> 00:15:50,323
这里会有一个短的头文件包含u

346
00:15:50,323 --> 00:15:53,467
想一下，就是g的b次方 剩下的

347
00:15:53,467 --> 00:15:56,800
这部分密文就是对所传送消息的加密

348
00:15:56,800 --> 00:16:01,441
用密钥k的加密

349
00:16:01,441 --> 00:16:04,000
接着 对解密 Alice会用这个头文件

350
00:16:04,000 --> 00:16:06,533
导出DH秘密信息 通过它，她可以

351
00:16:06,533 --> 00:16:09,735
导出k 然后对这个部分进行解密 以此

352
00:16:09,735 --> 00:16:12,336
得到原始的明文 通过这种方法 我要说明一下

353
00:16:12,336 --> 00:16:14,667
我用来描述这个系统的方法实际上

354
00:16:14,667 --> 00:16:17,544
并不是ElGamal最初用的方法 这是

355
00:16:17,544 --> 00:16:19,775
一种现代视觉的解释ELGaml加密算法的

356
00:16:19,775 --> 00:16:21,809
的方法 但是和ELGamal的观点等同

357
00:16:21,809 --> 00:16:25,600
那么 现在 让我们看一下

358
00:16:25,600 --> 00:16:27,379
ElGamal的效率 这里我写的是

359
00:16:27,379 --> 00:16:29,800
ElGamal加密算法的核心步骤

360
00:16:29,800 --> 00:16:32,400
即，加密中

361
00:16:32,400 --> 00:16:35,133
有两个群G上的指数运算

362
00:16:35,133 --> 00:16:37,067
指数运算， 我们知道是立方时间的算法

363
00:16:37,067 --> 00:16:39,867
如果使用重复平方算法的话

364
00:16:39,867 --> 00:16:43,467
所以 很耗时间 当我说

365
00:16:43,467 --> 00:16:45,819
耗时，我的意思是说 用现代的处理器

366
00:16:45,819 --> 00:16:47,200
它会花几个毫秒的时间计算

367
00:16:47,200 --> 00:16:49,667
这些指数运算 解密过程 基本上

368
00:16:49,667 --> 00:16:52,353
解密者只需要做一个指数运算

369
00:16:52,353 --> 00:16:54,272
即 u的a次方 这是解密过程的瓶颈

370
00:16:54,272 --> 00:16:57,667
好 你会认为加密过程

371
00:16:57,667 --> 00:17:00,067
实际上 是解密时间的两倍 因为

372
00:17:00,067 --> 00:17:02,400
加密需要两个指数运算 而

373
00:17:02,400 --> 00:17:05,333
解密只需要一个 但是 我们发现

374
00:17:05,333 --> 00:17:08,133
这并不一定精确 因为 你会注意到

375
00:17:08,133 --> 00:17:11,533
解密过程的指数运算是对变化的底数

376
00:17:11,533 --> 00:17:14,667
即，u每次都变 而在

377
00:17:14,667 --> 00:17:18,267
加密过程中 底数不变 g和h是从

378
00:17:18,267 --> 00:17:21,067
公钥导出来的，永远固定

379
00:17:21,067 --> 00:17:23,000
所以 实际上 如果你要

380
00:17:23,000 --> 00:17:25,667
对一个固定的底数做指数运算

381
00:17:25,667 --> 00:17:28,600
你可以进行大量的云计算 尤其，你可以

382
00:17:28,600 --> 00:17:32,067
利用重复平方算法，先离线做所有的平方运算

383
00:17:32,067 --> 00:17:34,534
那么你现在要做的就是

384
00:17:34,534 --> 00:17:36,733
算所有g的2的次幂次方 也就是说你先算

385
00:17:36,733 --> 00:17:39,267
g， g的平方，g的4次方

386
00:17:39,267 --> 00:17:41,872
g的8次方 g的16次方 g的32次方

387
00:17:41,872 --> 00:17:44,565
以此类推 这是你需要做的所有的平方步骤

388
00:17:44,565 --> 00:17:47,333
当你用重复平法算法离线时

389
00:17:47,333 --> 00:17:49,482
对h是一样的 那么当你需要做

390
00:17:49,482 --> 00:17:52,600
实际的真实的指数运算时你需要做的就是

391
00:17:52,600 --> 00:17:56,733
相乘 令这些个2的幂次组成

392
00:17:56,733 --> 00:17:58,533
指数b 这就是你想要算的

393
00:17:58,533 --> 00:18:00,267
所以，如果你好好想一下，这个就能加速

394
00:18:00,267 --> 00:18:03,133
以指数运算，3倍加速，实际上

395
00:18:03,133 --> 00:18:05,533
如果你允许我存储更大的表那么速度会更快

396
00:18:05,533 --> 00:18:09,133
这个称为窗口法指数运算

397
00:18:09,133 --> 00:18:12,133
但是 无论如何 如果你允许加密者

398
00:18:12,133 --> 00:18:14,937
存储多大的表格 从公钥导出来的表格

399
00:18:14,937 --> 00:18:17,400
实际上加密不会比

400
00:18:17,400 --> 00:18:19,267
解密慢，实际上 加密会比解密快

401
00:18:19,267 --> 00:18:22,867
但是这个需要

402
00:18:22,867 --> 00:18:25,467
解密者预计算这些很大的表格

403
00:18:25,467 --> 00:18:28,126
并存储 所以 如果所有的解密者都这么

404
00:18:28,126 --> 00:18:30,600
做 就是持续地加密给一个固定的

405
00:18:30,600 --> 00:18:34,400
接受者 可以进行地相当快 使用这些

406
00:18:34,400 --> 00:18:37,067
预计算表 如果加密者 对每一个

407
00:18:37,067 --> 00:18:39,800
消息 是给不同的接受者 例如

408
00:18:39,800 --> 00:18:41,933
如果你每发一封邮件

409
00:18:41,933 --> 00:18:44,612
你发给不同的接受者 那么 实际上

410
00:18:44,612 --> 00:18:47,671
会比解密慢1倍

411
00:18:48,533 --> 00:18:51,200
所以 这是一个应该记住的不错的技巧。实际上

412
00:18:51,200 --> 00:18:54,467
大部分密码学库都不这么做 所以 如果你发现

413
00:18:54,467 --> 00:18:57,000
你总是用同样公钥加密并且

414
00:18:57,000 --> 00:18:59,333
因为某些原因你的加密过程很耗

415
00:18:59,333 --> 00:19:01,400
时间 这就是你的瓶颈 记住你

416
00:19:01,400 --> 00:19:04,021
可以通过预计算的方法

417
00:19:04,021 --> 00:19:05,333
提速

418
00:19:05,333 --> 00:19:07,200
当然 如果加密是你的瓶颈 你也

419
00:19:07,200 --> 00:19:10,133
可以用RSA RSA的速度是相当快的

420
00:19:10,133 --> 00:19:14,067
好 我们对ELGamal加密算法的描述

421
00:19:14,067 --> 00:19:16,133
到这里就结束了 现在 下一个问题就是

422
00:19:16,133 --> 00:19:18,800
当然 为什么这个系统是安全的

423
00:19:18,800 --> 00:19:21,467
尤其 我们能证明它

424
00:19:21,467 --> 00:19:24,133
是选择密文安全的吗？更重要的是 在什么样的

425
00:19:24,133 --> 00:19:26,267
假设下我们可以证明这个系统是

426
00:19:26,267 --> 00:19:27,600
选择密文安全的 所以 我们下一节将

427
00:19:27,600 --> 00:19:29,310
讨论这个部分。【END】

