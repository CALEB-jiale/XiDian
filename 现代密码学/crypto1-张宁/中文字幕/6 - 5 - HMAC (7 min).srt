1
00:00:00,000 --> 00:00:04,438
现在我们理解了什么是抗碰撞的哈希函数

2
00:00:04,438 --> 00:00:08,660
并知道了如何去建立它们 我们已经准备好去描述一种非常流行的MAC--HMAC了

3
00:00:08,660 --> 00:00:12,828
让我提醒你们一下什么是Merkle-Damgard机制

4
00:00:12,828 --> 00:00:17,158
我们有一个小的压缩函数h 根据这个函数h我们建立了一个大的哈希函数

5
00:00:17,158 --> 00:00:20,785
如果假设这个压缩函数具有抗碰撞性那么建立的大哈希函数也具有抗碰撞性

6
00:00:20,785 --> 00:00:25,169
现在要考虑的问题是 我们能否用大的哈希函数去直接建立一个MAC

7
00:00:25,169 --> 00:00:29,445
而不依赖于PRF呢

8
00:00:29,445 --> 00:00:33,879
这是第一个首先想到的点 假设我给你一个Merkle-Damgard哈希函数

9
00:00:33,879 --> 00:00:38,781
你要注意到有一个映射 它把长信息通过哈希摘要变短

10
00:00:38,781 --> 00:00:43,742
而我们想把长信息直接转换为Mac 首先会想到的是既然这样

11
00:00:43,742 --> 00:00:48,526
为什么我们不直接对MAC密钥和消息的串接进行hash算法呢？

12
00:00:48,526 --> 00:00:53,310
因为这是极不安全的 那么问题来了

13
00:00:53,310 --> 00:00:55,329
为什么这样不安全

14
00:00:56,036 --> 00:01:01,529
答案是由于它的标准扩散 如果你们能回想起来Merkle-Damgard机制

15
00:01:01,529 --> 00:01:06,027
你就会意识到如果我给你一个特定信息的标志 换言之我给你了这个点的值

16
00:01:06,027 --> 00:01:10,580
这样攻击者就很容易添加另一个分组

17
00:01:10,580 --> 00:01:15,188
然后再一次接受计算压缩函数H的请求

18
00:01:15,188 --> 00:01:19,408
现在他们也能够得到原始信息联结上补齐分组的标志了

19
00:01:19,408 --> 00:01:23,739
而联结字W是他们自己加的 所以这是个存在伪造的可能性

20
00:01:23,739 --> 00:01:27,887
这个就是我们得到的

21
00:01:27,887 --> 00:01:32,497
在联结补齐分组后 事实上攻击者可以任意联结他想要的

22
00:01:32,497 --> 00:01:36,727
然后他就会得到这个组合信息的标志

23
00:01:36,727 --> 00:01:41,121
所以这是既不安全的 我无法告诉你们有多少产品犯过这种

24
00:01:41,121 --> 00:01:45,297
自认为这是个安全的Mac的错误

25
00:01:45,297 --> 00:01:49,861
它是极不安全的 是永远不应该被采用的 然而有一种标准的方法

26
00:01:49,861 --> 00:01:54,448
可以把一个抗碰撞的哈希函数转换成一个MAC 这个方法就是HMAC

27
00:01:54,448 --> 00:01:59,608
特别地 我们可以使用SHA-256哈希函数来建立这个MAC

28
00:01:59,608 --> 00:02:04,767
输出将是256位的 事实上HMAC被认为是一个伪随机函数

29
00:02:04,767 --> 00:02:09,609
所以通过SHA-256我们得到了一个输出为256位的伪随机函数

30
00:02:09,609 --> 00:02:14,774
让我来展示一下这个机制

31
00:02:14,774 --> 00:02:19,815
这是用符号表示的机制 它的工作方式如下 首先我们取密钥k

32
00:02:19,815 --> 00:02:25,112
然后我们在它后面联结一个叫做内部密码本的ipad

33
00:02:25,112 --> 00:02:29,771
这使它成为了Merkle-Damguard机制的一个分组 举个例子

34
00:02:29,771 --> 00:02:35,251
对于SHA-256而言将会是512位 我们把这个分组给信息M 然后求哈希

35
00:02:35,251 --> 00:02:40,364
我们刚刚说过 只做这些是既不安全的 然而除此之外

36
00:02:40,364 --> 00:02:45,896
HMAC还取了这256位输出 将密钥与外部密码本opad异或的结果附在这256位输出之前


37
00:02:45,896 --> 00:02:51,569
这也将使其变为512位的

38
00:02:51,569 --> 00:02:56,259
这是一个分组 然后它取这两个分组的哈希值

39
00:02:56,259 --> 00:03:00,943
从而最终得到信息M的标志 相比与光看符号

40
00:03:00,943 --> 00:03:05,833
图像的方式更有利于对HMAC的直观理解

41
00:03:05,833 --> 00:03:10,661
你可以看到这里有两个密钥k与内部密码本异或 然后交给Merkle-Damguard机制

42
00:03:10,661 --> 00:03:15,427
得到的输出再交给下一个Merkle-Damguard机制

43
00:03:15,427 --> 00:03:20,322
如此直至得到了最终的输出

44
00:03:20,322 --> 00:03:26,090
这就是HMAC的工作原理图示 现在我想证明一些我们已经见过的与此非常类似的东西

45
00:03:26,090 --> 00:03:31,295
特别的 如果你能想到

46
00:03:31,295 --> 00:03:36,868
以密钥为顶部输入 作为PRF的压缩函数H 那么我们

47
00:03:36,868 --> 00:03:42,769
这里实际要做的是估算这个PRF H在确定IV

48
00:03:42,769 --> 00:03:48,817
这里的结果是随机值 我们称之为K1 然后我们应用

49
00:03:48,817 --> 00:03:54,792
Merkle-Damgard链对输出做同样的操作

50
00:03:54,792 --> 00:04:00,766
如果你认为以密钥为较高输入的h作为PRG 同样的 我们应用

51
00:04:00,766 --> 00:04:06,519
这个PRF 使用一个不同的密钥到一个固定的值IV 我们会得到另一个随机值K2

52
00:04:06,519 --> 00:04:11,687
现在 我们用这些密钥-K1,k2来计算HMAC

53
00:04:11,687 --> 00:04:16,630
这看起来会很熟悉 这就是HMAC 这和我们在之前

54
00:04:16,630 --> 00:04:21,449
章节中讨论的NMAC相同 为了证明这是一个NMAC机制

55
00:04:21,449 --> 00:04:26,267
我们必须假设压缩函数h是

56
00:04:26,267 --> 00:04:31,148
PRF并且密钥事实上是一个较低的输入

57
00:04:31,148 --> 00:04:36,090
现在让我说说这些pad--opad和ipad 它们是固定的常数

58
00:04:36,090 --> 00:04:41,156
这是HMAC中特有的 就是固定不变的512比特

59
00:04:41,156 --> 00:04:46,166
所以当我们回过头看完整的HMAC机制

60
00:04:46,166 --> 00:04:51,213
你会意识到其和NMAC主要的区别是NAMC得到密钥是依据其他量的

61
00:04:51,213 --> 00:04:56,648
你注意到他们都是相同的密钥异或不同的常量

62
00:04:56,648 --> 00:05:02,084
本质上 密钥K1和K2也是一定意义上互相影响的

63
00:05:02,084 --> 00:05:07,325
因为他们虽然是用PRF对同一个固定值（IV） 计算

64
00:05:07,325 --> 00:05:12,101
但用了相关联的密钥 那么讨论K1和K2是伪随机的并且

65
00:05:12,101 --> 00:05:17,224
不依赖于另一项 另一个必须说明的是压缩函数不仅是

66
00:05:17,224 --> 00:05:22,282
PRF作为输入 顶端输入是密钥输入 而且当使用相关联的密钥输入时

67
00:05:22,282 --> 00:05:27,341
它也是PRF 在这些前提下

68
00:05:27,341 --> 00:05:32,146
应用对NMAC完全相同的分析来分析HMAC 我们可以证明HMAC是一个安全的MAC

69
00:05:32,146 --> 00:05:36,835
HMAC是一个安全的MAC 所以如我所说 在这些

70
00:05:36,835 --> 00:05:41,582
关于压缩函数H的PRF假设下HMAC可以被证明为安全的 其安全的界定

71
00:05:41,582 --> 00:05:46,271
和NMAC相同 换句话说你不需要换密钥

72
00:05:46,271 --> 00:05:51,289
只要你MAC信息的数量比输出标志小一半

73
00:05:51,289 --> 00:05:56,527
但对HMAC SHA256 输出空间是2的256次方

74
00:05:56,527 --> 00:06:01,715
平方根是2的128次方 也就意味着你能用HMAC SHA256

75
00:06:01,715 --> 00:06:07,334
来得到足量你想要的输出并保证安全

76
00:06:07,334 --> 00:06:12,704
关于HMAC的最后一点我要告诉你的是 TLS标准事实上要求

77
00:06:12,704 --> 00:06:18,129
必须支持HMAC SHA-196 也就是说从SHA1建立的HMAC函数截断到96比特

78
00:06:18,129 --> 00:06:24,342
记住SHA-1输出160比特 然后我们得到最重要的96比特

79
00:06:24,342 --> 00:06:29,414
现在你可能在想 记得我们之前所说的

80
00:06:29,414 --> 00:06:34,236
SHA-1不是我们以为的那么安全的哈希函数 那么我们

81
00:06:34,236 --> 00:06:39,016
为什么还在HMAC中用SHA-1 事实上这是可以的

82
00:06:39,016 --> 00:06:44,142
因为HMAC的分析不需要SHA-1是阻止冲突的

83
00:06:44,142 --> 00:06:49,145
它需要的仅是SHA-1的压缩函数是PRF 并且输入可以是密钥

84
00:06:49,145 --> 00:06:52,803
就我们所知 对底层的SHA-1压缩函数这也是对的

85
00:06:52,803 --> 00:06:56,376
即使这样它可能不是阻止冲突的

86
00:06:56,376 --> 00:06:59,994
就我们所知在HMAC内部使用它还是可行的

87
00:06:59,994 --> 00:07:03,657
这就是我们对HMAC讨论的结果

88
00:07:03,657 --> 00:07:04,698
下一节 我们将看HMAC的计时攻击

