1
00:00:00,000 --> 00:00:03,757
在本单元最后一节里

2
00:00:03,757 --> 00:00:07,615
我来展示一个影响许多MAC算法实现的通用攻击

3
00:00:07,615 --> 00:00:11,727
从这个攻击中能学到很多，那么我们来看一个具体的HMAC验证的实现

4
00:00:11,727 --> 00:00:15,941
这正好是Keyczar库的实现，使用Python编写

5
00:00:15,941 --> 00:00:20,003
这个代码用来验证HMAC生成的标签

6
00:00:20,003 --> 00:00:23,709
代码实际是被简化了

7
00:00:23,709 --> 00:00:27,822
我想使之尽可能简单而保留核心要点

8
00:00:27,822 --> 00:00:32,235
输入的是密钥，消息，和标签字节

9
00:00:32,235 --> 00:00:38,082
验证的方法是重新计算消息HMAC得到16个字节

10
00:00:38,082 --> 00:00:43,271
与给出的签名字节相比较。这看上去没有问题

11
00:00:43,271 --> 00:00:47,834
任何人都有可能这么实现，事实上许多人的确就是这样实现的

12
00:00:47,834 --> 00:00:52,231
问题在于，如果你去观察比较的方式的话

13
00:00:52,231 --> 00:00:56,740
正如你所想，比较是逐字节比较的

14
00:00:56,740 --> 00:01:01,373
Python的解释器内部有一个循环遍历所有16个字节

15
00:01:01,373 --> 00:01:06,297
只要发现不同就立刻终止循环，表示字符串不相同

16
00:01:06,297 --> 00:01:10,972
比较器存在，直到找到第一个不同

17
00:01:10,972 --> 00:01:16,146
这就能对这个库进行时间攻击

18
00:01:16,146 --> 00:01:21,257
让我们来看是如何攻击的。假设你是攻击者，拥有消息m

19
00:01:21,257 --> 00:01:26,368
你想得到对应有效的标签，你的目标是攻击一个拥有HMAC密钥的服务器

20
00:01:26,368 --> 00:01:31,230
服务器接收一对消息和MAC

21
00:01:31,230 --> 00:01:36,089
检查MAC是否有效，如果有效就对消息做某些处理

22
00:01:36,089 --> 00:01:40,450
如果无效就拒绝

23
00:01:40,450 --> 00:01:45,039
回到初始或者拒绝

24
00:01:45,039 --> 00:01:49,685
因此攻击者可以提交大量消息和MAC对

25
00:01:49,685 --> 00:01:54,274
观察能否推测出给定消息的标签

26
00:01:54,274 --> 00:01:59,036
下面我们来利用前面讲到的糟糕的实现

27
00:01:59,036 --> 00:02:03,661
攻击者要做的就是提交许多消息标签询问，每次的消息都相同

28
00:02:03,661 --> 00:02:08,044
而用很多很多不同的标签

29
00:02:08,044 --> 00:02:12,595
所以在第一次询问中

30
00:02:12,595 --> 00:02:17,202
只需用一个随机的标签和特定消息，然后测出服务器给出回应的时间

31
00:02:17,202 --> 00:02:21,674
下一次提交的询问，他就要尝试标签的首字节的所有可能性

32
00:02:21,674 --> 00:02:25,896
我来解释一下

33
00:02:25,896 --> 00:02:30,011
标签剩下的字节都是任意的，无关紧要的

34
00:02:30,011 --> 00:02:34,557
但对于首字节，他会提交一个首字节为0的标签

35
00:02:34,557 --> 00:02:39,392
然后观察服务器是不是比之前比较的时间长

36
00:02:39,392 --> 00:02:44,285
如果服务器比较的时间和第一步的时间相同的话

37
00:02:44,285 --> 00:02:49,062
然后他用首字节为1的标签再试一次

38
00:02:49,062 --> 00:02:52,976
如果服务器回应仍然很快的话

39
00:02:52,976 --> 00:02:56,961
他就用首字节为2的标签再试。如果服务器回应仍然很快的话

40
00:02:56,961 --> 00:03:01,101
他就用首字节为3标签再试

41
00:03:01,101 --> 00:03:05,344
直到最后首字节为3时，服务器回应的时间比以前长了一点

42
00:03:05,344 --> 00:03:09,484
这说明在正确的MAC和攻击者提交的MAC进行比较时

43
00:03:09,484 --> 00:03:14,334
在这个字节上是匹配的，在第二个字节上被拒绝了

44
00:03:14,334 --> 00:03:19,073
因此攻击者知道了标签的第一个字节是3

45
00:03:19,073 --> 00:03:23,435
现在他可以在第二个字节上重复相同的攻击

46
00:03:23,435 --> 00:03:28,519
这将提交一个标签，然后第二次，这里应该这样，

47
00:03:28,519 --> 00:03:32,514
提交第二字节是0的标签

48
00:03:32,514 --> 00:03:36,516
然后测量时间是不是比第二步的时间长

49
00:03:36,516 --> 00:03:40,502
如果不是，就把这个字节改成1

50
00:03:40,502 --> 00:03:44,758
然后测量时间是不是比之前长

51
00:03:44,758 --> 00:03:48,960
最后，当这个字节为...53时

52
00:03:48,960 --> 00:03:52,677
时间比之前长

53
00:03:52,677 --> 00:03:56,943
说明前两个字节都匹配了

54
00:03:56,943 --> 00:04:01,056
攻击者知道MAC的前两个字节为3和53

55
00:04:01,056 --> 00:04:05,274
然后他对第三字节做同样的事，然后是第四个

56
00:04:05,274 --> 00:04:09,175
直到最后服务器说，好我接受了，你给出了正确的MAC

57
00:04:09,175 --> 00:04:13,858
然后我们就能使用这个伪造的消息了

58
00:04:13,858 --> 00:04:18,711
所以这是一个好例子

59
00:04:18,711 --> 00:04:23,140
用时间攻击逐字节获得正确的MAC字节

60
00:04:23,140 --> 00:04:28,094
直到最后得到标签的所有正确字节

61
00:04:28,094 --> 00:04:32,640
然后他就能欺骗服务器，使之接受消息标签对

62
00:04:32,640 --> 00:04:37,186
我喜欢这个例子的原因是它是实现MAC验证程序的一个完全合理的方式

63
00:04:37,186 --> 00:04:41,941
然而，如果你用这种方式纠正它，它会被彻底地攻破。那么我们该怎么做呢？

64
00:04:41,941 --> 00:04:46,509
让我来给你展示两种防御方式，第一种防御，我会用程序按照如下的方式

65
00:04:46,509 --> 00:04:51,020
再把它写一遍。事实上Keyczar库恰好执行了这种防御

66
00:04:51,020 --> 00:04:55,588
这个代码实际上被用于库的更新方案

67
00:04:55,588 --> 00:05:00,328
我们要做的第一件事是我们要测试攻击者使用的签名字节是否是正确的长度

68
00:05:00,328 --> 00:05:04,896
HMAC这将是说，你知道96比特或者128比特，

69
00:05:04,896 --> 00:05:09,421
如果不是我们拒绝它作为一个无效的MAC。但是现在，如果签名字节确实有正确的长度


70
00:05:09,421 --> 00:05:13,466
那么我们要做的就是完成我们自己的比较

71
00:05:13,466 --> 00:05:17,895
比较两个字符串总是需要同等量的时间。所以特别地，

72
00:05:17,895 --> 00:05:22,159
这个用邮编函数在程序中，将本质上，如果你给它两个16字节的字符串

73
00:05:22,159 --> 00:05:28,116
两个16字节的字符串。它会创造出16对字节。

74
00:05:28,116 --> 00:05:32,666
所以它会创造出一系列16要素，每个要素都是一对字节。

75
00:05:32,666 --> 00:05:37,051
一个取自左边一个取自右边。然后你循环你会知道

76
00:05:37,051 --> 00:05:41,326
你会依次取遍这一系列对。你计算一下第一对的异或，再将结果取或

77
00:05:41,326 --> 00:05:45,492
然后计算第二对的异或，再对结果取或。

78
00:05:45,492 --> 00:05:49,932
你会注意到，如果在这个循环中的任一点上，

79
00:05:49,932 --> 00:05:54,207
两个字节恰好不是相等的，然后异或会评估那些非零的。

80
00:05:54,207 --> 00:05:58,577
因此，当我们再对它取或后得到结果。

81
00:05:58,577 --> 00:06:02,632
这结果也会算到零，我们会返回一个错误在比较以后。

82
00:06:02,632 --> 00:06:06,578
所以关键就是现在比较者总会用同等量的时间

83
00:06:06,578 --> 00:06:10,720
即使它发现第三个字节不同，

84
00:06:10,720 --> 00:06:15,479
它会继续惰转在两个字符串直到结尾。直到它返回结果。

85
00:06:15,479 --> 00:06:20,244
所以现在计时攻击被认为是不可能的。

86
00:06:20,244 --> 00:06:25,256
然而，这可能是相当有问题的，因为编译器试图在这里起很大作用。

87
00:06:25,256 --> 00:06:30,143
所以一个优化的编译器可能会看这个代码并说,嘿,等一下

88
00:06:30,143 --> 00:06:35,107
我能通过使四个循环结束来改善这个代码。

89
00:06:35,107 --> 00:06:39,378
一旦发现不兼容的字节，并且，一个优化的编译器可能是你，有时，

90
00:06:39,378 --> 00:06:43,930
薄弱的环节当它总是花同样的时间来走程序的时候

91
00:06:43,930 --> 00:06:48,482
所以不同的防御,没被广泛实施的,

92
00:06:48,482 --> 00:06:52,978
试图躲避对手,字符串实际上是被比较的。

93
00:06:52,978 --> 00:06:57,417
让我来向你展示我所说的意思。再来一次，在这里我们有我们的验证算法。

94
00:06:57,417 --> 00:07:01,740
所以它需要作为输入,一个键,一个消息,一个来自敌手的候选人的MAC。

95
00:07:01,740 --> 00:07:06,156
然后，我们做比较是我们首先,计算正确的MAC上的消息。

96
00:07:06,156 --> 00:07:10,407
但随后而不是直接比较MAC和签名字节的敌手,我们要做的是我们要散列一次

97
00:07:10,407 --> 00:07:14,933
我们要做的是我们要哈希一次。

98
00:07:14,933 --> 00:07:19,459
所以我们这里计算MAC的哈希值。我们计算签名字节的哈希值。当然，

99
00:07:19,459 --> 00:07:23,765
如果这两个恰好是相同的，然后HMACs的结果也将会是相同的，

100
00:07:23,765 --> 00:07:27,794
所以比较就会成功。但是关键是现在，如果签名的字节

101
00:07:27,794 --> 00:07:31,690
恰好和MAC的相同在一个字节中，但在剩余的字节里不同。

102
00:07:31,690 --> 00:07:35,607
当我们做这些额外的散列层,很有可能这两个结果

103
00:07:35,607 --> 00:07:39,675
是完全不同的。因此,字节的字节比较器只会在第一次迭代输出。

104
00:07:39,675 --> 00:07:43,693
只会在第一次迭代输出。这里的关键是敌手不确切地知道

105
00:07:43,693 --> 00:07:47,258
什么字符串正在被比较。因此，

106
00:07:47,258 --> 00:07:50,809
他不能装载一个之前我们讨论过的计时攻击。好的，

107
00:07:50,809 --> 00:07:55,447
所以这就是另一个防御。至少现在，你不会在被一个优化的编译器摆布了。

108
00:07:55,447 --> 00:08:00,027
所有这一切的主要内容是,你意识到那些已经在实施密文库中成为专家的人

109
00:08:00,027 --> 00:08:04,490
误会了这些东西。正确的代码

110
00:08:04,490 --> 00:08:08,351
表达地非常完美并且是完全易遭受计时攻击的

111
00:08:08,351 --> 00:08:12,310
这种攻击能完全地破坏系统的所有安全。所以这里要学到的当然是

112
00:08:12,310 --> 00:08:15,775
你不应该发明自己的密码,你甚至不应该实现自己的密码,

113
00:08:15,775 --> 00:08:19,785
因为很有可能它容易受到侧信道攻击。

114
00:08:19,785 --> 00:08:23,546
只是用一个标准的库像OpenSSL.Keyczar实际上是

115
00:08:23,546 --> 00:08:27,605
一个很好地库，用它会减少你遭受这些类型的攻击的机会。【END】

