1
00:00:00,000 --> 00:00:04,152
现在我们理解了选择明文安全性，让我们构建加密机制。

2
00:00:04,152 --> 00:00:08,515
来保证选择明文安全
第一个这样的加密机制是密码分组链接

3
00:00:08,515 --> 00:00:12,510
上图就是密码分组链接的工作原理

4
00:00:12,510 --> 00:00:16,610
密码分组链接是使用分组密码来实现选择明文攻击安全的一种方法

5
00:00:16,610 --> 00:00:20,868
特别的，我们来看一个使用初始向量IV的密码密码分组链接

6
00:00:20,868 --> 00:00:25,021
CBC代表密码分组链接。假设我们有一个分组密码ED

7
00:00:25,021 --> 00:00:28,963
现在我们定义CBC为下面的加密方案

8
00:00:28,963 --> 00:00:33,248
所以当这个加密算法被用来加密消息m

9
00:00:33,248 --> 00:00:37,991
首先要做的就是选择一个初始向量IV

10
00:00:37,991 --> 00:00:41,958
IV的大小是分组密码的分组大小
所以IV就是一个密码分组

11
00:00:41,958 --> 00:00:46,035
在高级加密标准中，IV有6个字节数

12
00:00:46,035 --> 00:00:50,649
然后我们将运行此算法
我们选择IV主要是想异或第一组文本m[0]

13
00:00:50,649 --> 00:00:54,726
所得结果将使用密码分组链接加密成密斿

14
00:00:54,726 --> 00:00:58,857
并且输出第一分组的密文m[1]

15
00:00:58,857 --> 00:01:03,041
现在有一个链接部分，我们真正运用了第一分组密文

16
00:01:03,041 --> 00:01:07,436
来加密第二组明文

17
00:01:07,436 --> 00:01:11,588
我们再将其和m[1]异或得到的密码即第二个密文m[2]

18
00:01:11,588 --> 00:01:15,535
就这样一个接一个，直到结束。
得到的即为密码分组链接，

19
00:01:17,559 --> 00:01:19,584
你可以发现每一个密码分组都链接在一起，
并且和下一个明文段异或为下一组密码。

20
00:01:19,584 --> 00:01:24,118
最后得到的密文实质上就是IV，我们选择的初始IV

21
00:01:24,118 --> 00:01:30,024
与所有的密文组都相连。我应该说IV就是初始化向量。

22
00:01:30,024 --> 00:01:35,795
我们将在术语中经常看见这个用法，

23
00:01:35,795 --> 00:01:39,717
每当我们需要随机选择一些信息在加密方案开始时

24
00:01:39,717 --> 00:01:43,543
典型的是我们将运用IV来代表初始化向量

25
00:01:43,543 --> 00:01:47,322
所以你应该注意密文会比明文稍长一些。

26
00:01:47,322 --> 00:01:51,149
因为我们不得不在密文中包括初始化向量IV，
它使得我们在加密时获有了随机信息

27
00:01:51,149 --> 00:01:55,450
所以第一个问题就是我们要如何解密CBC加密得到的结果。

28
00:01:55,450 --> 00:02:00,226
让我再提醒大家一下。

29
00:02:00,226 --> 00:02:04,470
当我们加密第一组信息时，我们将其异或上IV。

30
00:02:04,470 --> 00:02:09,187
加密这个结果得到第一组密文。所以请问，

31
00:02:09,187 --> 00:02:13,667
你们应该怎么解密它呢？
给出了第一组密文，

32
00:02:13,667 --> 00:02:17,915
你如何将它复原成最开始的明文组？
其实解密和加密是很类似的。

33
00:02:17,915 --> 00:02:21,660
在这我将画出解密的线路图，你可以大致上明白。

34
00:02:21,660 --> 00:02:25,961
两者几乎是相同的，只是异或过程出现在了底部而不是顶部。

35
00:02:25,961 --> 00:02:29,605
你还可以明白本质上我们去除了作为解密过程一部分的IV

36
00:02:29,605 --> 00:02:33,754
并且我们仅仅输出了原始数据，IV就被解密算法给丢弃了。

37
00:02:33,754 --> 00:02:38,438
接下去的原理将表示，

38
00:02:38,438 --> 00:02:43,762
通过初始向量 IV加密的CBC方式实际上就是所说的

39
00:02:43,762 --> 00:02:48,956
在选择明文攻击下的安全，更精确地说，

40
00:02:48,956 --> 00:02:54,083
大体上我们从PRP开始，换言之，
我们的分组密码E，定义在一个X空间。

41
00:02:54,083 --> 00:02:59,079
接着我们要通过加密算法Ecbc来结束，

42
00:02:59,079 --> 00:03:03,944
其中Ecbc含有长度为L的信息，
并且输出的密文长度为L+1

43
00:03:03,944 --> 00:03:09,324
假设我们有一个敌人选择用q明文查询

44
00:03:09,324 --> 00:03:15,024
接着我们就可以陈述安全的真实性，
对每一个攻击Ecbc的敌手

45
00:03:15,024 --> 00:03:20,184
相应都存在一个敌人来攻击REP，密码分组中

46
00:03:20,184 --> 00:03:24,926
在这两种算法中有如下关系，换言之，

47
00:03:24,926 --> 00:03:29,851
利用算法A对抗加密方案，
算法B对抗原始REP加上一些噪点的优势小。

48
00:03:29,851 --> 00:03:35,080
所以让我照例解释一下这个定理。

49
00:03:35,080 --> 00:03:40,005
本质上，E是一个安全的PRP

50
00:03:40,005 --> 00:03:45,051
并且这个值是可以忽略不计的，
我们的目的是说明敌人A的优点也是可忽略的。

51
00:03:45,051 --> 00:03:49,794
然而，我们应该避免说出这些是因为
我们得到了这些额外的误差。

52
00:03:49,794 --> 00:03:54,630
通常说这个误差项证明了CBC是安全的。

53
00:03:54,630 --> 00:03:59,676
我们应该确保误差项是可以忽略不计。

54
00:03:59,676 --> 00:04:04,474
因为一旦右边的所有项是可忽略的，
那么得到的总和是可忽略的。

55
00:04:04,474 --> 00:04:09,458
因此算法A在对抗Ecbc的优势也就忽略不计了

56
00:04:09,458 --> 00:04:14,565
事实上Ecbc能够安全需要满足
q的平方乘上L的平方远小于X的值，

57
00:04:14,565 --> 00:04:19,564
在这里我提醒一下，
q和L分别代表的是什么。

58
00:04:19,564 --> 00:04:24,566
L是我们加密信息的长度，所以L如果假设1000。

59
00:04:24,566 --> 00:04:29,902
就说明我们加密的信息含有1000个AES分组

60
00:04:29,902 --> 00:04:35,303
q是敌人在CPA攻击下可看到的加密分组的数目

61
00:04:35,303 --> 00:04:40,770
但是q实际上是我们运用关键字K来加密信息的次数

62
00:04:40,770 --> 00:04:46,041
换句话说，如果我们利用特别的AES来加密100条信息。

63
00:04:46,041 --> 00:04:51,052
Q的值即100。这是因为敌人在
密钥K下至多看100条信息被加密。

64
00:04:51,052 --> 00:04:56,224
让我们看看这代表的真实意义。

65
00:04:56,224 --> 00:05:00,866
我已经根据定理改写了错误平衡

66
00:05:00,866 --> 00:05:05,093
只是要提醒你们运用这些经过K加密的L长度的信息。

67
00:05:05,093 --> 00:05:09,370
并假设我们想要将敌人的优势降到低到2的32次方分之一

68
00:05:09,370 --> 00:05:13,346
这就意味着误差项应该要小于2的32次方分之一

69
00:05:13,346 --> 00:05:17,853
让我们再看看AES所代表的含义。

70
00:05:17,853 --> 00:05:22,300
AES运用128比特的数据分组，
所以X的值应该为2的128次方

71
00:05:22,300 --> 00:05:26,363
X的大小为2的128次方

72
00:05:26,363 --> 00:05:30,865
将这个插入表达式中，所得到q和L的乘积。

73
00:05:30,865 --> 00:05:35,477
将要小于2的128次方分之一
这就意味着在我们运用特别的密钥

74
00:05:35,477 --> 00:05:40,014
加密长度2的48次方的AES分组时，
我们需要改变密钥。

75
00:05:40,014 --> 00:05:46,966
实质上CBC在密钥被用来加密长度长于
2的48次方的AES分组时就不再安全

76
00:05:46,966 --> 00:05:49,572
它还不错的是，安全定理准确地告诉我们

77
00:05:49,572 --> 00:05:54,499
多长的密钥可以被使用，你应该多频繁地更换密钥

78
00:05:54,499 --> 00:05:59,575
有趣的是如果你运用类比的方法得到3重DES

79
00:05:59,575 --> 00:06:04,909
它实际上用了更短的分组，可能只有64比特，
所以密钥需要更加频繁地更换

80
00:06:04,909 --> 00:06:10,485
大概每一65000DES组，你就需要生成一个新的密匙。

81
00:06:10,485 --> 00:06:15,275
所以这是说明为什么AES有更大的分组的一个理由，但是事实上，

82
00:06:15,275 --> 00:06:20,240
像CBC这样的形式更安全并且一个密钥在必须更换前能用更长的时间

83
00:06:20,240 --> 00:06:24,796
这就意味着需要2的16次方的分组，

84
00:06:24,796 --> 00:06:29,586
每一个分组是8字节，所以当你加密了越半个G的数据时

85
00:06:29,586 --> 00:06:33,868
你需要更换DES密钥，它的标准是非常低的

86
00:06:33,868 --> 00:06:37,645
你会发现在你必须更换密钥前，
利用AES你可以加密更多的数据

87
00:06:37,645 --> 00:06:42,604
所以我想告诉你一个很常见的错误，
人们已经在使用初始向量IV加密的CBC技术。

88
00:06:42,604 --> 00:06:47,627
攻击者们可以快速预测出

89
00:06:47,627 --> 00:06:52,712
你将运用来作为加密特殊信息的IV

90
00:06:52,712 --> 00:06:57,797
这Ecbc就不再具备CPA安全了。
所以当你使用初始向量IV加密的CBC技术时，

91
00:06:57,797 --> 00:07:02,246
就像我们刚刚展示的，IV的不可预知性是至关重要的。
来看一个攻击案例，

92
00:07:02,246 --> 00:07:06,282
假设碰巧给出了信息中特殊的加密方法，

93
00:07:06,282 --> 00:07:10,695
攻击者可以预测出用作下一条信息的IV

94
00:07:10,695 --> 00:07:14,839
这就表明了事实上这个结果系统不是CPA安全

95
00:07:14,839 --> 00:07:19,197
所以敌手要做的第一件事是请求一组信息的加密

96
00:07:19,197 --> 00:07:23,449
特别是被译成0的一组信息。

97
00:07:23,449 --> 00:07:27,592
所以敌手得到的是一组信息的加密，
就是加密消息m0异或上IV

98
00:07:27,592 --> 00:07:31,748
当然，敌手同时也获得了IV

99
00:07:31,748 --> 00:07:35,877
所以现在敌手通过假设可以预测出用来做下一次加密的IV

100
00:07:35,877 --> 00:07:40,196
我们称这个IV为良好的IV

101
00:07:40,196 --> 00:07:44,460
所以接下来敌手将要面对语义安全挑战，

102
00:07:44,460 --> 00:07:49,167
信息m0将用于预测出IV异或IV1的值，
这个值会用于加密c1。

103
00:07:49,167 --> 00:07:53,707
信息m1就会变成其他信息，但这并不影响它的意义。

104
00:07:53,707 --> 00:07:58,248
就让我们来看看当敌手得到语义安全挑战的结果时会发生什么？

105
00:07:58,248 --> 00:08:02,346
它将得到m0或m1的密文，

106
00:08:02,346 --> 00:08:06,470
当敌手收到m0的密文时

107
00:08:06,470 --> 00:08:10,800
告诉我被加密成密文c的真正的明文是什么？

108
00:08:11,260 --> 00:08:17,368
答案是，它就是被加密的信息异或上IV异或上IV1

109
00:08:17,368 --> 00:08:22,826
异或上IV，IV是加密信息时用到的IV。

110
00:08:22,826 --> 00:08:28,301
这当然就是IV1。所以当敌手得到了m0的加密时

111
00:08:28,301 --> 00:08:33,167
他实际得到是分组密码算法中的IV1

112
00:08:33,167 --> 00:08:38,440
你瞧，注意到他已经从选择明文查询中得到了。

113
00:08:38,440 --> 00:08:42,800
之后，当敌手得到信息m1的加密时，他就得到了

114
00:08:42,800 --> 00:08:47,825
一个对信息m1的常规CBC加密，
所以我们发现他有一个简单的方式

115
00:08:47,825 --> 00:08:53,057
来打破这个方案时，他只需要问：

116
00:08:53,057 --> 00:08:58,354
"第二组的密文c和我通过CPA查询接收到的值相等吗？"

117
00:08:58,354 --> 00:09:03,843
如果相等，我会说我得到了m0的加密，
否则我会说我收到了m1的加密。

118
00:09:03,843 --> 00:09:09,209
所以它真正的测试得到的是c1与第二组的c相关

119
00:09:09,209 --> 00:09:14,441
c11与c1的第二组相关，如果这两组是相等的，就得到了。

120
00:09:14,441 --> 00:09:20,095
否则就是1。所以这个敌手的优势是要得到1，并且，

121
00:09:20,095 --> 00:09:25,650
结果他完全打破了CBC加密的CPA安全。
所以这里学到的是，

122
00:09:25,650 --> 00:09:30,334
如果IV是可预测的，那么事实上就没有了CPA安全

123
00:09:30,334 --> 00:09:35,621
并且不幸的是，这事实上是一个很常见的错误。

124
00:09:35,621 --> 00:09:41,339
特别是在SSL协议和TLS 1.1中，
得到的IV表示为记录数I。

125
00:09:41,339 --> 00:09:46,363
就是最后密文组的记录I-1。这意味着，

126
00:09:46,363 --> 00:09:51,579
给定了密文的记录数I-1，
敌手就能清楚地知道被用来做记录I的IV是什么?

127
00:09:51,579 --> 00:09:56,031
最近，就在上个夏天

128
00:09:56,031 --> 00:10:00,737
就有一个对SSL具有毁灭性攻击的事情。

129
00:10:00,737 --> 00:10:06,016
我们将在对SSL具体解释时，来描述这个攻击，
但是现在我只是想确定

130
00:10:06,016 --> 00:10:12,371
你能够理解当你使用CBC加密时，
至关重要的是IV是随机的

131
00:10:12,371 --> 00:10:16,372
所以现在我将给你们展示基于临时值(nonce)的CBC加密

132
00:10:16,372 --> 00:10:21,443
在这个形式中，IV被非随机的独特的临时值取代，

133
00:10:21,443 --> 00:10:27,928
比如1,2,3,4,5,都可以用来作为一个临时值，
现在，这种模式的吸引力在于

134
00:10:27,928 --> 00:10:33,246
如果接收方真的知道这个值是多少了，

135
00:10:33,246 --> 00:10:37,880
就没有理由再包含这个值到密文中，

136
00:10:37,880 --> 00:10:43,197
在这种情况下，密文就和明文的长度一致了。
不像使用初始向量IV的CBC加密，

137
00:10:43,197 --> 00:10:47,276
我们需要扩大密文的长度来容纳IV。
如果这个值是接收方已知的，

138
00:10:47,276 --> 00:10:53,315
就没必要再包含在密文中了，
而密文就和明文的长度相等了。

139
00:10:53,315 --> 00:10:59,335
所以使用不随机但独特的临时值是完美的，
你需要知道的至关重要的一点是。

140
00:10:59,335 --> 00:11:06,345
如果你想要这么做，
在CBC链中使用临时值前你需要多做一步，

141
00:11:06,345 --> 00:11:11,355
特别的，在这个形式中我们将
使用两个独立的密钥，k和k1。

142
00:11:11,355 --> 00:11:16,434
密钥k是用来加密个人信息分组，

143
00:11:16,434 --> 00:11:21,474
然后，密钥k1是用来加密临时值的。

144
00:11:21,474 --> 00:11:27,494
所以输出将是随机的IV，随后将被用于CBC链中。

145
00:11:27,494 --> 00:11:33,504
所以这个额外的步骤，用密钥k1加密非随机特殊值，是至关重要的。

146
00:11:33,504 --> 00:11:37,509
如果没有这一步，CBC加密将不再安全。

147
00:11:37,509 --> 00:11:41,514
特别的，如果你在CBC加密中错误的使用了临时值。

148
00:11:41,514 --> 00:11:44,046
换句话说，你把临时值当成了IV。

149
00:11:44,046 --> 00:11:47,380
然后我们会发现，使用非随机临时值将不会使CBC安全。

150
00:11:47,380 --> 00:11:49,919
我们在先前看过这种错误。

151
00:11:49,919 --> 00:11:56,047
事实上，如果你说，k将等于k1。
换句话说，你仅仅将临时值用密匙k加密。

152
00:11:56,047 --> 00:12:01,728
这也将使CBC不再安全，并对明文产生危害。

153
00:12:01,728 --> 00:12:07,975
因此我想确保你完全理解如果
临时值在CBC加密中不是随机的，

154
00:12:07,975 --> 00:11:12,116
这个额外的步骤将发生，这个额外的步骤将会颠倒，

155
00:12:12,116 --> 00:12:14,310
所以希望你永远不要忘了把他们输入进去。

156
00:12:14,310 --> 00:12:19,291
让我提醒你，这是一个非常常见的错误。

157
00:12:19,291 --> 00:12:26,591
许多现实中的实践项目和实验
都忘记在非随机临时值用于CBC链前加密它。

158
00:12:26,591 --> 00:12:31,679
这导致了许多安全危险。

159
00:12:31,088 --> 00:12:35,795
比如在TLS中，TLS，就像我们所说的，使用了一个可以被预测的IV，这导致了一个对于TLS的攻击。

160
00:12:35,795 --> 00:12:40,282
记住这个理由，这是非常重要的。

161
00:12:40,282 --> 00:12:44,950
事实上许多加密APIs被设置来几乎
故意误导了用户错误地使用CBC。

162
00:12:44,950 --> 00:12:49,451
所以让我们看CBC在open SSL中是如何实现的。

163
00:12:49,451 --> 00:12:53,840
这里是函数的参数，

164
00:12:53,840 --> 00:12:58,119
基本上，这是密文会写入的地方

165
00:12:58,119 --> 00:13:02,760
这是明文的长度，这是一个准确的密钥，
最后有一个参数是确定你是否在加密或者解密。

166
00:13:02,760 --> 00:13:06,438
我想指出这里最重要的参数，

167
00:13:06,438 --> 00:13:10,884
是真实的IV值，不幸的是

168
00:13:10,884 --> 00:13:15,330
用户被要求来提供IV，
而函数在CBC加密机制中直接使用IV。

169
00:13:15,330 --> 00:13:19,831
它在使用前没有对IV加密，

170
00:13:19,831 --> 00:13:24,332
如果你们曾经用非随机IV调用这个函数，
结果加密系统就不再CPA安全了。

171
00:13:24,332 --> 00:13:28,816
所以有一点非常重要需要知道，调用这样的函数，

172
00:13:28,816 --> 00:13:33,960
CBC加密或者open SSL不管是提供一个真实的随机IV，

173
00:13:33,960 --> 00:13:38,836
或是如果你想用IV来做计数器，用AAS来加密计数器。

174
00:13:38,836 --> 00:13:43,668
在你使用CBC进行加密前，

175
00:13:43,668 --> 00:13:48,340
非常重要的是，程序员要知道它需要是完成的，

176
00:13:48,340 --> 00:13:52,456
否则CBC加密就是不安全的。
最后一个关于CBC的技术性问题是

177
00:13:52,456 --> 00:13:57,183
当信息长度不是分组长度时怎么做？

178
00:13:57,183 --> 00:13:01,689
如果最后的信息块比AES的分组长度小时应该怎么做？

179
00:14:01,689 --> 00:14:06,281
例如，最后的一组信息会少于16比特，
答案是如果我们在最后分组中添加一些比特，

180
00:14:06,281 --> 00:14:11,586
让它变成16比特，和AES分组一样长。

181
00:14:11,586 --> 00:14:16,633
并且这些垫入的文本，将在解 密时移除。

182
00:14:16,633 --> 00:14:21,873
这有一个典型的途径，即在TLS中使用的途径，

183
00:14:21,873 --> 00:14:26,919
文本由N比特组成，基本上你需要写入数字N，代表N比特。

184
00:14:26,919 --> 00:14:32,036
比如你要5字节，将字符55555垫入

185
00:14:32,036 --> 00:14:37,175
得到每一个字节的值都5
对于垫入文本，关键的一点是，基本上，

186
00:14:37,175 --> 00:14:42,012
当解密者收到消息时，
他需要看到最后一个分组的最后一个字节的值。

187
00:14:42,012 --> 00:14:47,970
假设这个值是5，那么他只需简单移除最后5个比特的信息。

188
00:14:47,970 --> 00:14:53,818
现在问题来了，当信息是16比特时要怎么办？

189
00:14:53,818 --> 00:14:56,262
所以事实上不需要垫入文本了，

190
00:14:56,262 --> 00:15:00,476
如果我们不垫，那就会有问题，
因为解密者仍要找最后一个字节的分组。

191
00:15:00,476 --> 00:15:05,267
但分组中不含真正所需的信息，

192
00:15:05,267 --> 00:15:10,000
而他仍需要在明文中将最后那个字节的值移除。
所以这也会是一个问题，

193
00:15:10,000 --> 00:15:15,363
解决的方法是，当没有所需要的垫时

194
00:15:15,363 --> 00:15:20,662
我们仍然需要加入冗余比特，
当我们添加完时就会多一个分组。

195
00:15:20,662 --> 00:15:25,830
这个分组16比特中的每一比特都包含数16

196
00:15:25,830 --> 00:15:30,042
所以我们加入了16个垫子，当解密者需要解密时。

197
00:15:30,042 --> 00:15:34,473
他找到最后一组的最后一个字节，得到值为16

198
00:15:34,473 --> 00:15:38,823
那么他就移除这整个分组。然后剩下的就全是明文了

199
00:15:38,823 --> 00:15:42,975
然而不幸的是，实际上你用CBC所加密的信息都是短信息

200
00:15:42,975 --> 00:15:47,019
信息可能仅含32比特

201
00:15:47,019 --> 00:15:51,387
如果16字节的倍数，你就得多加入一个分组。

202
00:14:51,387 --> 00:14:55,108
使得密文变成48比特仅仅为了容纳CBC的垫

203
00:15:55,108 --> 00:15:59,584
我应该说明，存在一种CBC的变体，
叫做CBC的明文偷窃。

204
00:15:59,584 --> 00:16:03,790
能够避免这类问题，但是我不打算在这里详细说明。

205
00:16:03,790 --> 00:16:07,907
如果你对这个感兴趣的话，可以上网查查。
我们对CBC的讨论到这里就结束了

206
00:16:07,907 --> 00:16:12,198
下一节我们即将学习如何运用计数模值。

207
00:16:12,198 --> 00:16:13,720
来加密成倍的信息，但只用一个密钥。【END】

