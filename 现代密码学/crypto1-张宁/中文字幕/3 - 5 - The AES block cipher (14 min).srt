1
00:00:00,000 --> 00:00:04,819
多年来，DES和三重DES明显不是为硬件来设计的。

2
00:00:04,819 --> 00:00:09,116
并且他们速度很慢。于是，
NIS建立了一个新的标准化分组密码程序，

3
00:00:09,116 --> 00:00:13,820
叫做高级加密标准，简称AES。

4
00:00:13,820 --> 00:00:18,640
NIS在1997年宣布征集新的分组加密算法，

5
00:00:18,640 --> 00:00:22,821
一年后，它一共收到了15份提议。最终在2000年，

6
00:00:22,821 --> 00:00:27,350
它采用了一个叫做Rijndael的高级加密标准

7
00:00:27,350 --> 00:00:32,471
这是当时在比利时设计的一套密码。我们要了解的是

8
00:00:32,471 --> 00:00:38,301
它的分组大小是128比特,并且可以有
三种大小的密钥，128、192、256比特。

9
00:00:38,301 --> 00:00:44,504
前提是密钥越长，作为一个为伪随机置换
的分组密码安全性就越高。

10
00:00:44,504 --> 00:00:50,409
但是，由于它同时也包含了更多的操作轮数，

11
00:00:50,409 --> 00:00:56,160
使得密码变得更慢。因此，密钥越长，

12
00:00:56,160 --> 00:01:01,920
密码就越安全，速度也就越慢。

13
00:01:01,920 --> 00:01:07,483
例如，AES中128比特的密钥就是最快的
而256比特就是最慢的。

14
00:01:07,483 --> 00:01:11,751
现在AES由一种代换-置换网络构建而成。
这不是一种 Feistel 网络，

15
00:01:11,751 --> 00:01:16,135
记住这个，在Feistel结构中，
一半的比特在一轮置换中是不变的。

16
00:01:16,135 --> 00:01:20,634
而在这种代换-置换网络中，
所有的比特在每一轮置换中都会变。

17
00:01:20,634 --> 00:01:25,132
这种网络工作如下，
在代换-置换网络中的第一轮，

18
00:01:25,132 --> 00:01:29,516
首先我们要做的是用轮密钥来异或初始状态，

19
00:01:29,516 --> 00:01:34,245
第一轮的情况下是用第一个轮密钥。然后，

20
00:01:34,245 --> 00:01:38,687
我们经过一个代换层，在这个代换层中，
分组数据和代换表中的分组进行替换。

21
00:01:38,687 --> 00:01:43,269
然后我们进入置换层，在这里比特会被置换移位。

22
00:01:43,269 --> 00:01:47,921
然后，我们再来一遍，我们用轮密钥异或，

23
00:01:47,921 --> 00:01:52,285
再经过代换阶段，然后再置换

24
00:01:52,285 --> 00:01:56,892
然后再不厌其烦的进行下去，
直到我们到达最后一轮

25
00:01:56,892 --> 00:02:01,675
并且在用最后一个轮密钥异或以后，就得到输出

26
00:02:01,675 --> 00:02:06,336
现在这个设计最重要的就是它的结构网络中，

27
00:02:06,336 --> 00:02:10,829
每一步都必须是可逆的，才能让整个过程是可逆的。

28
00:02:10,829 --> 00:02:15,544
解密的方式是我们利用输出和
应用网络中的每一步来反向解密。

29
00:02:15,544 --> 00:02:20,203
所以我们先从置换开始，

30
00:02:20,203 --> 00:02:23,809
确保这一步都是可逆的。

31
00:02:23,809 --> 00:02:28,246
然后我们再看下代换层，也必须保证是可逆的。

32
00:02:28,246 --> 00:02:32,684
而且这个DES非常不同。如果你有印象的话，

33
00:02:32,684 --> 00:02:36,716
就应该知道DES中的代换表不是可逆的
因为它从6个比特映射成4个比特。

34
00:02:36,716 --> 00:02:40,604
然而在这里，所有的步骤都必须是可逆的，
否则不可能解密。

35
00:02:40,604 --> 00:02:45,174
当然和轮秘钥异或也要是可逆的才行。明白了没？

36
00:02:45,174 --> 00:02:51,064
反向实现代换-置换网络是很容易的，只要把

37
00:02:51,064 --> 00:02:56,020
所有的步骤反过来做一遍就可以了。
现在我们理解了它的通用结构

38
00:02:56,020 --> 00:03:01,766
让我们来看看AES的一些特征，
AES每个分组有128比特，

39
00:03:01,766 --> 00:03:07,656
也就是16字节。所以我们把
这16字节写成一个4×4的矩阵。

40
00:03:07,656 --> 00:03:12,771
矩阵中每个单元占一个字节。然后我们

41
00:03:12,771 --> 00:03:17,292
从第一轮开始，我们用第一个轮密钥异或，
然后在用一个确定的函数

42
00:03:17,292 --> 00:03:21,437
这个函数包括代换、置换和列混合在里面。

43
00:03:21,437 --> 00:03:26,027
还有一点就是这三个被用到函数都需要是可逆的

44
00:03:26,027 --> 00:03:30,286
密码才能进行解密。然后我们用，

45
00:03:30,286 --> 00:03:34,655
下一个轮密钥来异或，接着再做一次。
再一次使用轮函数

46
00:03:34,655 --> 00:03:38,858
然后再一次进行异或。一直这样进行下去。

47
00:03:38,858 --> 00:03:43,227
我们一共这样做10次。有趣的是，
在最后一轮中，列混合操作没有了。

48
00:03:43,227 --> 00:03:48,691
最后，我们用最后一个轮密钥来异或，
然后就输出了结果。

49
00:03:48,691 --> 00:03:53,644
并且，在这里的每一个数组，
我们总是将它变换成4×4的矩阵。

50
00:03:53,644 --> 00:03:59,140
所以，最终的输出也总是4×4的矩阵，16字节，128比特。

51
00:03:59,140 --> 00:04:04,639
那么，这些长密钥当然本身是来自16字节的AES秘钥。

52
00:04:04,860 --> 00:04:10,831
使用秘钥扩展得来的。所以这些来自
16字节的AES秘钥密钥映射成11个密钥。

53
00:04:10,831 --> 00:04:16,875
成11个密钥，每个秘钥都是16字节。
所以，这些密钥他们和初始状态异或时。

54
00:04:16,875 --> 00:04:21,915
就是4×4的矩阵。这就是AES工作的原理。

55
00:04:21,915 --> 00:04:26,116
现在唯一剩下的就是把这三个函数列出来，

56
00:04:26,116 --> 00:04:30,318
他们就是字节代换、行移位和列混合。
并且很容易将他们解释清楚

57
00:04:30,318 --> 00:04:34,415
那关于它们，我就给你们做一个高层次的描述。

58
00:04:34,415 --> 00:04:39,055
有兴趣的人可以在网上找一些关于它们的细节。

59
00:04:39,055 --> 00:04:45,169
字节代换，字面上来说，
就是一个256字节的代换表(即S-盒)。

60
00:04:45,169 --> 00:04:50,721
本质上，它的功能就是对当前状态的每一个字节应用S盒。

61
00:04:50,721 --> 00:04:56,273
让我来解释一下。初始状态是一个4×4的表，

62
00:04:56,273 --> 00:05:01,826
表中的每一个元素都可以应用S-盒。

63
00:05:01,826 --> 00:05:07,449
我们就叫他表A。然后我们要做的是，

64
00:05:07,449 --> 00:05:12,859
对所有的4X4的项，下一步，A[i,j].

65
00:05:12,859 --> 00:05:19,050
就变成这个查阅表中对应的值。

66
00:05:19,050 --> 00:05:24,904
然后我们用当前的这个单元，
作为一个索引，做一个指针，指向查阅表。

67
00:05:24,904 --> 00:05:30,144
然后这个表的中的值就是输出。好吧，这就是第一步。

68
00:05:30,144 --> 00:05:35,316
接下来就是行移位，它基本上就是一个置换。

69
00:05:35,316 --> 00:05:40,492
让我们把每一行进行一次循环移位。

70
00:05:40,492 --> 00:05:45,157
所以我们就看到第二行被移位了一次。

71
00:05:45,157 --> 00:05:49,556
第三行被移了两个位置，
第四行被位移了三个位置

72
00:05:49,556 --> 00:05:54,064
最后一个就是列混合，字面上来看就是

73
00:05:54,064 --> 00:05:58,626
把每一列进行一次线性变换。这有一个矩阵，

74
00:05:58,626 --> 00:06:02,971
它乘以它中的每一列然后成为下一列。

75
00:06:02,971 --> 00:06:06,990
所以这些线性变换是彼此独立的。

76
00:06:06,990 --> 00:06:12,138
我要指出的是，目前为止，行移位和列混合式
是非常简单就能用代码实现的。

77
00:06:12,138 --> 00:06:17,286
并且字节变换也是很容易计算的，

78
00:06:17,286 --> 00:06:22,370
你甚至用不到256字节就可以写下这些代码

79
00:06:22,370 --> 00:06:27,582
所以你可以缩小AES的描述，
通过代码计算这个表，

80
00:06:27,582 --> 00:06:32,666
而不用把他们硬写进代码里实现。

81
00:06:32,666 --> 00:06:38,231
事实上，这是AES的一个普遍事实吧，

82
00:06:38,231 --> 00:06:43,906
如果你不允许用预计算的话，
包括即时地计算S-盒。

83
00:06:43,906 --> 00:06:48,548
事实上，你得到一个非常小的AES，

84
00:06:48,548 --> 00:06:52,567
它可以适应没有足够空间来储存
非常复杂的代码的局限环境

85
00:06:52,737 --> 00:06:56,925
不过当然，这肯定会非常慢，

86
00:06:56,925 --> 00:07:00,724
因为任何东西都是飞速计算的，所以

87
00:07:00,724 --> 00:07:05,100
显而易见的，它会比那些可以预计算的要慢。

88
00:07:05,100 --> 00:07:09,060
这就是交替使用。例如，
你有大量空间，你可以支持大量的代码，

89
00:07:09,060 --> 00:07:12,821
你可以进行很多的预计算，
关于刚才那三个步骤。

90
00:07:12,821 --> 00:07:16,681
事实上，有多种预计算方法，
你可以构建一个4K字节大的表格

91
00:07:16,681 --> 00:07:20,640
你可以构建一个更长的，可以是24K字节。

92
00:07:20,640 --> 00:07:24,154
所以，你可以在你的应用里使用这些很大的表格。

93
00:07:24,154 --> 00:07:27,866
然后你的实际性能就会非常的好

94
00:07:27,866 --> 00:07:31,776
因为所有你所做的仅仅是查表和异或。

95
00:07:31,776 --> 00:07:35,339
你没有做其他任何复杂的算法。
所以，你可以做很多预计算

96
00:07:35,339 --> 00:07:39,376
我前面说的，字节代换、行移位、列混合

97
00:07:39,376 --> 00:07:43,406
可以只进行一些少量的查表和一些异或。

98
00:07:43,406 --> 00:07:48,073
所有你可以做的计算只需要计算S-盒，

99
00:07:48,073 --> 00:07:53,002
现在你的应用只有256个字节。
硬性编码剩下的部分，

100
00:07:53,002 --> 00:07:57,124
其实是用来运算这三个函数，
最后的结果肯定比

101
00:07:57,124 --> 00:08:01,091
先前的要慢得多，即便是代码可能更少

102
00:08:01,091 --> 00:08:04,955
总的来说代码大小和性能之间有一个很好的平衡点

103
00:08:04,955 --> 00:08:08,870
在高端机器、服务器上，你可以承受大量代码

104
00:08:08,870 --> 00:08:12,992
就可以预先计算，把这些打表存到代码里
以获得最好的性能。

105
00:08:12,992 --> 00:08:17,216
然而，一个低档次的机器，
例如8比特的智能卡或者一个8比特的手表

106
00:08:17,216 --> 00:08:21,390
如果你有一个相当小的AES

107
00:08:21,390 --> 00:08:25,910
结果就是它肯定不会很快。这有一个不常用的例子

108
00:08:25,910 --> 00:08:30,266
假设你想用Javascript来实现AES，
你可以发送一个AES文档给浏览器，

109
00:08:30,266 --> 00:08:34,351
浏览器就可以自己用AES

110
00:08:34,351 --> 00:08:38,871
所以，在那种情况下，你可能会缩小代码尺寸，

111
00:08:38,871 --> 00:08:43,445
在发送文档给浏览器的时候，
好让网络有一个最小的传输。


112
00:08:43,445 --> 00:08:47,751
但是同时，你想让浏览器效率尽可能的快，

113
00:08:47,751 --> 00:08:52,347
所以有个办法我们以前就做过，就是

114
00:08:52,347 --> 00:08:56,888
代码发送给浏览器时不做任何预计算的表，

115
00:08:56,888 --> 00:09:01,263
结果就是一个非常小的代码，
但当它到达浏览器时，

116
00:09:01,263 --> 00:09:05,471
浏览器将要做的是预计算这些表。

117
00:09:05,471 --> 00:09:09,651
所以，某种意义上说，代码将会小而简洁。

118
00:09:09,651 --> 00:09:13,626
但在遇到预计算表时就会膨胀。
这些都是储存在笔记本上的，

119
00:09:13,626 --> 00:09:17,404
并且有大量的内存。然后一旦你拥有了预计算表，
你就可以用他们来加密了。

120
00:09:17,404 --> 00:09:21,232
就是这样，你就可以拥有了最好的性能。

121
00:09:21,232 --> 00:09:24,913
所以，如果你使用网络来实现AES，
你可能就是世界上最快的。

122
00:09:24,913 --> 00:09:28,740
无论怎样，代码通过网络时候是很小的，
不过当它到达目标客户端时，

123
00:09:28,740 --> 00:09:32,985
它可以让它自己膨胀起来，
并且在客户端处理加密的时候

124
00:09:32,985 --> 00:09:37,832
变得高效。现在AES是一套非常流行的分组密码，

125
00:09:37,832 --> 00:09:42,986
现在，当你需要对产品加密时，你很有可能想到使用AES，

126
00:09:42,986 --> 00:09:48,078
并且Intel可以让处理器支持AES。

127
00:09:48,078 --> 00:09:52,679
Westmere,自从这款特殊指令的Intel处理器问世，加快了AES的速度。

128
00:09:52,679 --> 00:09:57,771
并且我在这里列出这些产品。
他们有两部分，aesenc和aesenclast,

129
00:09:57,771 --> 00:10:02,955
以及aesekygenassist。那么，
让我来解释下他们是做什么的。

130
00:10:02,955 --> 00:10:07,992
aesenc实质上执行了一轮AES加密

131
00:10:07,992 --> 00:10:13,005
也就是那三个函数和轮密钥异或的那部分。

132
00:10:13,005 --> 00:10:17,480
aesenclast实际上执行了AES的最后一轮。
记住，最后一轮中

133
00:10:17,480 --> 00:10:22,262
是没有列混合的，只有字节代换和行移位。

134
00:10:22,262 --> 00:10:27,167
这就是为什么aesenclast这么做。并且

135
00:10:27,167 --> 00:10:32,255
你使用128字节的寄存器正好和AES的状态一致。

136
00:10:32,255 --> 00:10:37,241
所以，你会用一个寄存器来存放状态，
用一个寄存器来存放轮密钥。

137
00:10:37,241 --> 00:10:42,383
然后，当你访问这两个寄存器上的AES时，
它们将运行AES的一轮。

138
00:10:42,383 --> 00:10:47,589
并且把结果放在一个XMM的寄存器中。并且

139
00:10:47,589 --> 00:10:52,731
如果你想要实现整个AES，
你要做的就是调用aesenc 9次。

140
00:10:52,731 --> 00:10:58,064
然后你再调用aesenclast一次。
这10个指令，基本上就是整个的AES应用

141
00:10:58,064 --> 00:11:03,029
这就是为什么AES在硬件上很容易实现的原因，

142
00:11:03,029 --> 00:11:07,164
并且声称这些运算都只在处理器内部完成

143
00:11:07,164 --> 00:11:11,246
并不使用外部指令。还声称

144
00:11:11,246 --> 00:11:15,540
它们可以得到一个14倍的X加速，说在以

145
00:11:15,540 --> 00:11:19,888
同样硬件运行的AES应用没有特殊的指令。

146
00:11:19,888 --> 00:11:24,182
所以，这是一个标志性的加速，并且现在已经有由特殊指令

147
00:11:24,182 --> 00:11:28,160
构成的产品大量应用了。然后，
让我们来说下，这并不是Intel的一个特例。

148
00:11:28,160 --> 00:11:31,819
假如你使用的是AMD，
那么在他们的bulldozer结构里也用相似

149
00:11:31,819 --> 00:11:36,009
的指令来实现，在他们的产品或未来的产品中。

150
00:11:36,009 --> 00:11:40,146
好吧，下面让我们来讨论下AES的安全性。

151
00:11:40,146 --> 00:11:44,442
这里我想说两种攻击。显而易见，AES被研究很多了。

152
00:11:44,442 --> 00:11:48,579
不过只有两个攻击在全部AES上，
就是接下来要讲的。

153
00:11:48,579 --> 00:11:52,504
首先，假如你想要做密钥恢复，最好的攻击，

154
00:11:52,504 --> 00:11:56,923
只比穷举搜索快四倍。这就意味着

155
00:11:56,923 --> 00:12:02,665
相当于你只用考虑126比特的AES密钥而不是128比特的。

156
00:12:02,665 --> 00:12:07,641
事实上，它确实是穷举搜索的4倍快，
当然由于是126比特，

157
00:12:07,641 --> 00:12:12,546
依然超过了我们的计算范围，
并且这没有破坏AES的安全性。

158
00:12:12,546 --> 00:12:17,490
更有影响力的破解办法是，AES-256.

159
00:12:17,490 --> 00:12:22,662
他利用了扩展密钥的一个弱点

160
00:12:22,662 --> 00:12:27,641
叫做相关密钥攻击。什么是相关密钥攻击？

161
00:12:27,641 --> 00:12:32,684
假如你给我2的100次方个AES输入输出对，
而且来自4个相关密钥，

162
00:12:32,684 --> 00:12:37,680
这些密钥关系比较紧密，换句话说，

163
00:12:37,680 --> 00:12:42,272
K1只经过一个比特的反转成为K2，
K2也只经过一次反转就成为K3，

164
00:12:42,272 --> 00:12:47,157
再反转成为K4.这些密钥关系非常紧密，

165
00:12:47,157 --> 00:12:51,925
如果你想要你的密钥间距离很短的话。
但是如果你那样做的话。

166
00:12:51,925 --> 00:12:56,752
事实上，有2的100次方次攻击。
你可能会说2的100次方是不切实际的。

167
00:12:56,752 --> 00:13:01,117
然而这仍超出我们现在的计算能力。

168
00:13:01,117 --> 00:13:05,198
然而，它已经比穷举搜索好太多了，
它比2的256次方好太多了，

169
00:13:05,198 --> 00:13:09,386
这是密码的一个限制。但是一般来说

170
00:13:09,386 --> 00:13:13,521
这不是一个很有效的限制，因为它需要相关密钥。

171
00:13:13,521 --> 00:13:17,924
所以，实际上，你应该随机选择你的密钥，
让你的密钥在系统中

172
00:13:17,924 --> 00:13:22,166
没有相关性。结果就会是这个攻击不奏效。

173
00:13:22,166 --> 00:13:26,200
但是如果你选择的相关密钥，就会出现问题。

174
00:13:26,200 --> 00:13:30,130
那么，这一小节就要结束了，在下一节中，

175
00:13:30,130 --> 00:13:31,702
我们将要讨论一些在结构上可证明安全的分组密码。【END】

176
00:13:30,130 --> 00:13:31,702
constructions for block ciphers.

