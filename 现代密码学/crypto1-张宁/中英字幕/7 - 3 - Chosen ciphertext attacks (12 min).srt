1
00:00:00,000 --> 00:00:03,460
In the last segment we defined
authenticated encryption, but I didn't

2
00:00:00,000 --> 00:00:03,460
在上一节我们定义了认证加密 但是我并没有

3
00:00:03,460 --> 00:00:06,517
really show you why authenticated
encryption is the right notion of

4
00:00:03,460 --> 00:00:06,517
向你们展示为什么认证加密是一种安全概念

5
00:00:06,517 --> 00:00:09,818
security. In this segment I want to show
you that authenticated encryption in fact

6
00:00:06,517 --> 00:00:09,818
在这一节中 我想向你们展示 认证加密事实上

7
00:00:09,818 --> 00:00:14,431
is a very natural notion of security and
I'll do it by showing you that it defends

8
00:00:09,818 --> 00:00:14,431
是一种很自然的安全概念 我将通过展示它如何抵抗

9
00:00:14,431 --> 00:00:19,358
against a very powerful attack called a
chosen cipher text attack. So in fact we

10
00:00:14,431 --> 00:00:19,358
强大的选择密文攻击来说明这一点 事实上我们

11
00:00:19,358 --> 00:00:23,320
already saw a number of examples of a
chosen cipher text attack so imagine the

12
00:00:19,358 --> 00:00:23,320
已经看到一些选择密文攻击的例子了 想象

13
00:00:23,320 --> 00:00:27,552
adversary has some cipher text C that
it wants to decrypt. And what it can do

14
00:00:23,320 --> 00:00:27,552
敌手想破解某些密文C 他能做到的是

15
00:00:27,552 --> 00:00:31,921
is, for example, fool the decryption
server into decrypting some cipher text

16
00:00:27,552 --> 00:00:31,921
比如 欺骗解密服务器来破解某些

17
00:00:31,923 --> 00:00:36,707
but not actually the cipher text c. So we
already saw some examples of that. If you

18
00:00:31,923 --> 00:00:36,707
不是密文c的密文 我们已经看到过一些这样的例子

19
00:00:36,707 --> 00:00:41,551
remember in the first segment, we looked
at an adversary that can submit arbitrary

20
00:00:36,707 --> 00:00:41,551
如果你还记得 在第一节中 我们看到过能够提交任意

21
00:00:41,551 --> 00:00:46,394
cipher text, and if the plaintext happened
to start with destination equals 25, then

22
00:00:41,551 --> 00:00:46,394
密文的敌手  而且如果明文正好以目的端口25开头 那么

23
00:00:46,394 --> 00:00:50,664
the adversary is actually given the
plaintext in the clear. So that's an

24
00:00:46,394 --> 00:00:50,664
敌手事实上就能清楚地获得这一明文

25
00:00:50,664 --> 00:00:55,672
example of an adversary that can obtain
the decryption of certain cipher texts but

26
00:00:50,664 --> 00:00:55,672
这就是一个敌手可以获得特定密文解密结果的例子

27
00:00:55,672 --> 00:00:59,966
not all cipher texts. Another example we
saw is an adversary that can learn

28
00:00:55,672 --> 00:00:59,966
但他不能获得全部密文 我们看到的另一个例子是 敌手能够

29
00:00:59,966 --> 00:01:04,058
something about the plaintext by
submitting cipher texts to the decrypter.

30
00:00:59,966 --> 00:01:04,058
通过向解密者提交密文来获得有关明文的信息

31
00:01:04,058 --> 00:01:08,374
So we have this example where the
adversary submits encrypted TCP/IP packets

32
00:01:04,058 --> 00:01:08,374
所以我们有这样的例子 敌手提交加密的TCP/IP数据包

33
00:01:08,374 --> 00:01:12,623
to the decryption server, and if the
decryption server sends back an ACK, the

34
00:01:08,374 --> 00:01:12,623
给解密服务器 如果解密服务器发回了一个ACK

35
00:01:12,623 --> 00:01:17,053
adversary learns that the decrypted plain
text had a valid check sum. And otherwise,

36
00:01:12,623 --> 00:01:17,053
敌手就会知道这个解密明文的校验和有效 否则

37
00:01:17,053 --> 00:01:21,057
the decrypted plain text didn't have a
valid check sum. So this is, again, an

38
00:01:17,053 --> 00:01:21,057
解密明文的校验和无效 这又是一个

39
00:01:21,057 --> 00:01:25,220
example of a chosen cipher text attack,
where the attacker submits cipher text,

40
00:01:21,057 --> 00:01:25,220
选择密文攻击的例子 在这个例子中 攻击者提交密文

41
00:01:25,220 --> 00:01:29,680
and learns something about the decryption
of that cipher text. So to address this

42
00:01:25,220 --> 00:01:29,680
然后就能获得那个密文解密后的相关信息 为了解决

43
00:01:29,680 --> 00:01:34,457
type of threats, we're gonna define a very
general notion of security, called chosen

44
00:01:29,680 --> 00:01:34,457
这种威胁 我们将要定义一个非常广义的安全上的概念 叫做选择密文安全

45
00:01:34,457 --> 00:01:39,060
cipher text security. So here, we're gonna
give the adversary a lot of power, okay?

46
00:01:34,457 --> 00:01:39,060
在这我们让攻击者有强大的能力

47
00:01:39,060 --> 00:01:43,376
So he can do both chosen plain text
attack, and a chosen cipher text attack.

48
00:01:39,060 --> 00:01:43,376
他既可以进行选择明文攻击也可以进行选择密文攻击

49
00:01:43,376 --> 00:01:47,577
In other words, he can obtain the
encryption of arbitrary messages of his

50
00:01:43,376 --> 00:01:47,577
换句话说 他可以获得他选择的任何信息的加密结果

51
00:01:47,577 --> 00:01:52,648
choice. And he can decrypt any cipher text
of his choice, other than some challenge

52
00:01:47,577 --> 00:01:52,648
他也可以解密任何他选择的密文 而不是挑战密文

53
00:01:52,648 --> 00:01:57,501
cipher texts. And as I showed you before,
this is actually a fairly conservative

54
00:01:52,648 --> 00:01:57,501
正如我之前向你们展示的一样 这其实是一个很保守的

55
00:01:57,501 --> 00:02:01,862
modeling of real life. In real life,
often, the attacker can fool the, the

56
00:01:57,501 --> 00:02:01,862
现实情况的模型 在真实世界中 经常地 攻击者可以欺骗

57
00:02:01,862 --> 00:02:06,961
decrypter, into decrypting certain cipher
texts for the attacker, but not all cipher

58
00:02:01,862 --> 00:02:06,961
解密者 使其为攻击者解密特定密文 但不能解密全部密文

59
00:02:06,961 --> 00:02:10,986
texts. So the model here is that the
attacker has a certain cipher text that it

60
00:02:06,961 --> 00:02:10,986
所以在这种情况下 攻击者有其想解密的特定密文

61
00:02:10,986 --> 00:02:14,992
wants to decrypt. It can interact with
the decrypter by issuing these chosen

62
00:02:10,986 --> 00:02:14,992
他可以通过将所选密文的询问发送给解密者的方式

63
00:02:14,992 --> 00:02:18,749
cipher text queries to the decrypter.
Namely, to decrypt various cipher text

64
00:02:14,992 --> 00:02:18,749
与解密者互动  也就是说 解密各种密文

65
00:02:18,749 --> 00:02:22,706
other than the challenge cipher text. And
then the adversary's goal is to break

66
00:02:18,749 --> 00:02:22,706
而不是挑战密文 然后攻击者的目标就是破坏

67
00:02:22,706 --> 00:02:27,149
semantic security of the challenge cipher
text. So you notice that we're giving the

68
00:02:22,706 --> 00:02:27,149
挑战密文的语义安全 你会注意到我们赋予敌手

69
00:02:27,149 --> 00:02:31,164
adversary a lot of power. And all we're
asking you to do is break semantic

70
00:02:27,149 --> 00:02:31,164
强大的能力 现在我们让你做的就是破坏语义安全

71
00:02:31,164 --> 00:02:35,036
security. So it's going to be fairly
difficult to design systems that are

72
00:02:31,164 --> 00:02:35,036
所以设计能够对抗这种攻击者的系统

73
00:02:35,036 --> 00:02:38,663
secure against such adversaries.
Nevertheless, we're going to do it. So

74
00:02:35,036 --> 00:02:38,663
将会变得非常困难 虽然如此 我们还是要设计出它来

75
00:02:38,663 --> 00:02:42,828
let's define the chosen cipher text
security model more precisely. So, as

76
00:02:38,663 --> 00:02:42,828
让我们更精确的定义下选择密文安全模型

77
00:02:42,828 --> 00:02:47,224
usual, we have a cipher (E, D). And we're
gonna define two experiments, experiment

78
00:02:42,828 --> 00:02:47,224
通常 我们有密码(E, D)  然后我们将要定义两个实验

79
00:02:47,224 --> 00:02:51,447
zero and experiment one. So this should
look somewhat familiar by now. The

80
00:02:47,224 --> 00:02:51,447
实验0和实验1 现在大家对这个应该挺熟悉了

81
00:02:51,447 --> 00:02:56,017
challenger is gonna start off by choosing
a random key. And now the adversary is

82
00:02:51,447 --> 00:02:56,017
挑战者开始时选择一个随机密钥 现在敌手将

83
00:02:56,017 --> 00:03:00,587
gonna submit queries to this challenger.
Every query can be one of two types. It

84
00:02:56,017 --> 00:03:00,587
提交询问给挑战者 每个询问可以是两种类型之一

85
00:03:00,587 --> 00:03:05,123
can be a chosen plain text query, or it
can be a chosen cipher text query. So a

86
00:03:00,587 --> 00:03:05,123
选择明文询问 或者选择密文询问

87
00:03:05,123 --> 00:03:09,851
chosen plain text query, as we already
know. Basically, the adversary submits two

88
00:03:05,123 --> 00:03:09,851
我们知道 在一个选择明文询问中 敌手提交两个消息

89
00:03:09,851 --> 00:03:14,724
messages, M zero and M1. They have to be
the same length. And the adversary

90
00:03:09,851 --> 00:03:14,724
M0和M1 它们必须长度一样

91
00:03:14,724 --> 00:03:19,870
receives the encryption of either M zero
if we're in experiment zero, or M1, if we're

92
00:03:14,724 --> 00:03:19,870
如果是在实验0中 敌手会收到M0的加密 如果是在实验1中

93
00:03:19,870 --> 00:03:23,991
in experiment one. So he receives the
encryption of the left or the right

94
00:03:19,870 --> 00:03:23,991
则会收到M1 所以他收到的是左边或者右边

95
00:03:23,991 --> 00:03:27,845
depending on whether we were in experiment
zero or in experiment one. The second type

96
00:03:23,991 --> 00:03:27,845
取决于我们是在实验0中还是实验1中 第二种类型

97
00:03:27,845 --> 00:03:32,323
of query is the more interesting one. This
is where the adversary submits an arbitrary

98
00:03:27,845 --> 00:03:32,323
的询问更有趣 敌手提交他选择的任意密文

99
00:03:32,323 --> 00:03:37,026
cipher text of his choice and what he gets
back is the decryption of that cipher

100
00:03:32,323 --> 00:03:37,026
然后得到那个密文的解密

101
00:03:37,026 --> 00:03:41,994
text. So you notice the adverary's allowed
to decrypt arbitrary cipher texts of his

102
00:03:37,026 --> 00:03:41,994
你会注意到敌手被允许解密他选择的任意密文

103
00:03:41,994 --> 00:03:47,237
choice. The only restriction is that the
cipher text is not one of the cipher texts

104
00:03:41,994 --> 00:03:47,237
唯一的限制是 他所选的密文不是

105
00:03:47,237 --> 00:03:52,318
that were obtained as a result of a CPA
query. And of course this wouldn't be fair

106
00:03:47,237 --> 00:03:52,318
在CPA攻击的询问中获得的密文之一 当然这在其他情况下不合理

107
00:03:52,318 --> 00:03:57,338
otherwise, because the attacker can simply
take one cipher text that was obtained

108
00:03:52,318 --> 00:03:57,338
另外 因为攻击者可以轻松获得

109
00:03:57,338 --> 00:04:01,538
from a CPA query. That's gonna to be
either the encryption of M0 or the

110
00:03:57,338 --> 00:04:01,538
通过CPA询问得到的密文 那会是M0或者M1的加密结果

111
00:04:01,538 --> 00:04:06,604
encryption of M1. If he could submit a CCA
query for that particular cipher text, he

112
00:04:01,538 --> 00:04:06,604
如果他对那个特定的密文提交CCA询问

113
00:04:06,604 --> 00:04:12,024
will in response either obtain M0 or M1,
and then he'll know whether he is in experiment

114
00:04:06,604 --> 00:04:12,024
他将会获得M0或者M1作为回复 然后他就会知道他是在实验0

115
00:04:12,024 --> 00:04:17,003
zero or experiment one. So this wouldn't
be fair. So we say that the CPA cipher

116
00:04:12,024 --> 00:04:17,003
还是实验1中了 这不合理 所以我们说他收到的

117
00:04:17,003 --> 00:04:21,656
texts that he received are the challenge
cipher texts. And he's allowed to decrypt

118
00:04:17,003 --> 00:04:21,656
CPA密文是挑战密文 而且他被允许解密

119
00:04:21,656 --> 00:04:26,460
any cipher texts of his choice, other than
these challenge cipher texts. And as

120
00:04:21,656 --> 00:04:26,460
他所选的任何密文 除了这些挑战密文

121
00:04:26,460 --> 00:04:30,815
usual, his goal is to determine whether
he's in experiment zero, or in experiment

122
00:04:26,460 --> 00:04:30,815
通常 他的目标是确定他是在实验0还是实验1中

123
00:04:30,815 --> 00:04:35,376
one. So I'm gonna emphasize again, that
this is an extremely powerful adversary.

124
00:04:30,815 --> 00:04:35,376
所以我再强调一遍 这是个极其强大的敌手

125
00:04:35,376 --> 00:04:39,878
One that can decrypt any cipher text of
his choice, other than the challenge

126
00:04:35,376 --> 00:04:39,878
他能解密任何密文 除了挑战密文

127
00:04:39,878 --> 00:04:44,029
cipher text. And still, he can't
distinguish whether he is in experiment

128
00:04:39,878 --> 00:04:44,029
但是依然不能分清他是处在实验0中

129
00:04:44,029 --> 00:04:48,806
zero, or in experiment one. So, as usual,
we say that the cipher is CCA secure,

130
00:04:44,029 --> 00:04:48,806
还是实验1中 所以通常我们说一个密码CCA安全

131
00:04:48,806 --> 00:04:52,757
chosen cipher text secure, if the
adversary behaves the same in experiment

132
00:04:48,806 --> 00:04:52,757
也就是选择密文安全 是指敌手在实验0和

133
00:04:52,757 --> 00:04:57,621
zero as it does in experiment one. Namely, it
cannot distinguish the two experiments. So

134
00:04:52,757 --> 00:04:57,621
实验1中行为一致 也就是说他无法区分这两个实验

135
00:04:57,621 --> 00:05:02,075
let's start with a simple example, and
show that, in fact, CBC with a random IV,

136
00:04:57,621 --> 00:05:02,075
让我们以一个简单的例子开始 证明事实上带随机IV的CBC

137
00:05:02,075 --> 00:05:06,763
is not CCA secure, is not secure against
chosen cipher text attacks. So let's see

138
00:05:02,075 --> 00:05:06,763
不是CCA安全的 不是对选择密文攻击安全的 让我们看看

139
00:05:06,763 --> 00:05:10,173
why that's the case. So what the
adversary's gonna start by doing, he's

140
00:05:06,763 --> 00:05:10,173
为什么是这种情况 敌手刚开始要做的是

141
00:05:10,173 --> 00:05:15,553
gonna simply submit two distinct messages,
M0 and M1. And let's just pretend that

142
00:05:10,173 --> 00:05:15,553
提交两个不同的消息M0和M1 让我们假定

143
00:05:15,553 --> 00:05:20,055
these messages are one block messages. And
what he's gonna get back is the CBC

144
00:05:15,553 --> 00:05:20,055
这两个消息都是单个分组的 然后他会得到

145
00:05:20,055 --> 00:05:24,846
encryption of either M0 or
M1. You notice the cipher text only has

146
00:05:20,055 --> 00:05:24,846
M0或者M1的CBC加密结果 你会注意密文仅有一个分组

147
00:05:24,846 --> 00:05:29,348
one block, because the plain texts were
only one block long. Now what is the

148
00:05:24,846 --> 00:05:29,348
因为明文仅有一个分组的长度 现在

149
00:05:29,348 --> 00:05:34,685
attacker gonna do? Well, he's gonna modify
this cipher text C that he was given into

150
00:05:29,348 --> 00:05:34,685
攻击者将要做什么？他会修改他得到的密文C

151
00:05:34,685 --> 00:05:39,958
C prime simply by changing the IV. Okay?
So he just takes the IV and XORs it with

152
00:05:34,685 --> 00:05:39,958
为C'仅通过变化IV域 他将IV与1异或

153
00:05:39,958 --> 00:05:44,910
one. That's it. This gives a new cipher
text, C prime, which is different from C

154
00:05:39,958 --> 00:05:44,910
就是这样 这就得到了一个与C不同的新密文C'

155
00:05:44,910 --> 00:05:49,989
and as a result it's perfectly valid for
the adversary to submit C prime as its

156
00:05:44,910 --> 00:05:49,989
因此攻击者完全可以提交C'作为他的

157
00:05:49,989 --> 00:05:55,134
chosen cipher text query. So he
asks the challenger please decrypt this C

158
00:05:49,989 --> 00:05:55,134
选择密文询问 所以他请求挑战者为他解密这个C'

159
00:05:55,134 --> 00:05:59,727
prime for me. The challenger, because c
prime is not equal to c, must decrypt c

160
00:05:55,134 --> 00:05:59,727
因为C'不等于C 所以挑战者必须解密C'

161
00:05:59,727 --> 00:06:04,307
prime. And now let's see, what happens
when he decrypts c prime? Well, what's the

162
00:05:59,727 --> 00:06:04,307
现在让我们看看 当他解密C'的时候发生了什么？

163
00:06:04,307 --> 00:06:09,497
decryption of c prime, let me ask you. So
you probably remember from the first

164
00:06:04,307 --> 00:06:09,497
让我来问你 C’的解密结果是什么 你可能记得在第一部分中

165
00:06:09,497 --> 00:06:14,657
segment that if we xor the IV by one, that
simply xors the plaintext by one. So now

166
00:06:09,497 --> 00:06:14,657
如果我们将IV与1异或 这只是简单地将明文与1异或

167
00:06:14,657 --> 00:06:20,997
that adversary received M0 xor one, or M1
xor one, and now he can perfectly tell

168
00:06:14,657 --> 00:06:20,997
既然敌手收到了M0与1的异或 或是M1与1的异或 他完全可以知道

169
00:06:20,997 --> 00:06:25,435
whether he's in experiment zero and, or in
experiment one. So the advantage of this

170
00:06:20,997 --> 00:06:25,435
自己是在实验0还是实验1中 所以这个敌手的的胜率

171
00:06:25,435 --> 00:06:30,075
adversary is basically one, because he can
very easily tell which experiment he's in.

172
00:06:25,435 --> 00:06:30,075
基本上是1了 因为他可以很简单地知道他在哪个实验中

173
00:06:30,075 --> 00:06:34,922
And as a result he can win the chosen
cipher text security game. So if you think

174
00:06:30,075 --> 00:06:34,922
而作为结果他可以赢得这个选择密文安全游戏 所以如果你

175
00:06:34,922 --> 00:06:39,337
about it for a second, you'll see that
this attack game exactly captured the first

176
00:06:34,922 --> 00:06:39,337
稍微考虑一下 你会发现这种攻击游戏完全抓住了

177
00:06:39,337 --> 00:06:43,696
active attack that we saw, where the
adversary slightly changed the cipher text

178
00:06:39,337 --> 00:06:43,696
我们看到的第一个主动攻击的主要内容 在那里对手稍微改变了

179
00:06:43,696 --> 00:06:47,614
that he was given. And then he got the
decrypter to decrypt it for him. And

180
00:06:43,696 --> 00:06:47,614
他所得到的密文 然后他得以让解密者为他解密

181
00:06:47,614 --> 00:06:51,918
therefore, he was able to eavesdrop on
messages that were not intended for the

182
00:06:47,614 --> 00:06:51,918
因而 他能够窃听那些原本不向他公开的消息

183
00:06:51,918 --> 00:06:56,479
adversary. So I wanna emphasize again that
this chosen cipher text game really does

184
00:06:51,918 --> 00:06:56,479
所以我想再次强调 这个选择密文游戏真的

185
00:06:56,479 --> 00:07:00,863
come up in real life, where the adversary
can submit cipher texts to the decrypter

186
00:06:56,479 --> 00:07:00,863
会在现实中发生 敌手可以向解密者提交密文

187
00:07:00,863 --> 00:07:05,193
and the decrypter can reveal information
about the plain text, or it can give the

188
00:07:00,863 --> 00:07:05,193
然后解码者会披露有关明文的信息 或者他可以

189
00:07:05,193 --> 00:07:09,465
plain text outright to the adversary for
certain cipher texts but not others. So

190
00:07:05,193 --> 00:07:09,465
将那段密文的明文彻底地泄露给敌手 所以

191
00:07:09,465 --> 00:07:13,571
this is a very natural notion of security,
and the question is, how do we design

192
00:07:09,465 --> 00:07:13,571
这是一个非常基本的安全概念 然而问题是 我们如何设计

193
00:07:13,571 --> 00:07:17,795
crypto-systems that are CCA secure? So I
claim that this authenticated encryption

194
00:07:13,571 --> 00:07:17,795
一个CCA安全的密码体系？ 所以我认为这个我们之前定义的

195
00:07:17,795 --> 00:07:21,875
notion that we defined before actually
implies chosen cipher text security, and

196
00:07:17,795 --> 00:07:21,875
认证加密的概念实际上意味着选择密文安全性

197
00:07:21,875 --> 00:07:25,887
this is why authenticated encryption is
such a natural concept. Okay? So the

198
00:07:21,875 --> 00:07:25,887
这就是为什么认证加密是一种基本概念

199
00:07:25,887 --> 00:07:30,733
theorem basically says, well, if you give
me a cipher that provides authenticated

200
00:07:25,887 --> 00:07:30,733
这个理论基本上说的是 如果你给我提供了经过认证加密的密码

201
00:07:30,733 --> 00:07:35,041
encryption, the cipher can withstand
chosen cipher text attacks. And more

202
00:07:30,733 --> 00:07:35,041
这个密码就可以抵御选择密文攻击

203
00:07:35,041 --> 00:07:39,767
precisely, the theorem says the following.
If we have an adversary that issues Q

204
00:07:35,041 --> 00:07:39,767
更精确地说 这个理论的内容是 如果我们有个敌手正在做Q个询问

205
00:07:39,778 --> 00:07:44,374
queries, in other words, at most, q CPA
queries and q chosen cipher text queries,

206
00:07:39,778 --> 00:07:44,374
换句话说 最多的情况下 q个CPA询问和q个选择密文询问

207
00:07:44,374 --> 00:07:49,160
then there are two efficient adversaries,
B1 and B2, that satisfy this inequality

208
00:07:44,374 --> 00:07:49,160
这里有两个有实力的敌手 B1和B2 他们满足这个不等式

209
00:07:49,160 --> 00:07:53,328
here. So since the scheme has
authenticated encryption, we know that

210
00:07:49,160 --> 00:07:53,328
所以由于该组合存在认证加密 我们知道

211
00:07:53,328 --> 00:07:58,052
this quantity is negligible because it's
CPA secure. And we know that this

212
00:07:53,328 --> 00:07:58,052
这个量可以忽略不计 因为它是CPA安全的 然后我们也能知道

213
00:07:58,052 --> 00:08:02,072
quantity is negligible because the
encryption scheme has cipher text

214
00:07:58,052 --> 00:08:02,072
这个量可以忽略不计 因为加密方案具有密文

215
00:08:02,072 --> 00:08:06,210
integrity. And as a result, since both
terms are negligible we know that

216
00:08:02,072 --> 00:08:06,210
完整性 作为结果来说 由于二者皆可以忽略 我们可以得知

217
00:08:06,210 --> 00:08:10,857
adversary's advantage in winning the CCA
game is also negligible. So let's prove

218
00:08:06,210 --> 00:08:10,857
敌手在这个CCA游戏中的胜率也可以忽略不计了 我们来证明

219
00:08:10,857 --> 00:08:14,947
this theorem. It's actually a very simple
theorem to prove. And so let's just do it

220
00:08:10,857 --> 00:08:14,947
这个定理 这事实上是个很容易证明的定理 所以我们可以仅仅

221
00:08:14,947 --> 00:08:20,581
as proof by pictures. Okay, so here we
have two copies of the CCA game, so this

222
00:08:14,947 --> 00:08:20,581
通过画图来证明 我们这里有两个这个CCA游戏的副本

223
00:08:20,581 --> 00:08:25,190
would be experiment zero. And the bottom
one is experiment one. You can see the

224
00:08:20,581 --> 00:08:25,190
这就是实验0 然后底下这个是实验1 你可以看到

225
00:08:25,190 --> 00:08:29,783
adversary's issuing CPA queries, and he's
issuing CCA queries, and at the end he

226
00:08:25,190 --> 00:08:29,783
敌手正在进行CPA询问 还有CCA询问 然后在最后他

227
00:08:29,783 --> 00:08:34,954
outputs, you know, a certain guess b,
let's call it b prime, and our goal is to

228
00:08:29,783 --> 00:08:34,954
输出了一个确认的猜想b 这里我们叫它b' 我们的目标是

229
00:08:34,954 --> 00:08:38,926
show that this b prime is
indistinguishable in both cases. In other

230
00:08:34,954 --> 00:08:38,926
证明这个b'在两种情况下是不能被区分的 换句话说

231
00:08:38,926 --> 00:08:43,247
words, probability that b prime is equal
to one in the top game is the same as the

232
00:08:38,926 --> 00:08:43,247
b'在上面的游戏中等于1的概率和

233
00:08:43,247 --> 00:08:47,586
probability that b prime is equal to one
in the bottom game. Okay, so the way we're

234
00:08:43,247 --> 00:08:47,586
b'在底下的游戏中等于1的概率相等 所以我们

235
00:08:47,586 --> 00:08:50,903
gonna do it is the following. Well, first
of all, we're gonna change the challenger

236
00:08:47,586 --> 00:08:50,903
接下来这样做 首先 我们将对挑战者

237
00:08:50,903 --> 00:08:55,761
a little bit, so that instead of actually
outputting the decryption of CCA queries,

238
00:08:50,903 --> 00:08:55,761
做一些改变 使得 挑战者将总是输出底下的部分

239
00:08:55,761 --> 00:09:01,128
the challenger is just gonna always output
bottom. So every time the adversary

240
00:08:55,761 --> 00:09:01,128
而不是输出被解密的CCA询问 所以每次敌手

241
00:09:01,128 --> 00:09:05,652
submits a CCA query, the challenger says
bottom. And I claim that these two

242
00:09:01,128 --> 00:09:05,652
提交一个CCA询问 敌手回复底部 而且我认为这两个

243
00:09:05,652 --> 00:09:08,773
games are, in fact, indistinguishable. In
other words, the adversary can't

244
00:09:05,652 --> 00:09:08,773
游戏 事实上 是不可区分的 换句话说 敌手不能

245
00:09:08,773 --> 00:09:13,650
distinguish these two games, for the
simple reason that, because the scheme has

246
00:09:08,773 --> 00:09:13,650
区分出这两个游戏 原因很简单 因为这个组合存在

247
00:09:13,650 --> 00:09:17,722
cipher text integrity, the adversary
simply cannot create a cipher text that's

248
00:09:13,650 --> 00:09:17,722
密文完整性 敌手就是不能写出一份不包含在

249
00:09:17,722 --> 00:09:24,197
not in C1 to CI-1 that decrypts to
anything other than bottom. That is the

250
00:09:17,722 --> 00:09:24,197
C1到CI-1的密文 其解密后不是底下的内容 这就是

251
00:09:24,197 --> 00:09:28,777
definition of cipher text integrity. And
as a result, again, because of cipher text

252
00:09:24,197 --> 00:09:28,777
密文完整性的定义 结果又因为密文

253
00:09:28,777 --> 00:09:33,019
integrity, it must be the case that every
chosen cipher text query that the

254
00:09:28,777 --> 00:09:33,019
完整性 敌手进行的每个选择密文询问必然

255
00:09:33,019 --> 00:09:37,430
adversary issues results in bottom. If the
adversary, in fact, could distinguish

256
00:09:33,019 --> 00:09:37,430
只能获得底部的信息 如果敌手 事实上 可以区分

257
00:09:37,430 --> 00:09:41,898
between the left game and the right game,
that would mean that at some point he

258
00:09:37,430 --> 00:09:41,898
左边的游戏和右边的游戏 这意味着在某一时刻他

259
00:09:41,898 --> 00:09:46,592
issued a query that decrypted to something
other than bottom. And that we could use

260
00:09:41,898 --> 00:09:46,592
发出的询问解密出了不是底部的信息 然后我们可以用

261
00:09:46,592 --> 00:09:50,795
to then break cipher text integrity of the
scheme. And since the scheme has

262
00:09:46,592 --> 00:09:50,795
它来破坏这个组合的密文完整性 而且因为这个组合具有

263
00:09:50,795 --> 00:09:54,977
cipher-text integrity, these left and
right games are indistinguishable. Okay,

264
00:09:50,795 --> 00:09:54,977
密文完整性 这左边和右边的游戏就是不可区分的

265
00:09:54,977 --> 00:09:59,324
so that's kind of a cute argument that
shows that it's very easy to respond to

266
00:09:54,977 --> 00:09:59,324
这是种很聪明的论证 它证明如果你具有密文完整性

267
00:09:59,324 --> 00:10:03,836
chosen cipher-text queries when you have
cipher-text integrity. And the same thing

268
00:09:59,324 --> 00:10:03,836
你可以很容易地回复选择密文询问 然后同样的事情

269
00:10:03,836 --> 00:10:07,673
exactly applies on the bottom, where we
can simply replace the chosen cipher-text

270
00:10:03,836 --> 00:10:07,673
也适用于底部 在这里我们可以简单地将选择密文

271
00:10:07,673 --> 00:10:12,623
responses by just always saying bottom.
Okay, very good. But now, since the chosen

272
00:10:07,673 --> 00:10:12,623
回复替换成⊥ 好的 但是现在 因为选择

273
00:10:12,623 --> 00:10:17,208
cipher text queries always respond in the
same way, they're not giving the adversary

274
00:10:12,623 --> 00:10:17,208
密文询问总是回复相同的结果 它们不会给敌手提供

275
00:10:17,208 --> 00:10:21,574
any information. The adversary always
knows that we're always gonna just respond

276
00:10:17,208 --> 00:10:21,574
任何信息 敌手也知道我们总是回复⊥

277
00:10:21,574 --> 00:10:25,668
with bottom. So we might as well just
remove these queries, 'cause they don't

278
00:10:21,574 --> 00:10:25,668
所以我们同样可以简单地移除这些询问 因为它们

279
00:10:25,668 --> 00:10:29,769
contribute any information to the
adversary. But now, once we remove these

280
00:10:25,668 --> 00:10:29,769
并不给敌手提供任何信息 但是现在 一旦我们移除了这些

281
00:10:29,769 --> 00:10:34,339
queries, the resulting game should look
fairly familiar. The top right game, and

282
00:10:29,769 --> 00:10:34,339
询问 由此产生的游戏我们应该相当熟悉 右上角的游戏 和

283
00:10:34,339 --> 00:10:39,144
the [bottom right] game are basically the two
games that come up in the definition of

284
00:10:34,339 --> 00:10:39,144
（右下角）的游戏基本上就是两个我们在CPA安全定义中提出的游戏

285
00:10:39,144 --> 00:10:43,773
CPA security. And as a result, because the
scheme is CPA secure, we know that the

286
00:10:39,144 --> 00:10:43,773
结果 因为这个组合是CPA安全的 我们可以知道

287
00:10:43,773 --> 00:10:48,508
adversary can't distinguish the top from
the bottom. And so now, by this change of

288
00:10:43,773 --> 00:10:48,508
敌手不能对上面和下面进行区分 然后 通过这种对回应的改变

289
00:10:48,508 --> 00:10:53,165
reasoning, we've proven that all of these
games are equivalent. And in particular,

290
00:10:48,508 --> 00:10:53,165
我们已经证明了所有这些游戏都是相同的 特别是

291
00:10:53,165 --> 00:10:57,022
the original two games that we started
with are also equivalent, and therefore,

292
00:10:53,165 --> 00:10:57,022
最初我们提及的两个游戏也是相同的 因此

293
00:10:57,022 --> 00:11:02,364
the adversary can't distinguish the top
left from the bottom left. And therefore,

294
00:10:57,022 --> 00:11:02,364
敌手不能对左上和左下进行区分 因为

295
00:11:02,364 --> 00:11:06,896
the scheme is CCA secure. So this gives
you the intuition as to why authenticated

296
00:11:02,364 --> 00:11:06,896
这个组合是CCA安全的 所以这就使你对为什么认证

297
00:11:06,896 --> 00:11:11,236
encryption is such a cool concept. Because
primarily it implies security against

298
00:11:06,896 --> 00:11:11,236
加密是一种很棒的想法有了直观认识 因为基本上它意味着

299
00:11:11,236 --> 00:11:15,199
chosen cipher test attacks. Okay, so as we
said authenticated encryption

300
00:11:11,236 --> 00:11:15,199
对选择密文攻击的安全 所以就像我们所说的认证加密

301
00:11:15,199 --> 00:11:19,094
ensures confidentiality. Even if the
adversary can decrypt a subset of the

302
00:11:15,199 --> 00:11:19,094
确保了机密性 即使敌手可以破译密文的子集

303
00:11:19,094 --> 00:11:23,476
cipher text, and more generally, even if
he can mount a general chosen cipher text attack,

304
00:11:19,094 --> 00:11:23,476
或者更广泛地讲 即使他可以他可以实施一般选择密文攻击

305
00:11:23,476 --> 00:11:27,965
he still is not going to be able to break
semantic security of the system. However,

306
00:11:23,476 --> 00:11:27,965
他仍旧不能破坏系统的语义安全 然而

307
00:11:27,965 --> 00:11:31,914
it is important to remember the two
limitations. First of all, it does not

308
00:11:27,965 --> 00:11:31,914
记住两点局限性是很重要的 首先 它不能

309
00:11:31,914 --> 00:11:36,350
prevent replay attacks on its own. We're
going to have to do something in addition

310
00:11:31,914 --> 00:11:36,350
自己阻挡重放攻击 我们需要去做一些额外的事

311
00:11:36,350 --> 00:11:40,785
to defend against replay attacks. We're
going to see several examples where if the

312
00:11:36,350 --> 00:11:40,785
去抵御重放攻击 我们将会看到很多例子 如果

313
00:11:40,785 --> 00:11:45,221
decryption engine reveals more information
about why a cipher text is rejected, it

314
00:11:40,785 --> 00:11:45,221
解密系统透露了更多关于密文被拒绝的原因 它

315
00:11:45,221 --> 00:11:49,278
doesn't just output bottom, but it
actually outputs more information, say, by

316
00:11:45,221 --> 00:11:49,278
不仅仅只输出底层 但是它确实输出更多的信息 例如

317
00:11:49,278 --> 00:11:53,744
timing attacks. And that explains why the
cipher text is rejected. Then in fact that

318
00:11:49,278 --> 00:11:53,744
在时序攻击中 这解释了为什么密文被拒绝了 此外事实上它

319
00:11:53,744 --> 00:11:58,120
can completely destroy security of the
authenticated encryption system. So we'll

320
00:11:53,744 --> 00:11:58,120
可以完全摧毁认证加密系统的安全性 所以

321
00:11:58,120 --> 00:12:02,245
see some cute attacks like this in a later
segment. Okay. So, in the next segment

322
00:11:58,120 --> 00:12:02,245
我们将在后面的部分看到一些像这样聪明的攻击 在下一部分

323
00:12:02,245 --> 00:12:05,394
we're gonna turn to constructing
authenticated encryption systems.

324
00:12:02,245 --> 00:12:05,394
我们将会转而讨论如何构造认证加密系统

