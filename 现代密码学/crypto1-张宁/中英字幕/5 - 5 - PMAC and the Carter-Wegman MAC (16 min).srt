1
00:00:00,000 --> 00:00:04,059
In the last two segments we talked about
the CBC-MAC and NMAC to convert a PRF for

2
00:00:00,000 --> 00:00:04,059
过去的两小节中我们讨论过使用CBC-MAC和NMAC将

3
00:00:04,059 --> 00:00:08,096
small messages into a PRF for much larger
messages. Those two constructions were

4
00:00:04,059 --> 00:00:08,096
供短消息使用的PRF转换为供长消息使用的PRF 这两种构造方法都是

5
00:00:08,096 --> 00:00:13,045
sequential, in the sense that if you had
multiple processors you couldn't make the

6
00:00:08,096 --> 00:00:13,045
时序的 意思是 即便你有多处理器 你仍然不能

7
00:00:13,045 --> 00:00:17,082
construction work any faster. In this
segment we're gonna look at a parallel MAC

8
00:00:13,045 --> 00:00:17,082
加快这种构造的工作效率 本节 我们将学习一种平行MAC

9
00:00:17,082 --> 00:00:21,065
that also converts a small PRF into a
large PRF, but does it in a very

10
00:00:17,082 --> 00:00:21,065
它也能将小型PRF转成大型PRF 但它是否是

11
00:00:21,065 --> 00:00:26,014
parallelizable fashion. In particular we're
gonna look at a parallel MAC construction

12
00:00:21,065 --> 00:00:26,014
平行模式呢 特别地 我们将学习一种叫做PMAC的平行MAC结构

13
00:00:26,014 --> 00:00:30,029
called PMAC, that uses an underlying PRF
to construct a PRF for much larger

14
00:00:26,014 --> 00:00:30,029
它可以用一个基本PRF来构建一个供更长消息使用的PRF

15
00:00:30,029 --> 00:00:34,062
messages. In particular, the PRF can
process much longer messages that can have

16
00:00:30,029 --> 00:00:34,062
更特别地 这个PRF可以处理变长和

17
00:00:34,062 --> 00:00:39,007
variable length and have as many as L
blocks in them. Now the construction works

18
00:00:34,062 --> 00:00:39,007
具有与L块相同数量的消息 这个结构的工作方式如下

19
00:00:39,007 --> 00:00:43,032
as follows. We take our message and we
break it into blocks. And then we process

20
00:00:39,007 --> 00:00:43,032
我们得到消息并分块 之后逐个处理块

21
00:00:43,032 --> 00:00:47,075
each block independently of the other. So,
the first thing we do, is we evaluate some

22
00:00:43,032 --> 00:00:47,075
所以 首先要做的是 求函数

23
00:00:47,075 --> 00:00:52,003
function P and we XOR the result
into the first message block, and then we

24
00:00:47,075 --> 00:00:52,003
P的值 然后将这个值与第一个消息值异或 接着

25
00:00:52,003 --> 00:00:56,052
apply our function F using a key k1.
We do the same for each one of the

26
00:00:52,003 --> 00:00:56,052
将得到值送入函数F并用密钥K1 我们为每个消息块做相同的操作

27
00:00:56,052 --> 00:01:01,000
message blocks and you notice that we can
do it all parallel, all message blocks are

28
00:00:56,052 --> 00:01:01,000
你应该注意到 我们可以平行地完成这个步骤 所有消息块

29
00:01:01,000 --> 00:01:05,038
processed independently of one another.
And we collect all these results into some

30
00:01:01,000 --> 00:01:05,038
都是独立地被处理的 然后 我们收集得到的所有结果并送入

31
00:01:05,038 --> 00:01:09,064
final XOR and then we encrypt one more time
to get the final tag value. Now for a

32
00:01:05,038 --> 00:01:09,064
最终异或计算器 接着我们再加密一次从而得到最终的标记值

33
00:01:09,064 --> 00:01:13,074
technical reason, actually on the very
last one. We actually don't need to apply

34
00:01:09,064 --> 00:01:13,074
由于技术的原理 最后一个 我们不必使用

35
00:01:13,074 --> 00:01:17,074
the PRF F, but as I said, this is just
for technical reason, and I'm going to

36
00:01:13,074 --> 00:01:17,074
PRF F 但正如我所说 这只是因为技术原因 我打算忽视这个问题

37
00:01:17,074 --> 00:01:21,084
ignore that for now. Now, I want to
explain what the function P is for and

38
00:01:17,074 --> 00:01:21,084
现在我想解释函数P是为了什么 并且

39
00:01:21,084 --> 00:01:26,028
what it does. So imagine, just for a
second, that the function P isn't actually

40
00:01:21,084 --> 00:01:26,028
它是用来干什么的 这里假设 函数P并不存在

41
00:01:26,028 --> 00:01:30,067
there. That is, imagine we actually,
directly feed each message block into the

42
00:01:26,028 --> 00:01:30,067
那么实际上 我们将直接将每个消息块送入

43
00:01:30,067 --> 00:01:34,062
PRF without applying any other
processing to it. Then I claim that the

44
00:01:30,067 --> 00:01:34,062
PRF 而没有使用其它任何处理 所以我说

45
00:01:34,062 --> 00:01:38,087
resulting MAC is completely insecure and
the reason is essentially no order is

46
00:01:34,062 --> 00:01:38,087
作为结果的MAC是完全不安全的 因为本质上

47
00:01:38,087 --> 00:01:43,012
enforced between the message blocks. In
particular, if I swap two message blocks,

48
00:01:38,087 --> 00:01:43,012
消息块之间没有执行任何操作 特别地 假设我交换两消息块位置

49
00:01:43,012 --> 00:01:47,052
that doesn't change the value of the final
tag. Because the XOR is commutative, the

50
00:01:43,012 --> 00:01:47,052
将不会改变最终特征值 由于XOR是或交换的 所以特征值

51
00:01:47,052 --> 00:01:51,077
tag will be the same whether we swap the
blocks or not. As a result, an attacker

52
00:01:47,052 --> 00:01:51,077
不会改变 不管我们交换消息块位置与否 就结果来说

53
00:01:51,077 --> 00:01:56,001
can request the tag for a particular
message, and then he obtains the tag for a

54
00:01:51,077 --> 00:01:56,001
攻击者为一消息请求特征值 他交换两消息块 并得到这一消息的特征值

55
00:01:56,001 --> 00:02:00,021
message where two of the blocks are
swapped and that counts as an existential

56
00:01:56,001 --> 00:02:00,021
这可算做一种伪造

57
00:02:00,021 --> 00:02:04,061
forgery. So what this function P tries to
do is essentially enforce order on these

58
00:02:00,021 --> 00:02:04,061
所以这个函数P所做的是为这些消息块执行命令操作

59
00:02:04,061 --> 00:02:08,079
blocks. And you notice that the function
takes, first of all, it's a keyed function,

60
00:02:04,061 --> 00:02:08,079
注意到 首先这个函数是键控函数

61
00:02:08,079 --> 00:02:13,008
so it takes a key as input. And second of
all, more importantly, it takes the block

62
00:02:08,079 --> 00:02:13,008
所以他需要一个密钥做为输入 更重要的第二点 它接收消息块号做为输入

63
00:02:13,008 --> 00:02:17,000
number as input. In other words, the
value of the function is different for

64
00:02:13,008 --> 00:02:17,000
换言之 每块的函数值是不同的

65
00:02:17,000 --> 00:02:20,087
each one of the blocks. And that's
actually exactly what's preventing this,

66
00:02:17,000 --> 00:02:20,087
所以 正是这个属性可以防止这种

67
00:02:21,002 --> 00:02:25,006
blocks swapping attack. So the function P
actually, is a very easy to compute

68
00:02:21,002 --> 00:02:25,006
消息块交换攻击 所以函数P 计算起来很容易

69
00:02:25,006 --> 00:02:29,013
function. Essentially given the key and
the message block, all it is, is just a

70
00:02:25,006 --> 00:02:29,013
基本上 给定密钥与消息块 所需的只是

71
00:02:29,013 --> 00:02:33,019
multiplication in some finite fields. So
it's a very, very simple function to

72
00:02:29,013 --> 00:02:33,019
有限域内的乘法 所以它是个非常容易计算的函数

73
00:02:33,019 --> 00:02:36,094
compute. It adds very little to the
running time of PMAC. And yet, it's

74
00:02:33,019 --> 00:02:36,094
它对于PMAC来说只会增加非常少的时间 与之相反的是

75
00:02:36,094 --> 00:02:40,097
enough in ensure that the PMAC is
actually secure. As we've said, the key

76
00:02:36,094 --> 00:02:40,097
它可确保PAMC是安全的 正如前面所说 PAMC的密钥

77
00:02:40,097 --> 00:02:45,082
for PMAC is this pair of keys. One key for
the PRF, and one key for this masking

78
00:02:40,097 --> 00:02:45,082
是这对密钥 一个供PRF使用 一个供函数掩模P使用

79
00:02:45,082 --> 00:02:50,014
function P. And finally, I'll tell you
that if the message length is not a

80
00:02:45,082 --> 00:02:50,014
最后 我需要阐述一点如果消息长度不是

81
00:02:50,014 --> 00:02:54,076
multiple of the block length. That is,
imagine the last block is shorter than

82
00:02:50,014 --> 00:02:54,076
块长度的整数倍 也就是 如果最后一个消息块短于一个整块

83
00:02:54,076 --> 00:02:59,088
full block length, then PMAC actually uses
a padding that's similar to CMAC, so that

84
00:02:54,076 --> 00:02:59,088
那么PMAC就会使用一个与CMAC相似的补丁 因此

85
00:02:59,088 --> 00:03:04,004
there is no need for an additional dummy
block, ever. So that's the PMAC

86
00:02:59,088 --> 00:03:04,004
根本没有必要增加一个傀儡块 这就是

87
00:03:04,004 --> 00:03:08,026
construction and as usual, we can state
its security theorem. So the security

88
00:03:04,004 --> 00:03:08,026
PMAC结构 照例 我们可以陈述它的安全理论

89
00:03:08,026 --> 00:03:12,071
theorem, by now, you should be used to it.
Essentially, it says that if you give me

90
00:03:08,026 --> 00:03:12,071
现在你应该已经习惯于安全理论 本质上 这个公式是说 如果有一

91
00:03:12,071 --> 00:03:16,071
an adversary attacking PMAC, I can
construct an adversary attacking the

92
00:03:12,071 --> 00:03:16,071
正在攻击PMAC的敌手 那么我可以构建一正在攻击基础PRF的敌手

93
00:03:16,071 --> 00:03:21,003
underlying PRF. Plus an additional error
term. And so, since again, the PRF is

94
00:03:16,071 --> 00:03:21,003
再加上误差项 这里PRF

95
00:03:21,003 --> 00:03:25,056
secure, we know that this term is
negligible. And so if we want this term to

96
00:03:21,003 --> 00:03:25,056
是安全的 我们知道该项是可忽略的 所以如果我想让该项也是

97
00:03:25,056 --> 00:03:30,063
be negligible, we know that, we need this
error term to also be negligible. Here, as

98
00:03:25,056 --> 00:03:30,063
可忽略的 我们应该知道 我们需要让误差项变得可忽略

99
00:03:30,063 --> 00:03:35,040
usual, q is the number of messages that
are MAC-ed using a particular key. And L

100
00:03:30,063 --> 00:03:35,040
照例 Q是使用一特殊密钥计算的消息的杂凑值

101
00:03:35,040 --> 00:03:39,093
is the maximum length of all those
messages. And PMAC is secure, as long as

102
00:03:35,040 --> 00:03:39,093
L是这些消息的最大长度 并且PMAC是安全的 只要

103
00:03:39,093 --> 00:03:44,082
its product is less than the square root
of the block size. So for AES this would be

104
00:03:39,093 --> 00:03:44,082
这个乘积小于块大小的平方根 对AES来说 这个块大小为2^128

105
00:03:44,082 --> 00:03:49,028
two to the 128, and the square root,
therefore, would be two to the 64th. So the

106
00:03:44,082 --> 00:03:49,028
所以平方根是2^64

107
00:03:49,028 --> 00:03:53,044
MAC would be secure, as long as Q times L
is less than two to the 64th. And every time,

108
00:03:49,028 --> 00:03:53,044
所以这个MAC算法是安全的条件是 Q*L的值小于2^64 并且每当

109
00:03:53,044 --> 00:03:57,025
as it gets closer to that value, of
course, you would have to change the key

110
00:03:53,044 --> 00:03:57,025
积值越接近2^64 你就必须改变密钥

111
00:03:57,025 --> 00:04:01,010
in order to continue MAC-ing more
messages. So the main thing to remember is

112
00:03:57,025 --> 00:04:01,010
来计算更多消息的杂凑值 所以主要要记住

113
00:04:01,010 --> 00:04:05,041
that PMAC also gives us a PRF, and when it
processes the message blocks independently

114
00:04:01,010 --> 00:04:05,041
当PMAC逐条处理消息时 PMAC也可相当于PRF

115
00:04:05,041 --> 00:04:10,033
of one another. Turns out that PMAC also
has a very interesting property. Namely,

116
00:04:05,041 --> 00:04:10,033
事实上PMAC有一个非常有意思的属性 即

117
00:04:10,033 --> 00:04:15,056
that PMAC math is incremental. So let me
explain to you what that means. So suppose

118
00:04:10,033 --> 00:04:15,056
PMAC算法是增值的 这里让我解释下它的意思 假设

119
00:04:15,056 --> 00:04:20,055
the function F that's used to construct PMAC
is not just a PRF, but, in fact, a

120
00:04:15,056 --> 00:04:20,055
PMAC结构中所用的函数F并不仅仅是一个PRF 而是一个置换

121
00:04:20,055 --> 00:04:25,025
permutation, PRP. So we can actually
invert it when we need to. Now suppose

122
00:04:20,055 --> 00:04:25,025
PRP 所以如果需要 我们可以将其逆转 现假设

123
00:04:25,025 --> 00:04:30,008
we've already computed the MAC for a
particularly long message m. And now,

124
00:04:25,025 --> 00:04:30,008
我们已计算过消息m的杂凑值 接着

125
00:04:30,008 --> 00:04:34,059
suppose just one message block of this
long message changes. So here, m[1] has

126
00:04:30,008 --> 00:04:34,059
假设该长消息中一消息换被改变 假定m[1]→m＇[1]

127
00:04:34,059 --> 00:04:38,099
changed into m'[1]. But the
remaining message blocks all remain the

128
00:04:34,059 --> 00:04:38,099
但剩余的消息块保持原样

129
00:04:38,099 --> 00:04:43,081
same. For other MAC-s, like CBC-MAC, even
though only one message block changed, you

130
00:04:38,099 --> 00:04:43,081
对于其它杂凑算法 如CBC-MAC来说 即便仅改变一消息块

131
00:04:43,081 --> 00:04:48,027
would have to recompute the tag on the
entire message. Recomputing the tag

132
00:04:43,081 --> 00:04:48,027
还是需要重新计算整个消息的特征值 重新计算特征值

133
00:04:48,027 --> 00:04:52,073
basically will take time that's
proportional to the length of the message.

134
00:04:48,027 --> 00:04:52,073
会依消息长度成比例消耗更多时间

135
00:04:52,073 --> 00:04:57,012
It turns out, with PMAC, if we only
change one block, or a small number of

136
00:04:52,073 --> 00:04:57,012
事实上 对于PMAC 如果我们仅改变一消息块 或少量消息块

137
00:04:57,012 --> 00:05:01,088
blocks, actually, we can recompute the
value of the tag for the new message very,

138
00:04:57,012 --> 00:05:01,088
我们可以非常快地为新消息重新计算特征值

139
00:05:01,088 --> 00:05:05,074
very quickly. And let me ask you a puzzle
to see if you can figure out how to do

140
00:05:01,088 --> 00:05:05,074
这里我为你们提一个疑问 来看看你们自己能否想出快速计算的方法

141
00:05:05,074 --> 00:05:09,036
that yourself. And remember, the function
F is a PRP, and therefore is invertible.

142
00:05:05,074 --> 00:05:09,036
记住 函数F是一个PRP 因此它是可逆的

143
00:05:09,036 --> 00:05:13,002
So let's see if you can figure out how to
compute the MAC in the new message by

144
00:05:09,036 --> 00:05:13,002
让我们看看能不能快速完成新消息杂凑值的计算

145
00:05:13,002 --> 00:05:16,087
yourself. So it turns out this can be
done. And you can quickly recompute the

146
00:05:13,002 --> 00:05:16,087
事实上 是可以完成的 可以快速重计算新消息的新特征值

147
00:05:16,087 --> 00:05:20,093
tag on the new message using this third
line here. Just to make sure we all see

148
00:05:16,087 --> 00:05:20,093
只需要使用这里写的三条公式 为了确保大家都能明白

149
00:05:20,093 --> 00:05:25,024
the solution let's quickly go back to the
original diagram for PMAC and I can show

150
00:05:20,093 --> 00:05:25,024
这个解决办法 让我们回到前面讲过的PMAC的原理图 然后我会说明

151
00:05:25,024 --> 00:05:29,004
you what I mean. So imagine this one
message block changed into some other

152
00:05:25,024 --> 00:05:29,004
解决办法 假想这个消息块变成另一消息块

153
00:05:29,004 --> 00:05:33,066
block, say, it changed into M'[1]. Then
what we could do is we can take the tag on

154
00:05:29,004 --> 00:05:33,066
如变成m＇[1] 接下来我们要做的是 获取改变

155
00:05:33,066 --> 00:05:38,060
the original message before the change was
made. So we can invert the function F, and

156
00:05:33,066 --> 00:05:38,060
之前的消息特征值 并且逆转函数F

157
00:05:38,060 --> 00:05:43,036
determine the value before the function F
was applied. Now, well, since we now have

158
00:05:38,060 --> 00:05:43,036
再利用逆转后F确定使用函数F之前的值 这个值是

159
00:05:43,036 --> 00:05:48,006
an XOR of a bunch of blocks, what
we can do is we can cancel out the XOR

160
00:05:43,036 --> 00:05:48,006
一群消息块的异或值 之后我们可以抵消

161
00:05:48,006 --> 00:05:53,033
that came from the original message block,
basically by XOR-ing this value that came

162
00:05:48,006 --> 00:05:53,033
原始块m[1]的异或 方法是将原始消息中的这个值

163
00:05:53,033 --> 00:05:58,068
from the original message block into this
XOR-ed accumulator. And then XOR-ing again

164
00:05:53,033 --> 00:05:58,068
与刚才得到的所有原始消息异或值进行异或  接着再次将新消息

165
00:05:58,087 --> 00:06:03,046
the value that would come from the new
message block back into the XOR

166
00:05:58,087 --> 00:06:03,046
中的这个值与抵消后的异或值进行异或

167
00:06:03,046 --> 00:06:08,064
accumulator. And then apply the function F
again. And that will give us the tag for

168
00:06:03,046 --> 00:06:08,064
接着使用函数F 这样就得到了新消息的特征值

169
00:06:08,064 --> 00:06:13,090
the new message, where just one block was
changed. So in symbols, basically, I wrote

170
00:06:08,064 --> 00:06:13,090
而且新消息中仅有一消息块被改变

171
00:06:13,090 --> 00:06:18,060
the formula over here. You can see,
basically, we decrypt the tag, and then we

172
00:06:13,090 --> 00:06:18,060
这里 我写出了流程工式 你们能看到 我们解密特征值 然后

173
00:06:18,060 --> 00:06:23,092
XOR with the block that comes from the
original message block. We XOR again with

174
00:06:18,060 --> 00:06:23,092
将得到的值与由原始消息块得到的块异或 接着再将得到的值与

175
00:06:23,092 --> 00:06:28,099
the block that comes from the new message
block. And then we re-encrypt the final

176
00:06:23,092 --> 00:06:28,099
由新消息块得到的消息块异或 然后我们重新加密最终

177
00:06:28,099 --> 00:06:33,089
XOR accumulator to get the new tag for the
message with a one block changed. So

178
00:06:28,099 --> 00:06:33,089
异或累加来得到改变一消息块的新消息的特征值

179
00:06:33,089 --> 00:06:37,047
that's kind of a neat property. It kind of
shows that if you have very large

180
00:06:33,089 --> 00:06:37,047
整个流程很整齐 也就是说如果你有一很长

181
00:06:37,047 --> 00:06:41,030
messages, you can very quickly update the
tag. Of course you would need the secret

182
00:06:37,047 --> 00:06:41,030
的消息 你能快速更新特征值 当然你可以利用私密钥来

183
00:06:41,030 --> 00:06:45,017
key to do the update, but you can quickly
update the tag if just a small number of

184
00:06:41,030 --> 00:06:45,017
完成更新 但如果仅一小部分消息块改变了 你能用上述方法快速更新特征值

185
00:06:45,017 --> 00:06:49,013
message blocks changed. Okay, so that
concludes our discussion of PMAC. And now

186
00:06:45,017 --> 00:06:49,013
这也就是我们所有要讨论的PMAC 现在

187
00:06:49,013 --> 00:06:53,031
I wanna switch topics a little bit, and
talk about the concept of a one time MAC,

188
00:06:49,013 --> 00:06:53,031
我想转换下话题 来说说一次性MAC的概念

189
00:06:53,031 --> 00:06:57,050
which is basically the analog of the one
time pad, but in the world of integrity.

190
00:06:53,031 --> 00:06:57,050
它除在完整性算法中 均与一次性密码本相似

191
00:06:57,050 --> 00:07:02,007
So let me explain what I mean by that. So
imagine we wanna build a MAC that is only

192
00:06:57,050 --> 00:07:02,007
这里让我解释下我想表达的意思 假想我们想构建一个MAC 且它

193
00:07:02,007 --> 00:07:06,065
used for integrity of a single message. In
other words, every time we compute the

194
00:07:02,007 --> 00:07:06,065
仅能为单条消息的完整性算法使用 换言 每当我们计算

195
00:07:06,065 --> 00:07:11,028
integrity of a particular message, we also
change the key. So that any particular key

196
00:07:06,065 --> 00:07:11,028
特定消息的完整性时 我们会改变密钥 所以任何特定密钥

197
00:07:11,028 --> 00:07:15,081
is used only for integrity of one message.
Then we can define the security game as

198
00:07:11,028 --> 00:07:15,081
仅供单条消息使用 接着我们可以由攻击者只能看到单条消息来

199
00:07:15,081 --> 00:07:20,033
basically saying, the attacker's gonna see
one message. Therefore, we only allow him

200
00:07:15,081 --> 00:07:20,033
定义安全性的测试方法 因此 我们只让攻击者攻击

201
00:07:20,033 --> 00:07:24,063
to do one chosen message attack. So he
gets to submit one message query, and he

202
00:07:20,033 --> 00:07:24,063
选定的单条消息 所以他会提交一条消息请求

203
00:07:24,063 --> 00:07:29,005
is given the tag corresponding to that one
message query. And now his goal is to

204
00:07:24,063 --> 00:07:29,005
接着他会得到请求消息的响应特征值 攻击者目标是

205
00:07:29,005 --> 00:07:33,014
forge a message tag pair. Okay, so you
can see his goal was to produce one

206
00:07:29,005 --> 00:07:33,014
伪造消息特征值对 你可以看到他的止标是产生一个

207
00:07:33,014 --> 00:07:37,058
message tag pair that verifies correctly and
is different from the pair that he was

208
00:07:33,014 --> 00:07:37,058
可以正确认证并与给定的对不相同的消息特征值对

209
00:07:37,058 --> 00:07:41,079
actually given. As we'll see, just like
the one time pad and stream ciphers were

210
00:07:37,058 --> 00:07:41,079
我们将看到 正如一次性密码本与流密码非常

211
00:07:41,079 --> 00:07:45,077
quite useful, it turns out one time MAC-s
are also quite useful for the same

212
00:07:41,079 --> 00:07:45,077
有用一样 事实上 对于一次性MAC来说

213
00:07:45,077 --> 00:07:50,023
applications when we only wanna use a key
to encrypt or to provide integrity for

214
00:07:45,077 --> 00:07:50,023
当我们仅想用一密钥来为单条消息加密或提供完整性时 它是非常有用的

215
00:07:50,023 --> 00:07:54,030
just a single message. So as usual we
would say that a one time act is secure,

216
00:07:50,023 --> 00:07:54,030
所以照例 我们会说一次性的举动是安全的

217
00:07:54,030 --> 00:07:58,042
because basically no adversary can win
this game. Now the interesting thing is

218
00:07:54,030 --> 00:07:58,042
因为 基本上没有攻击者可以赢得这场比赛 这里有趣的事是

219
00:07:58,042 --> 00:08:02,060
that one time MAC-s, just like the one time
pad can be secure against infinitely

220
00:07:58,042 --> 00:08:02,060
一次性MAC 与一次性密码本一样 非常安全 并可抵御无限

221
00:08:02,060 --> 00:08:06,093
powerful adversaries. And not only that,
because they're only designed to be secure

222
00:08:02,060 --> 00:08:06,093
强大的攻击者们 不仅如此 因为这些MAC仅对于

223
00:08:06,093 --> 00:08:11,000
for one time use, they can actually be
faster than MAC-s that are based on PRFs.

224
00:08:06,093 --> 00:08:11,000
一次性使用来说是安全的 所以事实上一次性MACs 可以比以PRF为基础的MAC快

225
00:08:11,000 --> 00:08:15,017
And so I just wanted to give you a quick
example of one one time MAC, this is a

226
00:08:11,000 --> 00:08:15,017
这些我想给你们举一个一次性MAC的例子 这是一个

227
00:08:15,017 --> 00:08:19,042
classic construction for a one time MAC,
let me show you how it works. The first

228
00:08:15,017 --> 00:08:19,042
一次性MAC的经典结构 我会展示它的工作方式 首先

229
00:08:19,042 --> 00:08:24,025
step is to pick a prime that's slightly
larger than our block size. In this case

230
00:08:19,042 --> 00:08:24,025
选定一个稍大于块大小的素数 本例中

231
00:08:24,025 --> 00:08:29,002
we're going to use 128-bit blocks, so
let's pick the first prime that's bigger

232
00:08:24,025 --> 00:08:29,002
我们使用的是128bit块 所以我们选择第一个

233
00:08:29,002 --> 00:08:33,091
than two to the 128th. This happens to be
two to the 128th plus 51. And now the key

234
00:08:29,002 --> 00:08:33,091
大于2^128的素数 这正好是2^128+51 接着密钥是从

235
00:08:33,091 --> 00:08:38,081
is going to be a pair of random numbers in
the range 1 to our prime, so 1 to q. So we

236
00:08:33,091 --> 00:08:38,081
1到选定素数中的随机数对 即1―q

237
00:08:38,081 --> 00:08:43,046
choose two random integers in the range 1
to q. Now we're given a message so we're

238
00:08:38,081 --> 00:08:43,046
所以我们从1-q中选两个随机整数 接着给定一个消息

239
00:08:43,046 --> 00:08:47,052
going to take our message and break it
into blocks where each block is 128 bits,

240
00:08:43,046 --> 00:08:47,052
我们将该消息分块 每块大小128bits

241
00:08:47,052 --> 00:08:51,073
and we're going to regard each number as
an integer in the range 0 to 2 to the

242
00:08:47,052 --> 00:08:51,073
并且块中的每个数字是0-(2^128-1)中的任一整数

243
00:08:51,073 --> 00:08:55,089
128th minus 1. Now the MAC is defined as
follows. The first thing we do is we take

244
00:08:51,073 --> 00:08:55,089
这里MAC的定义如下 首先要做的是获取

245
00:08:55,089 --> 00:08:59,060
our message blocks and we kind of
construct the polynomial out of them. So

246
00:08:55,089 --> 00:08:59,060
消息块然后依这些消息块构建一类多项式

247
00:08:59,060 --> 00:09:03,061
if there are L blocks in our message,
we're going to construct the polynomial of

248
00:08:59,060 --> 00:09:03,061
所以如果消息有L块 我们将构建L次多项式

249
00:09:03,061 --> 00:09:07,082
degree L and you notice that the constant
term of the polynomial is set to zero. And

250
00:09:03,061 --> 00:09:07,082
注意到多项式的常数项设为0

251
00:09:07,082 --> 00:09:11,050
then we define the MAC very simply.
Basically what we do is we take the

252
00:09:07,082 --> 00:09:11,050
之后MAC的定就非常简单了 基本上我们得到

253
00:09:11,050 --> 00:09:15,028
polynomial that corresponds to the
message, we evaluate it at the point K

254
00:09:11,050 --> 00:09:15,028
与消息对应的多项式 接着计算多项式取K时的值

255
00:09:15,028 --> 00:09:19,017
that's one half of our secret key, and
then we add the value A which is the

256
00:09:15,028 --> 00:09:19,017
K是密钥的一半 然后再加上值A A是

257
00:09:19,017 --> 00:09:22,095
second half of our secret key. And that's
it. That's the whole MAC. So just

258
00:09:19,017 --> 00:09:22,095
另一半密钥 这就是整个MAC 所以

259
00:09:22,095 --> 00:09:27,015
basically construct the polynomial that
corresponds to our message, evaluate that

260
00:09:22,095 --> 00:09:27,015
基本上只要构建与消息对应的多项多 计算定义域取

261
00:09:27,015 --> 00:09:31,035
polynomial at half of the secret key, and
add the other half of the secret key to

262
00:09:27,015 --> 00:09:31,035
密钥的一半时的值 再加上密钥的另一半

263
00:09:31,035 --> 00:09:35,050
the result, and of course reduce final
result modulo q. Okay so that's it, so

264
00:09:31,035 --> 00:09:35,050
当然还要对最后结果取模q 之后得到的就是

265
00:09:35,050 --> 00:09:40,049
the whole MAC, it's a one time secure MAC
and we will argue that this MAC is one

266
00:09:35,050 --> 00:09:40,049
完整的MAC 这就是一次性安全MAC 之后我们会讨论这个MAC是否是一次性

267
00:09:40,049 --> 00:09:45,041
time secure, essentially by arguing that
if I tell you the value of MAC for one

268
00:09:40,049 --> 00:09:45,041
安全的 本质上 通过讨论可以知道 假定给定一特定消息的MAC值

269
00:09:45,041 --> 00:09:49,093
particular message, that tells you nothing
at all about the value of the MAC at

270
00:09:45,041 --> 00:09:49,093
它不能给你关于另一消息MAC值的任何信息

271
00:09:49,093 --> 00:09:54,031
another message. And as a result, even
though you've seen the value of the MAC on

272
00:09:49,093 --> 00:09:54,031
结果就是 即使你已得到一特定消息的MAC值

273
00:09:54,031 --> 00:09:58,064
a particular message, you have no way of
forging this MAC on some other message.

274
00:09:54,031 --> 00:09:58,064
你依然没有办法伪造另一消息的MAC值

275
00:09:58,064 --> 00:10:03,018
Now I should emphasize that this is a one
time MAC, but it's not two time secure. In

276
00:09:58,064 --> 00:10:03,018
这里我应该强调这是一次性MAC 不能保证二次使用的安全性

277
00:10:03,018 --> 00:10:07,067
other words, if you get to see the value
of the MAC on two different messages, that

278
00:10:03,018 --> 00:10:07,067
换言之 如果你得到两不同消息的MAC值

279
00:10:07,067 --> 00:10:11,094
actually completely compromises the
secret key. And you can actually predict a MAC

280
00:10:07,067 --> 00:10:11,094
那么这肯定会危害密钥 并且你真的可以预测

281
00:10:11,094 --> 00:10:16,026
for a third or fourth message of your
choice. So then the MAC becomes forgeable.

282
00:10:11,094 --> 00:10:16,026
依你选择 第三 或第四条消息的MAC值 这时 MAC就变的可伪造了

283
00:10:16,026 --> 00:10:20,074
But for one time use, it is a perfectly
secure MAC, and I'll tell you that in fact

284
00:10:16,026 --> 00:10:20,074
但对一次性使用来说 它是完全保密的MAC 并且

285
00:10:20,074 --> 00:10:24,099
it's a very fast MAC to evaluate. So now
that we've constructed one time MAC-s,

286
00:10:20,074 --> 00:10:24,099
它是一种可快速评估的算法 假定我们已经构建了一定次MAC

287
00:10:24,099 --> 00:10:29,035
turns out there's actually a general
technique that will convert one time MAC-s

288
00:10:24,099 --> 00:10:29,035
但有一种通用技术可将一次性MAC转化成

289
00:10:29,035 --> 00:10:33,055
into many time MAC-s. And I just wanted to
briefly show you how that works. So

290
00:10:29,035 --> 00:10:33,055
多次性MAC 我想简单演示下它的工作方式

291
00:10:33,055 --> 00:10:37,047
suppose we have our one time MAC, let's
call it S and V for signing and

292
00:10:33,055 --> 00:10:37,047
假定我们有一次性MAC （S，V)且该MAC用于签名和

293
00:10:37,047 --> 00:10:41,099
verification algorithms, and let's just
assume that the tags themselves are n bit

294
00:10:37,047 --> 00:10:41,099
认证算法 再假设特征值是n比特串

295
00:10:41,099 --> 00:10:46,079
strings. In addition, let's also look at a
PRF, a secure PRF, that also happens to

296
00:10:41,099 --> 00:10:46,079
此外 我们再看看PRF 这个安全的PRF 它正好

297
00:10:46,079 --> 00:10:51,069
output n bit strings but also takes as
inputs n bit strings. So let's now define

298
00:10:46,079 --> 00:10:51,069
输出n比特串 且输入也为n比特串 所以这里我们定义

299
00:10:51,069 --> 00:10:56,047
a general construction for a MAC. These
MAC-s are called Carter-Wegman MAC-s that

300
00:10:51,069 --> 00:10:56,047
一个MAC的通用结构 这种MAC叫做Carter-Wegman MAC

301
00:10:56,047 --> 00:11:01,050
works as follows. Basically what we would
do is we would apply the one time MAC to

302
00:10:56,047 --> 00:11:01,050
它的工作方式如下 基本上就是我们对消息M使用一次性MAC

303
00:11:01,050 --> 00:11:06,040
the message M and then we're going to
encrypt the results using the PRF. So how do

304
00:11:01,050 --> 00:11:06,040
接着再用PRF对输出结果进行加密 这里我们怎样加密这个

305
00:11:06,040 --> 00:11:11,006
we encrypt the result? Well, we choose a
random r and then we compute kind of a

306
00:11:06,040 --> 00:11:11,006
输出结果呢 方式是选一个随机数r 接着

307
00:11:11,006 --> 00:11:15,064
one time path from this r by applying the
PRF to it. And then we XOR the result

308
00:11:11,006 --> 00:11:15,064
使用r与PRF进行类似于一次性密码本的加密算法 然后我们将该结果与

309
00:11:15,064 --> 00:11:20,050
with the actual one time MAC. So the neat
thing about this construction is that the

310
00:11:15,064 --> 00:11:20,050
前面的一次性MAC结果进行异或 这个结构的利落之处是

311
00:11:20,050 --> 00:11:25,019
fast one time MAC is applied to the long
message, which could be gigabytes long.

312
00:11:20,050 --> 00:11:25,019
快速一次性MAC被用在了可能是千兆字节长的长消息上

313
00:11:25,019 --> 00:11:29,089
And the slower PRF is only applied to this
nonce r, which is then used to

314
00:11:25,019 --> 00:11:29,089
而较慢的PRF则被于用这个临时r r被用于

315
00:11:29,089 --> 00:11:34,068
encrypt the final results of the MAC. And
you can argue that if the MAC that was

316
00:11:29,089 --> 00:11:34,068
加密整个MAC的最终结果 这里你可以疑惑

317
00:11:34,068 --> 00:11:39,046
given to us as a building block is a one
time secure MAC, and the PRF is secure,

318
00:11:34,068 --> 00:11:39,046
给定的基础MAC是否是安全的 PRF是否是安全的

319
00:11:39,046 --> 00:11:44,036
then, in fact, we get a many time secure
MAC that happens to output 2n bit tags.

320
00:11:39,046 --> 00:11:44,036
若都是 则我们可以得到输出2n比特特征值的一个多次性MAC

321
00:11:44,036 --> 00:11:49,013
So we're gonna see Carter-Wegman MAC-s later
on when we talk about authenticated

322
00:11:44,036 --> 00:11:49,013
我们会在接下来讨论认证加密时学习Carter-Wegman

323
00:11:49,013 --> 00:11:53,043
encryption. And, in fact, one of the NIST standard
methods for doing encryption with

324
00:11:49,013 --> 00:11:53,043
事实上 NIST完整性加密标准中的一个

325
00:11:53,043 --> 00:11:58,001
integrity, uses a Carter-Wegman MAC for
providing integrity. I want to mention

326
00:11:53,043 --> 00:11:58,001
正是用了carter-wegman来提供完整性 我还想补充

327
00:11:58,001 --> 00:12:03,012
that this Carter-Wegman MAC is a good
example of a randomized MAC where this nonce

328
00:11:58,001 --> 00:12:03,012
Carter-wegman MAC是随机MAC的一个很好的例子 且每次计算特征值时

329
00:12:03,012 --> 00:12:08,010
r is chosen afresh every time the tag is
computed. And so for example if you try to

330
00:12:03,012 --> 00:12:08,010
会重新选择临时r  例如 你试图

331
00:12:08,010 --> 00:12:13,009
compute a tag for the same message twice
each time you'll choose a different r and

332
00:12:08,010 --> 00:12:13,009
为同一次消息计算两次特征值 且选择的是不同的r 那么

333
00:12:13,009 --> 00:12:18,013
as a result you'll get different tags both
times. And so this is a nice example of a

334
00:12:13,009 --> 00:12:18,013
结果你会得到一对不同的特征值 所以这是一个关于MAC的很好的例子

335
00:12:18,013 --> 00:12:22,069
MAC that's actually not a pseudo random
function, not a PRF, because a single

336
00:12:18,013 --> 00:12:22,069
且该MAC并不是伪随机函数，即不是PRF 因为单一消息

337
00:12:22,069 --> 00:12:27,067
message could actually be mapped to many
different tags all of which are valid for

338
00:12:22,069 --> 00:12:27,067
可以映射到许多不同的特征值上 且它们对于该消息都是有效的

339
00:12:27,067 --> 00:12:31,097
that one message. To conclude our
discussion on the Carter-Wegman MAC, let me

340
00:12:27,067 --> 00:12:31,097
为了总结关于Carter-Wegman MAC的讨论 让我

341
00:12:31,097 --> 00:12:36,036
ask you the following question. Here we
have the equation for the Carter-Wegman

342
00:12:31,097 --> 00:12:36,036
问你接下来的这个问题 这是个关于Carter-wegman MAC的问题

343
00:12:36,036 --> 00:12:40,082
MAC. As usual, you see the nonce r as
part of the MAC. And the second part of

344
00:12:36,036 --> 00:12:40,082
照例 你能看到作为MAC一部分的临时r 和MAC的第二部分

345
00:12:40,082 --> 00:12:45,033
the MAC I'm gonna denote by t. This is
basically the one time MAC applied to the

346
00:12:40,082 --> 00:12:45,033
我以t表示这个部分 这个基本上是用于消息M的一次性MAC

347
00:12:45,033 --> 00:12:49,067
message M, and then encrypted using the
pseudo-random function applied to the

348
00:12:45,033 --> 00:12:49,067
接着是 使用临时r 伪随机函数加密的这部分

349
00:12:49,067 --> 00:12:54,007
nonce r. So we'll denote the result of
this XOR by t. So my question to

350
00:12:49,067 --> 00:12:54,007
所以 我们就是将这个异或结果标记为t 我对你们的问题是

351
00:12:54,007 --> 00:12:58,047
you is, given the Carter-Wegman MAC pair r,t
for particular message m, how

352
00:12:54,007 --> 00:12:58,047
给定计算特定消息m的carter-wegman mac值时需要的数对（r,t）

353
00:12:58,047 --> 00:13:03,045
would you verify that this MAC is valid?
And recall that its algorithm V here, is

354
00:12:58,047 --> 00:13:03,045
怎么核实该MAC是有效的？ 这里回忆下它的算法V

355
00:13:03,045 --> 00:13:08,035
the verification algorithm for the
underlying one time MAC. So this is the

356
00:13:03,045 --> 00:13:08,035
V是基础一次性MAC的认证算法 这个是正确的答案

357
00:13:08,035 --> 00:13:13,034
right answer, and to see why, just observe
that this XOR here decrypts the quantity t

358
00:13:08,035 --> 00:13:13,034
为了想通原因 注意这个XOR可以将数t解密成

359
00:13:13,034 --> 00:13:17,085
to its plain text value, which is
basically the original underlying one time

360
00:13:13,034 --> 00:13:17,085
明文值 该值是原基础一次性MAC

361
00:13:17,085 --> 00:13:22,065
MAC. And so we can directly feed that into
the verification algorithm for the one

362
00:13:17,085 --> 00:13:22,065
所以我们可以直接将其送入一次性MAC的认证算法

363
00:13:22,065 --> 00:13:26,076
time MAC. The last type of MAC I wanted
to tell you about is one that is very

364
00:13:22,065 --> 00:13:26,076
我想讨论的最后一种MAC是一种在

365
00:13:26,076 --> 00:13:31,011
popular in internet protocols. It's called the HMAC. But before we talk about the HMAC we

366
00:13:26,076 --> 00:13:31,011
互联网协议中非常流行的MAC 叫做HMAC 但在讨论HMAC前 我们

367
00:13:31,011 --> 00:13:35,004
have to talk about hash functions and in particular, collision resistant hash

368
00:13:31,011 --> 00:13:35,004
需要说明下HASH函数 尤其是 耐碰撞hash函数

369
00:13:35,004 --> 00:13:39,020
functions and we are going to do that in
the next module. So this is the end of our

370
00:13:35,004 --> 00:13:39,020
这些我们都将在下一模块中讨论 所以以上就是

371
00:13:39,020 --> 00:13:43,015
first module on MAC-s and I wanted to point
out that there's beautiful theory that

372
00:13:39,020 --> 00:13:43,015
关于MAC的第一模块内容 还有 事实上有许多很好的

373
00:13:43,015 --> 00:13:47,005
went into constructing all the MAC-s that
we saw. I gave you the highlights showed

374
00:13:43,015 --> 00:13:47,005
关于构建我们看到的这些MAC的理论 我已经给了你们一些展示了

375
00:13:47,005 --> 00:13:50,086
you the main constructions, but
there's really quite a bit of theory that

376
00:13:47,005 --> 00:13:50,086
主流构建的集锦 但确实有非常多的关于

377
00:13:50,086 --> 00:13:54,067
goes into constructing these MAC-s, and if
you'd like to learn more about that, I

378
00:13:50,086 --> 00:13:54,067
构建这些MAC的理论 如果你想了解更多

379
00:13:54,067 --> 00:13:58,062
listed a couple of key papers you might
want to look at. Let me quickly tell you what they

380
00:13:54,067 --> 00:13:58,062
我列出了你可能会想看的关键论文 让我快速做一下它们的说明

381
00:13:58,062 --> 00:14:03,017
are. The first one is, what's called the
three key construction, which is the basis

382
00:13:58,062 --> 00:14:03,017
第一个 称做三密钥构建 它是CMAC的基础

383
00:14:03,017 --> 00:14:07,853
of CMAC. A very elegant paper that give a
very efficient construction out of CBC-MAC.

384
00:14:03,017 --> 00:14:07,853
且非常精简 并给出了CBC-MAC中的一种非常有效的结构

385
00:14:07,853 --> 00:14:12,005
The second paper is a more technical
paper, but basically shows how to prove

386
00:14:07,853 --> 00:14:12,005
论文二技术性较高 但基本上就是关于如何证明

387
00:14:12,005 --> 00:14:16,052
that bounds of CBC-MAC as a PRF. The
third paper talks about PMAC and its

388
00:14:12,005 --> 00:14:16,052
做为PRF的CBC-MAC的范围 第三篇讨论了PMAC和它的结构

389
00:14:16,052 --> 00:14:21,022
construction. Again, a very acute paper.
The fourth paper talks about security of

390
00:14:16,052 --> 00:14:21,022
且该论文非常敏锐 第四篇讨论了

391
00:14:21,022 --> 00:14:26,028
NMAC and HMAC as well. HMAC we're going to
cover in, the next module. The last paper

392
00:14:21,022 --> 00:14:26,028
NMAC与HMAC的安全性 下一模块我们会涉及到HMAC 最后一篇

393
00:14:26,028 --> 00:14:30,080
I listed asks an intriguing question.
Recall that all of our constructions, we

394
00:14:26,028 --> 00:14:30,080
问了一个非常有趣的问题 回忆下所学的所有结构

395
00:14:30,080 --> 00:14:35,073
always assume that AES is a pseudo-random
function for sixteen byte messages and we

396
00:14:30,080 --> 00:14:35,073
我们一直认为AES是一供16字节长消息使用的伪随机函数 

397
00:14:35,073 --> 00:14:40,055
then built a pseudo-random function and
therefore a MAC for much longer messages.

398
00:14:35,073 --> 00:14:40,055
所以我们构建了一伪随机函数 也构建了一供更长消息使用的MAC

399
00:14:40,055 --> 00:14:45,052
This paper says well, what do we do if AES
is not a pseudo-random function, but still

400
00:14:40,055 --> 00:14:45,052
该论文认为 如果AES不是伪随机函数我们该怎么办 即使如此

401
00:14:45,052 --> 00:14:50,064
satisfies some weaker security property
called an unpredictable function. And then

402
00:14:45,052 --> 00:14:50,064
AES依旧可以满足一些较弱的安全属性 称为不可预知功能

403
00:14:50,064 --> 00:14:55,026
they ask if AES is only an unpredictable
function, but not a pseudo-random

404
00:14:50,064 --> 00:14:55,026
之后该论文提出 AES是否是唯一可提供不可预测功能的算法 这里AES不是伪随机函数

405
00:14:55,026 --> 00:15:00,003
function, can we still build MAC-s for long
messages? And so they succeed in actually

406
00:14:55,026 --> 00:15:00,003
我们能否依旧为长消息构建MAC 之后论文成功给出

407
00:15:00,003 --> 00:15:03,059
giving constructions just based on the
weaker assumption that AES is an

408
00:15:00,003 --> 00:15:03,059
以AES是不可预测函数为基础的结构

409
00:15:03,059 --> 00:15:07,035
unpredictable function. But their
constructions are far less sufficient than

410
00:15:03,059 --> 00:15:07,035
但这个结构远不足我们在本节中讨论过的

411
00:15:07,035 --> 00:15:11,016
CBC-MAC or NMAC, or PMAC that we discussed
in these segments. And so if you're

412
00:15:07,035 --> 00:15:11,016
CBC-MAC、NMAC、PMAC充分 所以如果你对

413
00:15:11,016 --> 00:15:15,027
interested in a different perspective on
how to build MAC-s from block ciphers like

414
00:15:11,016 --> 00:15:15,027
如何以分组密码 如AES 来构建MAC的不同观点感兴趣

415
00:15:15,027 --> 00:15:18,098
AES, please take a look at this paper. And
there are actually some nice open

416
00:15:15,027 --> 00:15:18,098
那就请你看看这些论文 其中确实有一些与本领域相关的

417
00:15:18,098 --> 00:15:23,014
questions to work on in this area. So this
concludes our first segment on integrity.

418
00:15:18,098 --> 00:15:23,014
非常好的开放性问题 所以关于完整性的第一节内容就讲完了

419
00:15:23,014 --> 00:15:26,051
And in the next segment, we're gonna talk
about collision resistance.

420
00:15:23,014 --> 00:15:26,051
下节 我们讲讨论耐碰撞理论

