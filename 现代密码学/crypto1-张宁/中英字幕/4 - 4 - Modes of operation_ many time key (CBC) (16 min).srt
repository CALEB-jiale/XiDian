1
00:00:00,000 --> 00:00:04,152
现在我们理解了选择明文安全性，让我们构建加密机制
Now that we understand chosen plaintext
security, let's build encryption schemes

2
00:00:04,152 --> 00:00:08,515
来保证选择明文安全。第一个这样的加密机制是密码分组链接
that are chosen plaintext secure. And the
first such encryption scheme is going to

3
00:00:08,515 --> 00:00:12,510
上图就是密码分组链接的工作原理
be called cipher bock chaining. So here
is how cipher block chaining works.

4
00:00:12,510 --> 00:00:16,610
密码分组链接是使用分组密码来实现选择明文攻击安全的一种方式
Cipher block chaining is a way of using a
block cipher to get chosen plaintext

5
00:00:16,610 --> 00:00:20,868
特别的，我们来看一个使用初始向量IV的密码密码分组链接
security. In particular, we are going to
look at a mode called cipher block chaining

6
00:00:20,868 --> 00:00:25,021
CBC代表密码分组链接。假设我们有一个分组密码ED
with a random IV. CBC stands for cipher
block chaning. So suppose we have a block

7
00:00:25,021 --> 00:00:28,963
现在我们定义CBC为下面的加密方案
cipher, so EB is a block cipher. So now
let's define CBC to be the following

8
00:00:28,963 --> 00:00:33,248
所以当这个加密算法被用来加密消息m时
encryption scheme. So the encryption
algorithm when it's asked to encrypt a

9
00:00:33,248 --> 00:00:37,991
首先要做的就是选择一个初始向量 IV
message m, the first thing it's going to do
is it's going to choose a random IV that's

10
00:00:37,991 --> 00:00:41,958
IV的大小是分组密码的分组大小。所以IV就是一个密码分组
exactly one block of the block
cipher. So IV is one cypher block.

11
00:00:41,958 --> 00:00:46,035
在高级加密标准中，IV有16个字节数
So in the case of AES the IV
would be 16 bytes. And then we're

12
00:00:46,035 --> 00:00:50,649
然后我们将运行此算法，我们选择IV主要是想异或第一组文本m[0]
gonna run through the algorithm here, the
IV basically that we chose is gonna be XORed

13
00:00:50,649 --> 00:00:54,726
所得结果将使用密码分组链接加密成密文
to the first plain text
block. And then the result is gonna be

14
00:00:54,726 --> 00:00:58,857
并且输出第一分组的密文m[1]
encrypted using the block cipher and
output of the first block of the ciphertext.

15
00:00:58,857 --> 00:01:03,041
现在有一个链接部分，我们真正运用了第一分组密文
And now comes the chaining part
where we actually use the first block of

16
00:01:03,041 --> 00:01:07,436
来加密第二组明文
the ciphertext to kind of mask the second
block of the plaintext. So we XOR

17
00:01:07,436 --> 00:01:11,588
我们再将其和m[1]异或得到的密码即第二个密文m[2]
the two together and the encryption of
that becomes the second ciphertext block.

18
00:01:11,588 --> 00:01:15,535
就这样一个接一个，直到结束。得到的即为密码分组链接，你可以
And so on, and so on, and so forth. So
this is cIpher block chaining, you can

19
00:01:17,559 --> 00:01:19,584
发现每一个密码分组都链接在一起并且和下一个明文段异或为下一组密文
see that each cIpher block is chained and
XORed into the next plaintext

20
00:01:19,584 --> 00:01:24,118
最后得到的密文实质上就是IV，我们选择的初始IV
block, and the final ciphertext is going to
be essentially the IV, the initial IV

21
00:01:24,118 --> 00:01:30,024
与所有的密文组都相连。我应该说IV就是初始化向量
that we chose along with all the ciphertext blocks. I should say that IV stands

22
00:01:30,024 --> 00:01:35,795
我们将在术语中经常看见这个用法
for Initialization Vector. And we're going to
be seeing that term used quite a bit,

23
00:01:35,795 --> 00:01:39,717
每当我们需要随机选择一些信息在加密方案开始时
every time we need to pick something at
random at the beginning of the encryption

24
00:01:39,717 --> 00:01:43,543
典型的是我们将运用IV来代表初始化向量
scheme typically we'll call that an IV
for initialization vector. So you notice

25
00:01:43,543 --> 00:01:47,322
所以你应该注意密文会比明文稍长一些因为我们不得不
that the cIphertext is a little bit
longer than the plain text because we had

26
00:01:47,322 --> 00:01:51,149
在密文中包括初始化向量，它使得我们在加密时获有了随机信息
to include this IV in the cIphertexts
which basically captures the randomness

27
00:01:51,149 --> 00:01:55,450
所以第一个问题就是我们要如何解密CBC加密得到的结果
that was used during encryption. So the
first question is how do we decrypt the

28
00:01:55,450 --> 00:02:00,226
让我再提醒大家一下
results of CBC encryption, and so
let me remind you again that if when we

29
00:02:00,226 --> 00:02:04,470
当我们加密第一组信息时，我们将其异或上IV，
encrypt the first message block we
XOR it with the IV, encrypt the

30
00:02:04,470 --> 00:02:09,187
加密这个结果得到第一组密文。所以请问
result and that becomes the first ciphertext
block. So let me ask you how would

31
00:02:09,187 --> 00:02:13,667
你们应该怎么解密它呢？给出了第一组密文，你如何将它
you decrypt that? So given the first
ciphertext block, how would you recover

32
00:02:13,667 --> 00:02:17,915
复原成最开始的明文组？其实解密和加密是很类似的，
the original first plaintext block? So
decryption is actually very similar to

33
00:02:17,915 --> 00:02:21,660
在这我将画出解密的线路图，你可以大致上明白
encryption, here I wrote down the
decryption circuit, you can see basically

34
00:02:21,660 --> 00:02:25,961
两者几乎是相同的，只是异或过程出现在了底部而不是顶端
it's almost the same thing except the XOR
is on the bottom, instead of on the top, and

35
00:02:25,961 --> 00:02:29,605
你还可以明白本质上我们去除了作为解密过程一部分的IV
again you realize that essentially we
chopped off the IV as part of the

36
00:02:29,605 --> 00:02:33,754
并且我们仅仅输出了原始数据，IV就被解密算法给移除
decryption process and we only output the
original message back, the IV is dropped

37
00:02:33,754 --> 00:02:38,438
接下去的原理将表明
by the decryption algorithm. Okay, so the
following theorem is going to show that in

38
00:02:38,438 --> 00:02:43,762
通过初始向量 IV加密的CBC方式实际上就是所说的
fact CBC mode encryption with a random IV
is in fact semantically secure under a

39
00:02:43,762 --> 00:02:48,956
在选择明文攻击下的安全，更精确地说，
chosen plaintext attack, and so let's
take that more precisely, basically if we

40
00:02:48,956 --> 00:02:54,083
大体上我们从PRP开始，换言之，我们的分组密码E，定义在一个X空间中
start with a PRP, in other words, our
block cipher E, that is defined over a

41
00:02:54,083 --> 00:02:59,079
接着我们要通过加密算法Ecbc来结束，其中Ecbc含有
space X, then we are gonna to end up with
a encryption algorithm Ecbc that takes

42
00:02:59,079 --> 00:03:03,944
长度为L的信息，并且输出的密文长度为L+1
messages of length L and outputs
ciphertexts of length L+1. And then

43
00:03:03,944 --> 00:03:09,324
假设我们有一个敌人选择用q明文查询
suppose we have an adversary that makes q
chosen plaintext queries. Then we can

44
00:03:09,324 --> 00:03:15,024
接着我们就可以陈述安全的真实性，对每一个攻击Ecbc的敌人
state the following security fact, that
for every such adversary that's attacking

45
00:03:15,024 --> 00:03:20,184
相应都存在一个敌人来攻击REP，密码分组中
Ecbc, to exist an adversary that's
attacking the PRP, the block cipher, with

46
00:03:20,184 --> 00:03:24,926
在这两种算法中有如下关系，换言之，
the following relation between the two
algorithms, in other words, the advantage

47
00:03:24,926 --> 00:03:29,851
利用算法A对抗加密方案比算法B对抗原始REP加上一些噪点的优点少
of algorithm A against the encryption scheme
is less than the advantage of algorithm B

48
00:03:29,851 --> 00:03:35,080
所以让我照例解释一下这个定理
against the original PRP plus some noise
term. So let me interpret this theorem for

49
00:03:35,080 --> 00:03:40,005
本质上，E是一个安全的PRP
you as usual, so what this means is that
essentially since E is a secure PRP this

50
00:03:40,005 --> 00:03:45,051
并且这个值是可以忽略不计的，我们的目的是说明敌人A的优点也是可忽略的
quantity here is negligible, and our goal
is to say that adversary A's advantage is

51
00:03:45,051 --> 00:03:49,794
然而，我们应该避免说出这些是因为我们得到了这些额外的误差项
also negligible. However, here we are
prevented from saying that because we got

52
00:03:49,794 --> 00:03:54,630
通常说这个误差项证明了CBC是安全的
this extra error term. This is often
called an error term and to argue that CBC

53
00:03:54,630 --> 00:03:59,676
我们应该确保误差项是可以忽略不计的
is secure we have to make sure that the
error term is also negligible. Because if

54
00:03:59,676 --> 00:04:04,474
因为一旦右边的所有项是可忽略的，那么得到的总和是可忽略的
both of these terms on the right are
negligible, there sum is negligible and

55
00:04:04,474 --> 00:04:09,458
因此算法A在对抗Ecbc的优势也就忽略不计了
therefore the advantage of A against Ecbc
would also be negligible. So this says

56
00:04:09,458 --> 00:04:14,565
事实上Ecbc能够安全需要满足q的平方乘上L的平方
that in fact for Ecbc to be secure it has better
be the case that q squared L squared Is

57
00:04:14,565 --> 00:04:19,564
远小于X的值，在这里我提醒一下，q和L分别代表的是什么
much, much, much smaller than the value X,
so let me remind you what q and L are, so

58
00:04:19,564 --> 00:04:24,566
L是我们加密信息的长度，所以L如果假设为1000
L is simply the length of the messages
that we're encrypting. Okay, so L could be

59
00:04:24,566 --> 00:04:29,902
就说明我们加密的信息含有1000个AES分组
like say a 1000, which means that we are
encrypting messages that are at most 1000

60
00:04:29,902 --> 00:04:35,303
q是敌人在CPA攻击下可看到的加密分组的数目
AES blocks. q is the number of ciphertexts
that the adversary gets to see under the

61
00:04:35,303 --> 00:04:40,770
但是q实际上是我们运用关键字K来加密信息的次数
CPA attack, but in real life what q is, is
basically the number of times that we have

62
00:04:40,770 --> 00:04:46,041
换句话说，如果我们利用特别的AES来加密100条信息
used the key K to encrypt messages, in other
words if we use a particular AES key to

63
00:04:46,041 --> 00:04:51,052
Q的值即为100.这是因为敌人在密钥K下至多看到100条信息被加密
encrypt 100 messages, Q would be 100.
It is because the adversary would then see

64
00:04:51,052 --> 00:04:56,224
让我们看看这代表的真实意义
at most 100 messages encrypted under this key K. Okay
so lets see what this means in the real

65
00:04:56,224 --> 00:05:00,866
我已经根据定理改写了错误平衡
world. So here I've rewrote the error
balance from the theorem. And just to remind

66
00:05:00,866 --> 00:05:05,093
只是要提醒你们运用这些经过K加密的L长度的信息
you to use the messages encrypted with K
and L with the lengths of the messages and so

67
00:05:05,093 --> 00:05:09,370
并假设我们想要将敌人的优势降到低至2的32次方分之一
suppose we want the adversary's advantage
to be less than one over two to the thirty

68
00:05:09,370 --> 00:05:13,346
这就意味着误差项应该要小于2的32次方分之一
two. This means that the error term had
better be less than one over two to the

69
00:05:13,346 --> 00:05:17,853
让我们再看看AES所代表的含义
thirty two. Okay, so let's look at AES and see
what this mean. For AES, AES of course uses

70
00:05:17,853 --> 00:05:22,300
AES运用了128比特的数据分组，所以X的值应该为2的128次方
128 bit blocks, so X is going to be two
to the 128, the

71
00:05:22,300 --> 00:05:26,363
X的大小为2的128次方
size of X is going to be 2 to the
128, and if you

72
00:05:26,363 --> 00:05:30,865
将这个插入表达式中，所得到q和L的乘积
plug this into the expression you see that
basically the product q times L had

73
00:05:30,865 --> 00:05:35,477
将要小于2的48次方，这就意味着在我们运用特别的
better be less than two to the forty eight.
This means that after we use a particular

74
00:05:35,477 --> 00:05:40,014
密钥加密长度为2的48次方的AES分组时，我们需要改变密钥
key to encrypt 2 to the 48 AES
blocks we have to change the key. Okay, so

75
00:05:40,014 --> 00:05:46,966
实质上CBC在密钥被用来加密长度长于2的48次方AES分组时就不再安全
essentially CBC stops being secure after
the key is used to encrypt 2 to the 48  different AES blocks.

76
00:05:46,966 --> 00:05:49,572
它还不错的是，安全定理准确地告诉我们
So its
kinda nice that the security theorem tells

77
00:05:49,572 --> 00:05:54,499
多长的密钥可以被使用，你应该多频繁地更换密钥
you exactly how long the key can be used
and then how frequently, essentially, you have to

78
00:05:54,499 --> 00:05:59,575
有趣的是如果你运用类比的方法得到3DES
replace the key. Now interestingly if you
apply the same analogy to the 3DES it

79
00:05:59,575 --> 00:06:04,909
它实际上用了更短的分组，可能只有64比特，所以密钥需要更加频繁地更换
actually has a much shorter block, maybe
only 64 bits, you see the key has to be

80
00:06:04,909 --> 00:06:10,485
大概每一个65000DES组，你就需要生成一个新的密钥
changed much more frequently, maybe after every
65 thousand DES blocks, essentially you need to generate a new key. So

81
00:06:10,485 --> 00:06:15,275
所以这是说明为什么AES有更大的分组的一个理由，但是事实上
this is one of the reasons why AES has a
larger block size so that in fact modes

82
00:06:15,275 --> 00:06:20,240
像CBC这样的形式更安全并且一个密钥在必须更换前能用更长的时间
like CBC would be more secure and one can
use the keys for a longer period of time, before having

83
00:06:20,240 --> 00:06:24,796
这就意味着需要更换2的16次方块
to replace it. What this means is having
to replace two to the sixteen blocks,

84
00:06:24,796 --> 00:06:29,586
每一个分组是8字节，所以在你加密半字节的数据时
each block of course is 8 bytes, so
after you encrypt about half a megabyte of

85
00:06:29,586 --> 00:06:33,868
你需要更换DES密钥，它的标准是非常低的
data you would have to change the DES key
which is actually quite low. And you

86
00:06:33,868 --> 00:06:37,645
你会发现在你必须更换密钥前，利用AES你可以加密更多的数据
notice with AES you can encrypt quite a
bit more data before you have to change the

87
00:06:37,645 --> 00:06:42,604
所以我想告诉你一个很常见的错误，人们已经在使用初始向量 IV加密的CBC技术
key. So I want to warn you about a very
common mistake that people have made when

88
00:06:42,604 --> 00:06:47,627
攻击者们可以快速预测出
using CBC with a random IV. That is that
the minute that the attacker can predict

89
00:06:47,627 --> 00:06:52,712
你将运用来作为加密特殊信息的IV
the IV that you're going to be using for
encrypting a particular message decipher

90
00:06:52,712 --> 00:06:57,797
这Ecbc就不再具备CPA安全了。所以当你使用初始向量IV加密的CBC技术时，
this Ecbc is no longer CPA secure. So when
using CBC with a random IV like we've

91
00:06:57,797 --> 00:07:02,246
就像我们刚刚展示的，IV的不可预知性是至关重要的。来看一个攻击案例
just shown It's crucial that the IV is not
predictable. But lets see an attack. So

92
00:07:02,246 --> 00:07:06,282
假设碰巧给出了信息中特殊的加密方式
suppose it so happens that given a
particular encryption in a message that

93
00:07:06,282 --> 00:07:10,695
攻击者可以预测出用作下一条信息的IV
attacker can actually predict that IV that
will be used for the next message. Well

94
00:07:10,695 --> 00:07:14,839
这就表明了事实上这个结果系统不是CPA安全
let's show that in fact the resulting
system is not CPA secure. So the first thing the

95
00:07:14,839 --> 00:07:19,197
所以敌手要做的第一件事是请求一组信息的加密
adversary is going to do is, he is going
to ask for the encryption of a one block

96
00:07:19,197 --> 00:07:23,449
特别是被译成0的一组信息
message. In particular that one block is
going to be zero. So what the adversary

97
00:07:23,449 --> 00:07:27,592
所以敌手得到的是一组信息的加密，就是加密消息为零异或上IV
gets back is the encryption of one
block, which namely is the encryption of

98
00:07:27,592 --> 00:07:31,748
当然，敌手同时也获得了IV
the message namely zero, XOR the IV. Okay
and of course the adversary also gets the

99
00:07:31,748 --> 00:07:35,877
所以现在敌手通过假设可以预测出用来做下一次加密的IV
IV. Okay so now the adversary by
assumption can predict the IV that's gonna

100
00:07:35,877 --> 00:07:40,196
我们称这个IV为良好的IV
be used for the next encryption. Okay so
let's say that IV is called, well IV. So

101
00:07:40,196 --> 00:07:44,460
所以接下来敌手将要面对语义安全挑战并且信息m0
next the adversary is going to issue his
semantic security challenge and the

102
00:07:44,460 --> 00:07:49,167
将会预测出IV异或IV1的值，这个值会用于在加密c1
message m0 is going to be the predicted IV
XOR IV1 which was used in the encryption

103
00:07:49,167 --> 00:07:53,707
信息m1就会变成其他信息，但这并不影响它的意义
of c1. And the, the message of m1 is just
going to be some other message, it doesn't

104
00:07:53,707 --> 00:07:58,248
就让我们来看看当敌手得到语义安全挑战的结果时会发生什么
really matter what it is. So now let's see
what happens when the adversary receives

105
00:07:58,248 --> 00:08:02,346
它将得到m0或m1的密文
the result of the semantic security
challenge. Well, he is going to get the

106
00:08:02,346 --> 00:08:06,470
当敌手收到m0的密文时
encryption of m0 or m1. So when the
adversary receives the encryption of m0,

107
00:08:06,470 --> 00:08:10,800
告诉我被加密成密文c的真正的明文是什么
tell me what is the actual plain text
that is encrypted in the ciphertext c?

108
00:08:11,260 --> 00:08:17,368
它就是被加密的信息异或上IV异或上IV1
Well so the answer is that what is
actually encrypted is the message which is

109
00:08:17,368 --> 00:08:22,826
异或上的的IV是加密信息时用到的IV
IV XOR IV1 XOR the IV that's used to
encrypt that message which happens to be

110
00:08:22,826 --> 00:08:28,301
这当然就是IV1.所以当敌手得到了m0的加密时
IV and this of course is IV1. So when the
adversary receives the encryption of m0,

111
00:08:28,301 --> 00:08:33,167
他实际得到是分组密码算法中的IV1
he is actually receiving the block cipher
encryption of IV1. And lo and behold,

112
00:08:33,167 --> 00:08:38,440
你瞧，注意到他已经从选择明文查询中得到值
you'll notice that he already has that
value from his chosen plaintext query.

113
00:08:38,440 --> 00:08:42,800
之后，当敌手得到信息m1的加密时，他就得到了
And then, when he is receiving the
encryption of message m1, he just received

114
00:08:42,800 --> 00:08:47,825
一个对信息m1的常规CBC加密。所以我们发现他有一个简单的方式
a normal CBC encryption of the message m1.
So you realize that now he has a simple

115
00:08:47,825 --> 00:08:53,057
来打破这个方案时，他只需要问，
way of breaking the scheme, namely what
he'll do is he'll say, he's gonna ask, "Is the second

116
00:08:53,057 --> 00:08:58,354
“第二组的密文c和我通过CPA查询接收到的值相等吗？”
block of the ciphertext c equal to the
value that I received in my CPA query?" If

117
00:08:58,354 --> 00:09:03,843
如果相等，我会说我得到了m0的加密，否则我会说我收到了m1的加密
so I'll say that I received the encryption
of m0, otherwise I'll say that I received

118
00:09:03,843 --> 00:09:09,209
所以它真正的测试得到的是c1与第二组的c相关
the encryption of m1. So really his test
is c1 he refers to the second block

119
00:09:09,209 --> 00:09:14,441
c11与c1的第二组相关，如果这两组是相等的，就得到了零
of c and c11 refers to the second block of
c1, if the two are equal he says zero,

120
00:09:14,441 --> 00:09:20,095
否则就是1.所以这个敌手的优势是要得到1，并且
otherwise he says one. So the advantage of
this adversary is going to be 1 and as a

121
00:09:20,095 --> 00:09:25,650
结果他完全打破了CBC加密的CPA安全。所以这里学到的是
result, he completely breaks CPA security
of this CBC encryption. So the lesson here

122
00:09:25,650 --> 00:09:30,334
如果IV是可预测的，那么事实上就没有了CPA安全
is, if the IV is predictable then, in
fact, there is no CPA security and

123
00:09:30,334 --> 00:09:35,621
并且不幸的是，这事实上是一个很常见的错误
unfortunately, this is actually a very
common mistake in practice. In particular

124
00:09:35,621 --> 00:09:41,339
特别是在SSL协议和TLS 1.1中，得到的IV作为记录数I
even in SSL protocol and in TLS 1.1, it turns
out that IV for record number I is in fact

125
00:09:41,339 --> 00:09:46,363
就是最后密文组的记录I-1.这意味着
the last ciphertext block of record I-1. That means that exactly given

126
00:09:46,363 --> 00:09:51,579
给定了密文的记录数I-1，敌手就能清楚地知道被用来做记录I的IV是什么
the encryption of record I-1, the
adversary knows exactly what IV is going

127
00:09:51,579 --> 00:09:56,031
最近，就在上个夏天
to be used as record number I. Very
recently, just last summer, this was

128
00:09:56,031 --> 00:10:00,737
就有一个对SSL具有毁灭性攻击的事情
actually converted into a pretty
devastating attack on SSL. We'll describe

129
00:10:00,737 --> 00:10:06,016
我们将在对SSL具体解释时，来描述这个攻击，但是现在我只是想确定
that attack once we talk about SSL in more
detail, but for now I wanted to make sure

130
00:10:06,016 --> 00:10:12,371
能理解当你使用CBC加密时，至关重要的是IV是随机的
you understand than when you use CBC encryption,
its absolutely crucial that the IV be random.

131
00:10:12,371 --> 00:10:16,372
所以现在我将给你们展示基于随机数的CBC加密
Okay, so now I going to show you the nonce based version of CBC encryption

132
00:10:16,372 --> 00:10:21,443
在这个形式中，IV被非随机的特定值取代
So in this mode the IV is replaced by non random but unique nonce

133
00:10:21,443 --> 00:10:23,928
比如数1,2,3,4,5,都可以用来作为一个随机值，现在，这种模式的吸引力
for example the numbers 1,2,3,4,5, could all be used as a nonce, and now, the appeal of this mode

134
00:10:23,928 --> 00:10:25,246
是如果对方真的知道这个值是多少
is that if the recipient actually knows
what the nonce is supposed to be

135
00:10:25,246 --> 00:10:25,880
就没有理由再包含这个值到密文中，在这种情况下
then there's no reason to include the nonce
in the ciphertext, in which case, the ciphertext

136
00:10:25,880 --> 00:10:26,197
密文就和明文的长度一致了，不像使用初始向量 IV的CBC加密
is exactly the same length as the plaintext,
unlike CBC with the random IV,

137
00:10:26,197 --> 00:10:26,276
我们需要扩大密文的长度来容纳IV，如果这个值是对方是已知的
where we had to expand the ciphertext to include the IV, here, if the nonce is already known to the recipient,

138
00:10:26,276 --> 00:10:26,315
就没必要再包含仅密文中，密文就和明文的长度相等了
there's no reason to include it in the ciphertext, and
the ciphertext is exactly the same length as the plaintext.

139
00:10:26,315 --> 00:10:26,335
所以应该完美使用随机但独特的值。但是，应该至关重要需要知道的是
So it's perfectly fine to use a non-random but unique nonce. However, it's absolutely crucial to know that,

140
00:10:26,335 --> 00:10:26,345
如果你这么做了，那么在你使用这个值于CBC串前你还需要做一步
if you do this, there's one more step that you have
to do before you use the nonce in the CBC chain.

141
00:10:26,345 --> 00:10:26,355
特别的，在这个形式中我们将使用两个独立的密钥，k和k1
In particular, in this mode now we're going to
be using two independent keys, k and k1.

142
00:10:26,355 --> 00:10:26,434
密钥k是用来加密个人信息分组
The key k is, as before, going to be used to
encrypt the individual message blocks,

143
00:10:26,434 --> 00:10:26,474
然而，密钥k1是用来加密非随机特殊值的
However, this key k1 is going to be used to
encrypt the non-random but unique nonce,

144
00:10:26,474 --> 00:10:26,494
所以输出是有随机IV的，随后才用于CBC串中
so that the output is going to be a random IV,
which is then used in the CBC chain.

145
00:10:26,494 --> 00:10:26,504
所以这个额外的步骤，用密钥k1加密非随机特殊值，是至关重要的
So this extra step here, encrypting the nonce
with the key k1, is absolutely crucial.

146
00:10:26,504 --> 00:10:26,509
Without it, CBC mode encryption would not be secure.

147
00:10:26,504 --> 00:10:26,509
如果没有这一步，CBC加密将不再安全

148
00:10:26,509 --> 00:10:26,514
但是如果它是一个计数器
However it if is going to be a counter you

149
00:10:26,514 --> 00:10:32,046
你还需要多做一步。在CBC加密前，你应该
need to do one more step. Before actually
encryption CBC and in particular you have

150
00:10:32,046 --> 00:10:37,380
加密这些注释来获得IV用于加密中
to actually encrypt the notes to obtain
the IV that will actually be used for

151
00:10:37,380 --> 00:10:42,919
CBC中的注释和随机IV式类似的，不同之处在于
encryption. The notes on CBC is similar to
a random IV, the difference is that the

152
00:10:42,919 --> 00:10:48,047
注释应首先加密得到的结果IV才用与CBC加密中
notes is first encrypted and the results
is that the IV is used in the CBC

153
00:10:48,047 --> 00:10:52,728
现在这种模式下的好处是Nance不再需要
encryption Now the beauty of this mode is
that the Nance doesn't necessarily have to

154
00:10:52,728 --> 00:10:56,975
包含在密文中。它仅仅在那里如果它的未知
be included in the cipher text. It only
needs to be in there if its unknowns are

155
00:10:56,975 --> 00:11:01,116
是解密但是如果解密中突然知道了计数的值
the decrypter but it if the decrypter
happens to already know the value of the

156
00:11:01,116 --> 00:11:05,310
通过一切其他方法，密文也仅仅和明文一样大
counter by some other means then in fact
the cipher text is only as big as the

157
00:11:05,310 --> 00:11:09,291
并没有额外的值在密文中传输
plain text. There's no extra value
transmitted in the cipher text. And again,

158
00:11:09,291 --> 00:11:13,591
我需要提醒，当你利用非间隔加密时，至关重要的是
I warn that when you're using non spaced
encryption, it's absolutely crucial that

159
00:11:13,591 --> 00:11:17,679
Nance分出的密钥是仅仅用作一条信息，所以对于每一条信息
the key common Nance spare is only used
for one message so for every message,

160
00:11:17,679 --> 00:11:22,028
要么是Nance改变或者是密钥改变。所以强调一下这个事实
either the Nance has changed or the key
has changed. Okay, so here emphasize the

161
00:11:22,028 --> 00:11:26,499
你需要做额外的加密步骤在用到Nance之前
fact that you need to do this extra
encryption step before actual using the

162
00:11:26,499 --> 00:11:31,088
这是一个常见的错误，真正的在实践中被遗忘
Nance. This is very common mistake that
actually forgotten in practice and for

163
00:11:31,088 --> 00:11:35,795
比如传输层安全，当没有做完，结果有一个在传输层安全中重要的对CBC加密攻击
example in TLS, this was not done and as a
result there was a significant attack

164
00:11:35,795 --> 00:11:40,282
记住这个理由，这是非常重要的
against CBC encryption in TLS. Remember
the reason that this is so important to

165
00:11:40,282 --> 00:11:44,950
了解事实上许多加密api被设置来几乎故意误导了用户错误地使用CBC
know is that in fact many crypto APIs are
set up to almost deliberately mislead the

166
00:11:44,950 --> 00:11:49,451
所以看CBC如何实现的
user to using CBC incorrectly. So let's
look to see how CBC implemented inside of

167
00:11:49,451 --> 00:11:53,840
而不是开放的SSL。这里是函数的参数。基本上
open SSL. So here are the arguments of the
function. Basically this is the plain

168
00:11:53,840 --> 00:11:58,119
这是密文会写入的地方
text, this is the place where the cipher
text will get written to. This is the

169
00:11:58,119 --> 00:12:02,760
这是明文的长度，这是一个准确的密钥，最后有一个论点是
length of the plain text. This is a, a Yes
key Finally there is an argument here that

170
00:12:02,760 --> 00:12:06,438
是否要加密或者解密。我想指出这里最重要的参数
says whether you are crypting or
decrypting. And the most important

171
00:12:06,438 --> 00:12:10,884
是真实的IV值，不幸的是
parameter that I wanted to point out here
is the actual IV and unfortunately, the

172
00:12:10,884 --> 00:12:15,330
用户被要求来提供IV，函数在CBC加密机制中使用IV
user is asked to supply this IV and the
function uses the IV directly in the CBC

173
00:12:15,330 --> 00:12:19,831
它在使用前没有对IV加密
encryption mechanism. It doesn't encrypt
the IV before using it and as a result, if

174
00:12:19,831 --> 00:12:24,332
如果你们曾经调用过使用非随机IV的函数，结果加密系统就没有了CPA安全
you ever call this function using a non
random IV, the resulting encryption system

175
00:12:24,332 --> 00:12:28,816
所以有一点非常重要需要知道，调用这样的函数
won't be CPA secure. Okay, so it's very
important to know that when calling

176
00:12:28,816 --> 00:12:33,960
CBC加密或者开放的SSL不管是提供一个真实的随机IV
functions like this. Cbc encryption or
open SSL either supply a truly random IV

177
00:12:33,960 --> 00:12:38,836
或是如果你想用IV来做计数器，你得用AAS来加密计数器
or if you want the IV to be a counter than
you have to encrypt a counter using AAS

178
00:12:38,836 --> 00:12:43,668
在你使用CBC进行加密前
before you actually call a CBC encrypt and
you have to that yourself. So again, it's

179
00:12:43,668 --> 00:12:48,340
非常重要的是，程序员要知道它需要完成
very important that the programmer knows
that it needs to be done otherwise the CBC

180
00:12:48,340 --> 00:12:52,456
否则CBC加密就是不安全的。最后一个关于CBC的技术性问题是
encryption is insecure. One last
technicality about CBC is what to do when

181
00:12:52,456 --> 00:12:57,183
当信息长度不是分组长度时怎么做？
the message is not a multiple of the block
cipher block length? That is what do we do

182
00:12:57,183 --> 00:13:01,689
那就是我们在最后的信息块比AES的分组长度小时应该怎么做
if the last message block is shorter than
the block length of AES, for example? So

183
00:13:01,689 --> 00:13:06,281
所以最后的一组信息会少于16比特。答案，是如果我们在最后分组中添加一些比特
the last message block is less than
sixteen bytes. And the answer is if we add

184
00:13:06,281 --> 00:13:11,586
让它变成16比特，和AES分组一样长
a pad to the last block so it becomes as
long as sixteen bytes, as long as the AES

185
00:13:11,586 --> 00:13:16,633
如果在加密时打算移除垫
block size. And this pad, of course, if
going to be removed during encryption. So

186
00:13:16,633 --> 00:13:21,873
有一个典型的途径，即在TLS中用过的途径
here is a typical path, this is the path
that is used in TLS. Basically a pad with

187
00:13:21,873 --> 00:13:26,919
一项由N比特组成，基本上你需要写入数字N，代表N次
N bytes then essentially what you do is
you write the number N, N times. So for

188
00:13:26,919 --> 00:13:32,036
比如你垫五字节，将字符串55555垫入
example if you pad with five bytes, you
pad with the string 555555. So five bytes

189
00:13:32,036 --> 00:13:37,175
得到每一个字节的值都是5.对这个垫的关键基本上是
where each byte is the value five. And the
key thing about this pad is basically when

190
00:13:37,175 --> 00:13:42,012
当解密者收到消息时，他需要看到最后一个字节的分组的值
the decrypter receives the message, what
he does is he looks at the last byte of

191
00:13:42,012 --> 00:13:46,970
假设这个值是5，那么他只需移除了最后5比特的信息
the last block. So suppose that value is
five, then he simply removes the last five

192
00:13:46,970 --> 00:13:51,818
现在问题来了，当信息是16比特不含所需的垫时要怎么办？
bytes of the message. Now the question is
what do we do if in fact the message is a

193
00:13:51,818 --> 00:13:56,262
如果我们完全不垫入
multiple of sixteen bytes so in fact no
pad is needed? If we don't pad at all,

194
00:13:56,262 --> 00:14:00,476
那就会有问题，因为解密者要找最后一个字节的分组
well that's a problem because the
decrypter is going to look at the very

195
00:14:00,476 --> 00:14:05,267
分组中不含真正所需的信息
last byte of the last block which is not
part of the actual message and he's going

196
00:14:05,267 --> 00:14:10,000
他需要在明文中将其移除。所以这也会是一个问题
to remove that many bytes from the plain
text. So that actually would be a problem.

197
00:14:10,000 --> 00:14:15,363
解决的方法是，当没有所需要的垫时
So the solution is, if in fact there is no
pad that's needed, nevertheless we still

198
00:14:15,363 --> 00:14:20,662
我们仍然需要加入冗余比特。当我们添加完时就会有一个分组
have to add a dummy block. And since we
add the dummy block this would be a block

199
00:14:20,662 --> 00:14:25,830
在16比特中的每一比特都包含16
that's basically contains sixteen bytes
each one containing the number sixteen.

200
00:14:25,830 --> 00:14:30,042
所以我们加入了16个挤压垫，当解密者需要解密时
Okay, so we add essentially sixteen dummy
blocks. The decrypter, that when he's

201
00:14:30,042 --> 00:14:34,473
他找到最后一组的最后一个字节，得到值为16
decrypting, he looks at the last byte of
the last block, he sees that the value is

202
00:14:34,473 --> 00:14:38,823
那么他就移除这整个分组。那么剩下的就全是明文了
sixteen, therefore he removes the entire
block. And whatever's left is the actual

203
00:14:38,823 --> 00:14:42,975
非常不幸的是，实际上你用CBC所加密的信息都是短信息
plain text. So it's a bit unfortunate that
in fact if you're encrypting short

204
00:14:42,975 --> 00:14:47,019
信息可能仅含32比特
messages with CBC and the messages happen
to be, say, 32 bytes, so they are a

205
00:14:47,019 --> 00:14:51,387
如果是16字节的倍数，你就得多加入一个分组
multiple of sixteen bytes, then you have
to add one more block and make all these

206
00:14:51,387 --> 00:14:55,108
使得密文变成48比特仅仅为了容纳CBC的垫
ciphertexts be 48 bytes just to
accommodate the CBC padding. I should

207
00:14:55,108 --> 00:14:59,584
我应该说明，存在一种CBC的变体，叫做CBC的明文偷窃
mention there's a variant of CBC called
CBC with ciphertext stealing that actually

208
00:14:59,584 --> 00:15:03,790
能够避免这类问题，但是我不打算在这里详细说明了
avoids this problem, but I'm not gonna
describe that here. If you're interested

209
00:15:03,790 --> 00:15:07,907
如果你对这个感兴趣的话，可以上网查查。我们对CBC的讨论到这里就结束了
you can look that up online. Okay, so
that's the end of our discussion of CBC

210
00:15:07,907 --> 00:15:12,198
下一节我们即将学习如何运用计数模式来加密
and in the next segment we'll see how to
use counter modes to encrypt multiple

211
00:15:12,198 --> 00:15:13,720
成倍的信息，但只用一个密钥。
messages using a single key.

