1
00:00:00,000 --> 00:00:03,831
So as our first example lets look at a
very simple way of using a block cipher

2
00:00:00,000 --> 00:00:03,831
那么作为我们的第一个例子，让我们看一个十分简单的使用分组密码

3
00:00:03,831 --> 00:00:07,905
for encryption. In particular we'll see
how to use a block cipher with a one time

4
00:00:03,831 --> 00:00:07,905
的加密。特别的，我们看看怎么使用具有一次性密钥的分组密码

5
00:00:07,905 --> 00:00:12,108
key. So in this segment we're just gonna
use the block cipher to encrypt using keys

6
00:00:07,905 --> 00:00:12,108
所以在这一节我们将使用一次性密钥的分组密码来加密

7
00:00:12,108 --> 00:00:15,907
that are used one time. In other words,
all the adversary gets to see is one ciphertext,

8
00:00:12,108 --> 00:00:15,907
换句话说，攻击者看到的将仅仅是一份密文

9
00:00:15,907 --> 00:00:19,600
and its goal is to break semantic
security of that ciphertext. Now, in the

10
00:00:15,907 --> 00:00:19,600
他的目标将是破解密文的语义。现在，

11
00:00:19,600 --> 00:00:23,339
next segment, we're going to turn into
more, interesting applications of block

12
00:00:19,600 --> 00:00:23,339
在下一段中，我们将了解更有意思的分组密码的应用

13
00:00:23,339 --> 00:00:26,939
ciphers and we're going to see how to
encrypt using keys that are used many,

14
00:00:23,339 --> 00:00:26,939
以及如何使用密钥对多组信息进行多次加密

15
00:00:26,939 --> 00:00:30,538
many times to encrypt many messages. So
before we start, I want to mention that

16
00:00:26,939 --> 00:00:30,538
那么在我们开始之前，我想要提的一点是

17
00:00:30,538 --> 00:00:34,464
there's like a classic mistake in using a
block cipher. Unfortunately, there are some

18
00:00:30,538 --> 00:00:34,464
一个使用分组密码的经典错误。不幸的是，有许多产品

19
00:00:34,464 --> 00:00:38,251
products that actually work this way, and
they are badly broken, so I want to make

20
00:00:34,464 --> 00:00:38,251
正是这么工作的，它们被完全的破解了，所以我想要确信

21
00:00:38,251 --> 00:00:42,130
sure that none of you guys actually make
this mistake. So this mode of operation is

22
00:00:38,251 --> 00:00:42,130
你们中没人会犯这个错误。这种操作模式

23
00:00:42,130 --> 00:00:46,003
called an electronic code book. And it
works as follows: it's the first thing

24
00:00:42,130 --> 00:00:46,003
被称为电子密码本。它如下工作：

25
00:00:48,211 --> 00:00:50,420
that comes to mind when you want to use a
block cipher for encryption. What we do is

26
00:00:48,211 --> 00:00:50,420
它将是你想用分组密码来加密时首先想到的。我们

27
00:00:50,420 --> 00:00:54,568
we take our message, we break it into
blocks, each block as big as the block's

28
00:00:50,420 --> 00:00:54,568
拿到我们的信息并将之分块，每一块都和加密块一样大小

29
00:00:54,568 --> 00:00:58,931
cipher block. So in the case of AES, we
would be breaking our message into sixteen

30
00:00:54,568 --> 00:00:58,931
那么在AES的例子中，我们将把我们的信息分成16字节的块

31
00:00:58,931 --> 00:01:03,099
byte blocks. And then we encrypt each
block separately. So this mode is often

32
00:00:58,931 --> 00:01:03,099
然后分别加密我们的每一块。这种模式常被称为

33
00:01:03,099 --> 00:01:06,993
called electronic codebook. And,
unfortunately, it's terribly insecure

34
00:01:03,099 --> 00:01:06,993
电子代码本。不幸的是这是很不安全的

35
00:01:06,993 --> 00:01:11,460
because you realize if two blocks are
equal, for example here, these two blocks

36
00:01:06,993 --> 00:01:11,460
因为你意识到如果两块是相同的，比如

37
00:01:11,460 --> 00:01:16,099
happen to be equal, then necessarily the
resulting ciphertext is also going to be equal.

38
00:01:11,460 --> 00:01:16,099
有两个块恰好是相同的，那么必然导致密文也是相同的

39
00:01:16,099 --> 00:01:20,279
So an attacker who looks at the
ciphertext, even though he might not know

40
00:01:16,099 --> 00:01:20,279
那么一个分析密文的攻击者，即使他可能不知道

41
00:01:20,279 --> 00:01:24,590
what's actually written in these blocks,
we'll know that these two blocks are

42
00:01:20,279 --> 00:01:24,590
这些块到底写了什么，但会知道这些块是相同的

43
00:01:24,590 --> 00:01:28,523
equal. And as a result, he learned
something about the plaintext that he

44
00:01:24,590 --> 00:01:28,523
那么，结果就是他知道了关于明文的一些他不该知道的信息

45
00:01:28,523 --> 00:01:33,002
shouldn't have learned. And if this isn't
clear enough for you abstractly, the best

46
00:01:28,523 --> 00:01:33,002
如果这么讲不够清楚，最好的解释是

47
00:01:33,002 --> 00:01:37,590
to explain this is using a picture. And so
here's this guy here that, you know, has

48
00:01:33,002 --> 00:01:37,590
用一副图。这有一个家伙，你知道他有

49
00:01:37,590 --> 00:01:42,361
this really dark black hair. And when we
encrypt. This image, this bitmap image

50
00:01:37,590 --> 00:01:42,361
深黑色的头发。那么我们用电子密码本模式

51
00:01:42,361 --> 00:01:47,056
using the electronic code book mode. You
see that his hair, that contains lots of

52
00:01:42,361 --> 00:01:47,056
加密这幅位图。你看他占大量空间的头发

53
00:01:47,056 --> 00:01:50,932
ones. Basically always gets encrypted the
same way, so that his silhouette,

54
00:01:47,056 --> 00:01:50,932
基本上总是被用相同的方式加密，这是他的剪影

55
00:01:50,932 --> 00:01:54,935
actually, is completely visible, even in
the encrypted data. Okay, so this is a

56
00:01:50,932 --> 00:01:54,935
事实上，这是完全可见的，即使是在加密的数据中。所以

57
00:01:54,935 --> 00:01:59,149
nice example of how the electronic code
book mode can actually leak information

58
00:01:54,935 --> 00:01:59,149
这是一个电子密码本可能泄露给攻击者关于

59
00:01:59,149 --> 00:02:03,311
about the plaintext that could tell
something to the attacker. So the question

60
00:01:59,149 --> 00:02:03,311
明文的信息的例子。那么问题是

61
00:02:03,311 --> 00:02:07,367
is, how to correctly use block ciphers to
encrypt long messages. And so, I just

62
00:02:03,311 --> 00:02:07,367
如何正确的用分组密码来加密长的信息。那么，我将

63
00:02:07,367 --> 00:02:11,159
want to briefly remind you of the notion
we're trying to achieve, which is

64
00:02:07,367 --> 00:02:11,159
简单的提醒你我们将要实现的想法，就是简单

65
00:02:11,159 --> 00:02:15,268
basically semantic security using a one
time key. So the adversary outputs two

66
00:02:11,159 --> 00:02:15,268
的用一次性密钥保证语义安全。那么攻击者

67
00:02:15,268 --> 00:02:18,969
messages, m0 and m1, and then he gets
either the encryption of m0 or the

68
00:02:15,268 --> 00:02:18,969
输出两组信息，M0和M1，那么当他将得到M1或M2的加密。

69
00:02:18,969 --> 00:02:22,777
encryption of m1, these are two different
experiments. And then our goal is to say

70
00:02:18,969 --> 00:02:22,777
有两组不同实验，我们的目标是确定

71
00:02:22,777 --> 00:02:26,256
that the adversary can't distinguish
between these two experiments. So you

72
00:02:22,777 --> 00:02:26,256
攻击者不能将两者区分开来，

73
00:02:26,256 --> 00:02:30,283
can't distinguish the encryption of m0
from the encryption of m1. And the reason

74
00:02:26,256 --> 00:02:30,283
也就是说，你不能区分M0的加密和M1的加密。

75
00:02:30,283 --> 00:02:34,619
we call this security for a one time key
is that the key is only used to encrypt a

76
00:02:30,283 --> 00:02:34,619
我们认为一次性密钥是安全的原因是这个密钥只被用来加密

77
00:02:34,619 --> 00:02:38,485
single message. And as a result, the
adversary will ever only see one ciphertext

78
00:02:34,619 --> 00:02:38,485
一组信息。于是，攻击者可能只会见到一份

79
00:02:38,485 --> 00:02:42,716
encrypted using this key. Okay, so
the first thing we want to show is that in

80
00:02:38,485 --> 00:02:42,716
用了这组密钥的密文。好了，我们想要展示的第一件事是

81
00:02:42,716 --> 00:02:46,269
fact the mode we just looked at,
electronic code book, in fact, is not

82
00:02:42,716 --> 00:02:46,269
事实上我们刚看的模式，电子密码本，事实上不是语义安全的。

83
00:02:46,269 --> 00:02:50,500
semantically secure. And this is true as
long as you're encrypting more than one

84
00:02:46,269 --> 00:02:50,500
只要你加密不止一个块他就不是语义安全的

85
00:02:50,500 --> 00:02:54,575
block. So here's an example. Suppose we
encrypt two blocks using a block cipher.

86
00:02:50,500 --> 00:02:54,575
这有一个例子。假设我们用分组密钥加密两块

87
00:02:54,575 --> 00:02:58,702
Let me show you that in fact electronic
code book will not be secure. So here's

88
00:02:54,575 --> 00:02:58,702
我来向你们证明电子密码本实际上是不安全的

89
00:02:58,702 --> 00:03:03,525
what we would do. So we're the adversary.
So we would output two messages, m0 and

90
00:02:58,702 --> 00:03:03,525
我们将这么做。假设我们是攻击者。我们输出两个信息，m0和m1

91
00:03:03,525 --> 00:03:07,806
m1, where, in one message, the blocks are
distinct, and in the other message, the

92
00:03:03,525 --> 00:03:07,806
在一个信息中，分组是不同的，另一个中，分组是相同的。

93
00:03:07,806 --> 00:03:12,203
blocks are the same. The two blocks are
equal to one another. Well, so what is the

94
00:03:07,806 --> 00:03:12,203
这两个分组相同，那么挑战者要如何做？

95
00:03:12,203 --> 00:03:16,270
challenger gonna do? The challenger's
going to encrypt either m0 or m1.

96
00:03:12,203 --> 00:03:16,270
挑战者将要加密m0或m1

97
00:03:16,270 --> 00:03:20,228
Either way we are gonna get two blocks
back. So the ciphertext actually contains two

98
00:03:16,270 --> 00:03:20,228
两种情况我么都得到两个分组，那么密文包含两个分组

99
00:03:20,228 --> 00:03:23,886
blocks. The first block is going to be an
encryption of the word "Hello" and the

100
00:03:20,228 --> 00:03:23,886
第一个分组是单词“Hello”的加密

101
00:03:23,886 --> 00:03:27,695
second block is gonna be either an
encryption of the word "Hello" or the word

102
00:03:23,886 --> 00:03:27,695
第二个分组是“Hello”或“World”的加密

103
00:03:27,695 --> 00:03:31,854
"World". And if the two ciphertext blocks
are the same then the adversary knows that

104
00:03:27,695 --> 00:03:31,854
如果这两个密文分组一样，那么攻击者知道

105
00:03:31,854 --> 00:03:35,963
he received an encryption of the message
"Hello Hello" and as a difference he knows

106
00:03:31,854 --> 00:03:35,963
他收到是“Hello Hello”的加密

107
00:03:35,963 --> 00:03:39,851
that he received encryption of the
message "Hello World". Okay? So, he just

108
00:03:35,963 --> 00:03:39,851
如果不一样，他知道他收到是“Hello World”的加密。对吧

109
00:03:39,851 --> 00:03:44,311
follows a simple strategy here. And if you
think about it for a second, you'll see

110
00:03:39,851 --> 00:03:44,311
所以，攻击者遵循一个简单的策略，大家想一想，就可以知道他的优势是什么

111
00:03:44,311 --> 00:03:48,300
what his advantage is. So, what is the
advantage? Well, this adversary when he

112
00:03:44,311 --> 00:03:48,300
那么优势是什么呢？

113
00:03:48,300 --> 00:03:52,003
received an encryption of the message
m1 he will always output 0.

114
00:03:48,300 --> 00:03:52,003
攻击者总在他接收到m1的加密时输出0

115
00:03:52,003 --> 00:03:55,573
and when he receives an encryption of
the message m0 it will always output 1.

116
00:03:52,003 --> 00:03:55,573
总是在他接收到m0的加密时输出1

117
00:03:55,573 --> 00:03:58,603
And because of that the advantage,
basically, is 1, which means that the

118
00:03:55,573 --> 00:03:58,603
由于优势是1，也就是说这种机制是不安全的

119
00:03:58,603 --> 00:04:02,492
scheme is not secure, which again shows you
the electronic code book is not

120
00:03:58,603 --> 00:04:02,492
也再次表明，电子密码本不是语义安全的

121
00:04:02,492 --> 00:04:07,195
semantically secure and should never ever
be used to encrypt messages that are more

122
00:04:02,492 --> 00:04:07,195
永远不应被用来加密长于一个分组的信息

123
00:04:07,195 --> 00:04:12,293
than one block long. So, what should we
do? Well, so here's a simple example. What

124
00:04:07,195 --> 00:04:12,293
那么我们该怎么办？有个简单的例子

125
00:04:12,293 --> 00:04:15,813
we could do is we could use what's called
a deterministic counter mode. So in a

126
00:04:12,293 --> 00:04:15,813
我们可以使用一个确定的计数器模式

127
00:04:15,813 --> 00:04:19,287
deterministic counter mode, basically we
build a stream cipher out of the block

128
00:04:15,813 --> 00:04:19,287
在确定的计数器模式下，我们主要用分组密码构建一个流密码

129
00:04:19,287 --> 00:04:24,608
cipher. So suppose we have a PRF, F. So
again you should think of AES when I say

130
00:04:19,287 --> 00:04:24,608
假设我们有一个伪随机函数(PRF) f。我说PRF时大家应该可以想到AES,

131
00:04:24,608 --> 00:04:29,143
that. So AES is also a secure PRF. And
what we'll do is, basically, we'll evaluate

132
00:04:24,608 --> 00:04:29,143
AES也是一个安全的PRF。我们要做的基本上就是

133
00:04:29,143 --> 00:04:35,539
AES at the point zero, at the point one,
at the point two, up to the point L. This

134
00:04:29,143 --> 00:04:35,539
计算AES在点0处的值，在点1处的值，在点2处的值，一直到点L

135
00:04:35,539 --> 00:04:40,766
will generate a pseudo random pad. And I
will XOR that with all the message

136
00:04:35,539 --> 00:04:40,766
这会产生一个伪随机密码本，我会将他和所有明文分组进行异或

137
00:04:40,766 --> 00:04:45,102
blocks and recover the ciphertext as a
result. Okay, so really this is just a

138
00:04:40,766 --> 00:04:45,102
得到密文作为结果

139
00:04:45,102 --> 00:04:49,561
stream cipher that's built out of a PRF,
like AES and triple DES, and it's a simple

140
00:04:45,102 --> 00:04:49,561
这其实只是一个由PRF构造的流密码。同AES和3DES一样，是个简单的加密方法

141
00:04:49,561 --> 00:04:53,630
way to do encryption. I wanted to just
very quickly show you the security

142
00:04:49,561 --> 00:04:53,630
我想很快的为大家证明这个安全定理

143
00:04:53,630 --> 00:04:58,368
theorem. In fact, we've already seen the
security theorem when it applied to stream

144
00:04:53,630 --> 00:04:58,368
事实上，我们已经讨论使用PRF的流密码时已经看到过这个安全定理了。

145
00:04:58,368 --> 00:05:02,939
ciphers using pseudo-random generators, so
I'm not going to repeat this again. I'll

146
00:04:58,368 --> 00:05:02,939
所以我不打算将他重复一遍

147
00:05:02,939 --> 00:05:07,343
just remind you that essentially for every
adversary A that's trying to attack

148
00:05:02,939 --> 00:05:07,343
我只是提醒大家，对每个试图攻击确定计数器模式的攻击者A

149
00:05:07,343 --> 00:05:11,746
deterministic counter mode, we prove that
there's an adversary B that's trying to

150
00:05:07,343 --> 00:05:11,746
我们证明存在一个试图攻击PRF的攻击者B

151
00:05:11,913 --> 00:05:16,510
attack the PRF. And since this quantity is
negligible, because the PRF is secure, we

152
00:05:11,913 --> 00:05:16,510
由于这个量是可以忽略的，因为PRF是安全的

153
00:05:16,510 --> 00:05:20,720
obtain that this quantity is negligible.
And therefore, the adversary has

154
00:05:16,510 --> 00:05:20,720
我们得到这个量也是可忽略的。因此，

155
00:05:20,720 --> 00:05:24,818
negligible advantage in defeating
deterministic counter mode. And the

156
00:05:20,720 --> 00:05:24,818
这个攻击者对确定的计数器模式只有一个可忽略的优势

157
00:05:24,818 --> 00:05:29,028
proof in pictures is a really simple
proof. So I'll just show it to you one

158
00:05:24,818 --> 00:05:29,028
这个证明用图形表示很简单，为求完整，

159
00:05:29,028 --> 00:05:33,013
more time for completeness. So basically,
what we want to show is, when the

160
00:05:29,028 --> 00:05:33,013
我就为大家再证明一次

161
00:05:33,013 --> 00:05:37,448
adversary's given the encryption of the
message m0, here, this is the encryption

162
00:05:33,013 --> 00:05:37,448
当攻击者有明文m0的加密时，这是m0的加密密文

163
00:05:37,448 --> 00:05:41,602
of the message, m0. m0 XOR counter
applied to the PRF, versus in giving the

164
00:05:37,448 --> 00:05:41,602
m0异或计数器的PRF值

165
00:05:41,602 --> 00:05:45,680
encryption of the message, m1. We wanna
argue these two distributions are

166
00:05:41,602 --> 00:05:45,680
或是m1的加密。我们想证明这两个分布

167
00:05:45,680 --> 00:05:50,183
computationally indistinguishable. So the
way we do that is basically we say, well

168
00:05:45,680 --> 00:05:50,183
是计算上不可区分的。那么基本证明方法是

169
00:05:50,183 --> 00:05:54,734
the top distribution, if instead of a PRF,
we use a truly random function, namely

170
00:05:50,183 --> 00:05:54,734
上面这个分布，如果我们用真随机函数，不是PRF。比如，

171
00:05:54,734 --> 00:05:59,362
here f is a truly random function, then
the adversary, because of the property of

172
00:05:54,734 --> 00:05:59,362
这里f是一个真随机函数，那么由于PRF的性质

173
00:05:59,362 --> 00:06:03,931
the PRF, the adversary cannot distinguish
these two experiments, right. A PRF is

174
00:05:59,362 --> 00:06:03,931
攻击者不能区分两个实验。

175
00:06:03,931 --> 00:06:08,617
indistinguishable from a truly random
function, therefore when we replace the PRF

176
00:06:03,931 --> 00:06:08,617
一个PRF和一个真随机函数是无法区分的，

177
00:06:08,617 --> 00:06:13,244
on the left with a truly random function
on the right, the adversary is going to

178
00:06:08,617 --> 00:06:13,244
所以当我们用右边的真随机函数替换左边的PRF时

179
00:06:13,244 --> 00:06:17,601
behave the same. Basically you can't
distinguish these two distributions. But

180
00:06:13,244 --> 00:06:17,601
攻击者的行为是不会变的，你无法区分这两个分布

181
00:06:17,601 --> 00:06:22,067
now because F is a truly random function,
the pad here is a truly one time pad, and

182
00:06:17,601 --> 00:06:22,067
但现在因为f是一个真随机函数，这个密码本是真的一次性密码本

183
00:06:22,067 --> 00:06:26,642
therefore no adversary can distinguish an
encryption of m0 from an encryption of m1

184
00:06:22,067 --> 00:06:26,642
因此没有攻击者能够区分在一次性密码本下的

185
00:06:26,642 --> 00:06:30,836
under the one time pad. So, again, these
two distributions are the same. In fact,

186
00:06:26,642 --> 00:06:30,836
m0和m1的加密。因此这两个分布是一样的

187
00:06:30,836 --> 00:06:35,139
here there's an actual equality. These two
distributions literally are the same

188
00:06:30,836 --> 00:06:35,139
事实上，这有一个等式。这两个分布

189
00:06:35,139 --> 00:06:39,659
distribution. And similarly again when we
go back from a truly random function here

190
00:06:35,139 --> 00:06:39,659
就是一样的分布。类似的，当我们从一个真随机函数

191
00:06:39,659 --> 00:06:43,799
to a PRF, because the PRF is secure, the
adversary can't distinguish these two

192
00:06:39,659 --> 00:06:43,799
回到一个PRF时，因为PRF是安全的，所以攻击者无法区分

193
00:06:43,799 --> 00:06:48,063
bottom distributions, the left from the
right. And so by following these three

194
00:06:43,799 --> 00:06:48,063
下面这两个分布，左边的和右边的。

195
00:06:48,063 --> 00:06:52,655
equalities, basically we have proven that
the things we wanted to prove equal are

196
00:06:48,063 --> 00:06:52,655
根据下面这三个等式，我们证明了这些我们希望证明相等的东西

197
00:06:52,655 --> 00:06:56,340
actually computationally
indistinguishable. Okay, so that's a very

198
00:06:52,655 --> 00:06:56,340
实际上计算不可区分的

199
00:06:56,340 --> 00:07:00,874
simply proof to show that deterministic
counter mode is in fact secure and it's

200
00:06:56,340 --> 00:07:00,874
这是一个非常简单的证明来表明确定的计数器模式，事实上是安全的

201
00:07:00,874 --> 00:07:05,409
basically the same proof as we had when we
proved that a stream cipher gives us

202
00:07:00,874 --> 00:07:05,409
这个证明和我们之前证明流密码的语义安全是一样的

203
00:07:05,409 --> 00:07:09,874
semantic security. Okay. So that completes
this segment and in the next segment we'll

204
00:07:05,409 --> 00:07:09,874
好，本节完成。下节我们将讨论

205
00:07:09,874 --> 00:07:13,737
talk about modes that enable us to use a
key to encrypt multiple messages.

206
00:07:09,874 --> 00:07:13,737
能够让我们使用一个密钥加密多个信息的加密模式

