1
00:00:00,000 --> 00:00:02,833
There is an immense literature on attacking block ciphers.

2
00:00:00,000 --> 00:00:02,833
有大量关于攻击分组密码的文献.

3
00:00:02,833 --> 00:00:06,667
In this segment, I just want to give you a taste for
what these attacks look like.

4
00:00:02,833 --> 00:00:06,667
在这一节里,我只想让你体验一下这些攻击是什么样子的.

5
00:00:06,667 --> 00:00:10,217
And I hope I'll convince you that you should never
ever design your own block cipher,

6
00:00:06,667 --> 00:00:10,217
同时我希望我能说服你们永远不要设计你自己的分组密码,

7
00:00:10,217 --> 00:00:14,164
and just stick to the standards like Triple DES
and AES.

8
00:00:10,217 --> 00:00:14,164
而是坚持使用例如3DES和AES这样的标准.

9
00:00:14,164 --> 00:00:16,161
The first set of attacks that I want to talk about

10
00:00:14,164 --> 00:00:16,161
我想要讨论的第一类攻击

11
00:00:16,161 --> 00:00:18,297
are attacks on the
implementation of the block cipher.

12
00:00:16,161 --> 00:00:18,297
是在分组密码实现中的攻击.

13
00:00:18,297 --> 00:00:23,400
As an example, imagine you have a smart card that's implementing a block cipher.

14
00:00:18,297 --> 00:00:23,400
例如,想像一下你有一块实现了分组密码的智能卡.

15
00:00:23,400 --> 00:00:27,214
So the smart card, for example, could be used for
credit card payments. It might have a

16
00:00:23,400 --> 00:00:27,214
这块智能卡可能会被用作信用卡支付.它可能会有一个

17
00:00:27,214 --> 00:00:31,486
secret key inside of it to authenticate
your credit card payments as you stick the

18
00:00:27,214 --> 00:00:31,486
内部密钥来鉴定信用卡的支付行为，当你把卡插入

19
00:00:31,486 --> 00:00:36,510
card into a payment terminal, say. So now,
if an attacker obtains your smart card,

20
00:00:31,486 --> 00:00:36,510
一个支付终端时, 现在如果一个攻击者获取了你的智能卡,

21
00:00:36,510 --> 00:00:41,039
what he could do is he could actually take
the smart card to a lab, and then run the

22
00:00:36,510 --> 00:00:41,039
他可能会把卡拿到实验室去运行这张卡

23
00:00:41,039 --> 00:00:45,407
card, and measure very precisely how much
time the card took to do encryption and

24
00:00:41,039 --> 00:00:45,407
非常精确地测量出这张卡加密和解密所用的时间

25
00:00:45,407 --> 00:00:48,901
decryption. Now, if the amount of time
that the implementation took to do

26
00:00:45,407 --> 00:00:48,901
现在，如果实现加密过程所用的时间

27
00:00:48,901 --> 00:00:53,529
encryption depends on bits of the secret
key, then by measuring the time, the

28
00:00:48,901 --> 00:00:53,529
取决于密钥的位数, 通过测量时间

29
00:00:53,529 --> 00:00:57,284
attacker will learn something about your
secret key and in fact, he might be able

30
00:00:53,529 --> 00:00:57,284
攻击者就可以获取关于密钥的一些信息，事实上

31
00:00:57,284 --> 00:01:02,044
to completely extract your secret key. And
there are many examples of implementations

32
00:00:57,284 --> 00:01:02,044
他可以完全获得你的密钥。有许多这样的例子

33
00:01:02,044 --> 00:01:06,667
that simply by measuring the time very
precisely for many operations of

34
00:01:02,044 --> 00:01:06,667
仅仅通过精确测量加密算法的时间

35
00:01:06,667 --> 00:01:11,587
encryption algorithms, you can completely
extract the secret key. Another example is,

36
00:01:06,667 --> 00:01:11,587
你就可以完全获得密钥. 另一个例子是,

37
00:01:11,587 --> 00:01:16,336
rather than just measuring the time, you
can actually measure the power consumption

38
00:01:11,587 --> 00:01:16,336
不是测量时间, 而是测量智能卡的运行功耗

39
00:01:16,336 --> 00:01:20,570
of the card as it's operating. So,
literally, you can connect it to a device

40
00:01:16,336 --> 00:01:20,570
这样，你可以将其连接到一个设备上

41
00:01:20,570 --> 00:01:24,805
that will measure the current that the
card is drawing and then graph the

42
00:01:20,570 --> 00:01:24,805
测量它运行时的电流，然后用曲线图非常精确地记录它们。

43
00:01:24,805 --> 00:01:29,303
currents very, very precisely. Now, these
cards are not very fast, and as a result,

44
00:01:24,805 --> 00:01:29,303
这些智能卡不是很快，这样的话，

45
00:01:29,303 --> 00:01:33,993
you can actually measure the exact amount
of power consumed at every clock cycle as

46
00:01:29,303 --> 00:01:33,993
当卡在运行时你可以测量每个时钟周期里的精确能耗

47
00:01:33,993 --> 00:01:38,405
the card was executing. When you do that,
you actually get graphs of this form.

48
00:01:33,993 --> 00:01:38,405
这样，你就可以得到这种类型的图

49
00:01:38,405 --> 00:01:42,257
So this is an example of a smart card
operating, while it's doing the

50
00:01:38,405 --> 00:01:42,257
这是一个智能卡工作时的例子

51
00:01:42,257 --> 00:01:46,557
DES computation. So you can see
very clearly, here's when it was doing

52
00:01:42,257 --> 00:01:46,557
当它进行DES运算时. 你可以很清楚地看到，

53
00:01:46,557 --> 00:01:50,912
the initial permutation. Here's when it's
doing the final permutation. And then,

54
00:01:46,557 --> 00:01:50,912
这里是它在进行初始置换，这里是它在进行最终置换

55
00:01:50,912 --> 00:01:54,709
here, you can count. There are actually
sixteen hills and troughs

56
00:01:50,912 --> 00:01:54,709
看这里，你可以数一下，这里有16个波峰和波谷

57
00:01:54,709 --> 00:01:59,104
corresponding to the sixteen rounds. And
essentially when you zoom in on a graph

58
00:01:54,709 --> 00:01:59,104
对应了16个轮。 当你像这样放大图表

59
00:01:59,104 --> 00:02:03,529
like this, you can basically read the key
bits off one by one, just by looking at

60
00:01:59,104 --> 00:02:03,529
你可以将密钥位逐位读出

61
00:02:03,529 --> 00:02:08,421
how much power the card consumed as it was
doing the different operations. It turns out

62
00:02:03,529 --> 00:02:08,421
只需要关注智能卡在进行不同操作时的功耗就可以

63
00:02:08,421 --> 00:02:11,564
that, even cards that take steps to mask
this type of information, are still

64
00:02:08,421 --> 00:02:11,564
实际上，就算智能卡对这些信息进行伪装，依然易受攻击

65
00:02:11,564 --> 00:02:15,133
vulnerable. There's an attack called differential power analysis, where

66
00:02:11,564 --> 00:02:15,133
这种攻击叫做差分功耗分析

67
00:02:15,133 --> 00:02:21,619
basically, you measure the power consumed
by the card over many, many, many, runs of

68
00:02:15,133 --> 00:02:21,619
当智能卡重复运行加密算法时测量卡的功耗

69
00:02:21,619 --> 00:02:26,067
the encryption algorithm. And as long as
there's any even small dependence between

70
00:02:21,619 --> 00:02:26,067
只要电流消耗上有很小的差异

71
00:02:26,067 --> 00:02:31,464
the amount of current consumed and the
bits of the secret key, basically that

72
00:02:26,067 --> 00:02:31,464
密钥各位之间的依赖性就会出现

73
00:02:31,464 --> 00:02:35,857
dependence will show up after enough runs of the encryption algorithm. And as a

74
00:02:31,464 --> 00:02:35,857
加密算法运行足够多的次数

75
00:02:35,857 --> 00:02:39,967
result you'll be able to completely
extract the secret key. Okay, so these

76
00:02:35,857 --> 00:02:39,967
这样就可以完全获得密钥

77
00:02:39,967 --> 00:02:43,988
attacks were actually discovered by Paul
Kocher and his colleagues up at

78
00:02:39,967 --> 00:02:43,988
这些攻击是由Paul Kocher和他的同事在密码学研究所发现的

79
00:02:43,988 --> 00:02:48,468
Cryptography Research and there's actually
a fairly large industry devoted to just

80
00:02:43,988 --> 00:02:48,468
有一个很大的产业来专门防御功耗攻击

81
00:02:48,468 --> 00:02:52,732
defending against these power attacks. As
far as timing attacks are concerned,

82
00:02:48,468 --> 00:02:52,732
如果考虑计时攻击的话

83
00:02:52,732 --> 00:02:55,467
I want to mention that these are real.
They're not just about smart cards.

84
00:02:52,732 --> 00:02:55,467
我想说这些都是真的。不仅仅针对智能卡

85
00:02:55,467 --> 00:03:00,094
For example, you can imagine a multicore
processor where the encryption algorithm

86
00:02:55,467 --> 00:03:00,094
比如，设想一个多核的处理器，其中一核运行加密算法

87
00:03:00,094 --> 00:03:04,297
is running on one core and the attacker
code happens to be running on another

88
00:03:00,094 --> 00:03:04,297
攻击代码运行在另一个核

89
00:03:04,297 --> 00:03:09,427
core. Now these cores actually share the
same cache. And as a result, an attacker

90
00:03:04,297 --> 00:03:09,427
这些代码实际上使用的是同一缓存

91
00:03:09,427 --> 00:03:13,627
can actually measure or can actually look
at the exact cache misses that the

92
00:03:09,427 --> 00:03:13,627
这样的话攻击者可以测量或者直接观测加密算法中的缓存缺失

93
00:03:13,627 --> 00:03:18,100
encryption algorithm incurred. It turns
out that by looking at cache misses, you

94
00:03:13,627 --> 00:03:18,100
实际上，通过观测这些缓存缺失

95
00:03:18,100 --> 00:03:22,464
can completely figure out the secret key
used by the algorithms. So, one core can

96
00:03:18,100 --> 00:03:22,464
你可以完整地得到算法中使用的密钥

97
00:03:22,464 --> 00:03:26,828
essentially extract information from the
other core, just by looking at cache misses.

98
00:03:22,464 --> 00:03:26,828
所以，通过观察缓存缺失，某一核可以从另一核中提取信息

99
00:03:26,828 --> 00:03:30,349
So implementing these block ciphers is actually quite subtle

100
00:03:26,828 --> 00:03:30,349
所以实现分组密码是比较困难的

101
00:03:30,349 --> 00:03:33,778
because you have to make sure that the
side channel attacks don't leak

102
00:03:30,349 --> 00:03:33,778
因为你需要保证旁道攻击不会泄露你的密钥信息

103
00:03:33,778 --> 00:03:38,320
information about your secret key. Another
type of attack that's been discussed in

104
00:03:33,778 --> 00:03:38,320
另一类被很多文献讨论的攻击

105
00:03:38,320 --> 00:03:41,733
the literature is what's called a fault
attack. So here, basically, if you're

106
00:03:38,320 --> 00:03:41,733
我们称之为错误攻击.

107
00:03:41,733 --> 00:03:45,535
attacking a smart card, you can actually
cause the smart card to malfunction,

108
00:03:41,733 --> 00:03:45,535
当你攻击一个智能卡时，实际上会造成智能卡工作异常

109
00:03:45,535 --> 00:03:50,226
perhaps by overclocking it, perhaps by
warming it up. Essentially, you can cause

110
00:03:45,535 --> 00:03:50,226
可能是时钟频率过高，可能是芯片过热

111
00:03:50,226 --> 00:03:55,838
the processor to, malfunction, and output
erroneous data. It turns out that, if,

112
00:03:50,226 --> 00:03:55,838
你会导致处理器工作异常并输出错误的数据

113
00:03:55,838 --> 00:04:00,558
during encryption, there are errors in the
last round of the encryption process, the

114
00:03:55,838 --> 00:04:00,558
在加密过程中，如果最后一轮出现错误

115
00:04:00,558 --> 00:04:05,336
resulting ciphertexts that are produced are
enough to actually expose the secret key K.

116
00:04:00,558 --> 00:04:05,336
产生的密文足以暴露密钥K

117
00:04:05,336 --> 00:04:09,682
That's quite an interesting result that
in fact if you have any errors, if you ever

118
00:04:05,336 --> 00:04:09,682
这是一个有趣的结果，实际上如果有任何错误

119
00:04:09,682 --> 00:04:13,632
output a wrong result, that actually could
completely compromise your secret key.

120
00:04:09,682 --> 00:04:13,632
如果输出了一个错误的结果，那么可能就会暴露你的密钥

121
00:04:13,632 --> 00:04:18,508
So, of course, the defense against this means
that before you output the result of your

122
00:04:13,632 --> 00:04:18,508
因此，抵御这种攻击意味着你要在算法输出结果前

123
00:04:18,508 --> 00:04:23,045
algorithm, you should check to make sure
that the correct result was computed.

124
00:04:18,508 --> 00:04:23,045
进行检查来确保计算出正确的结果

125
00:04:23,045 --> 00:04:26,379
Now of course that's nontrivial, because how do
you know that the error didn't happen

126
00:04:23,045 --> 00:04:26,379
当然要做到这一点并不容易，因为你也不知道你的检查算法中有没有错误

127
00:04:26,379 --> 00:04:31,058
in your checking algorithm. But there are
known ways around that. So basically you

128
00:04:26,379 --> 00:04:31,058
不过还是有其他已知的方法

129
00:04:31,058 --> 00:04:35,037
can actually compute something three or
four times, take the majority over all those

130
00:04:31,058 --> 00:04:35,037
你可以计算三次或者四次，只要计算中不出现太多错误

131
00:04:35,037 --> 00:04:39,341
results, and be assured that the output
really is correct as long as not too many

132
00:04:35,037 --> 00:04:39,341
并保证输出是正确的

133
00:04:39,341 --> 00:04:43,763
faults occurred inside of your computation. These are attacks on the implementation.

134
00:04:39,341 --> 00:04:43,763
就取结果中的占多数的结果。这些是实现过程中的攻击

135
00:04:43,763 --> 00:04:47,205
I hope these examples can assure you that not only should you not

136
00:04:43,763 --> 00:04:47,205
我希望这些例子可以确保大家不仅不要

137
00:04:47,205 --> 00:04:51,168
invent your own block ciphers, you should
never even implement these crypto

138
00:04:47,205 --> 00:04:51,168
设计自己的分组密码，而且不要自己去实现这些密码原型

139
00:04:51,168 --> 00:04:55,188
primitives yourself. Because A, you have
to make sure there are no side channel

140
00:04:51,168 --> 00:04:55,188
因为首先，你需要确保实现过程中没有旁道攻击

141
00:04:55,188 --> 00:04:58,836
attachments on your implementation and B,
you have to make sure that the

142
00:04:55,188 --> 00:04:58,836
其次，你需要确保

143
00:04:58,836 --> 00:05:02,838
implementation is secure against fault
attacks. Okay so, instead you should just

144
00:04:58,836 --> 00:05:02,838
实现过程针对错误攻击是安全的

145
00:05:02,838 --> 00:05:06,586
use standard libraries like the ones
available in OpenSSL and many other

146
00:05:02,838 --> 00:05:06,586
所以大家应该只使用那些例如OpenSSL等可以获得的标准库

147
00:05:06,586 --> 00:05:11,043
libraries out there. So don't implement
these primitives yourself, just use

148
00:05:06,586 --> 00:05:11,043
所以不要自己去实现这些原型

149
00:05:11,043 --> 00:05:16,016
existing libraries. All right, so now I want
to turn to kind of more sophisticated

150
00:05:11,043 --> 00:05:16,016
只去使用已有的库。好的，现在我要讨论一种更为复杂针的对分组密码的攻击

151
00:05:16,016 --> 00:05:20,482
attacks on block ciphers and I'll particularly
talk about how these attacks apply to DES.

152
00:05:16,016 --> 00:05:20,482
我想特别讨论一下针对DES的攻击

153
00:05:20,482 --> 00:05:25,753
Okay so these attacks were discovered by
Biham and Shamir back in 1989, and I'll

154
00:05:20,482 --> 00:05:25,753
这些攻击由Biham和Shamir在1989年发现

155
00:05:25,753 --> 00:05:31,446
particularly describe a version of the
attack discovered by Matsui in 1993.

156
00:05:25,753 --> 00:05:31,446
我将特别讲述Matsui在1993年发现的攻击版本

157
00:05:31,446 --> 00:05:36,500
So the goal here is basically given many,
many input-output pairs, can we actually

158
00:05:31,446 --> 00:05:36,500
所以，如果实在给定很多的输入输出对情况下

159
00:05:36,500 --> 00:05:41,524
recover the key better than exhaustive
search? So anything that runs better than

160
00:05:36,500 --> 00:05:41,524
我们能否比穷举搜索更好地还愿密钥？

161
00:05:41,524 --> 00:05:45,400
exhaustive search already counts as an
attack on the block cipher. Okay, so the

162
00:05:41,524 --> 00:05:45,400
任何比穷举搜索更好的攻击都算是分组密码攻击

163
00:05:45,400 --> 00:05:50,400
example I want to give you is what's called
linear cryptanalysis. And here imagine it

164
00:05:45,400 --> 00:05:50,400
我想给你们的例子叫做线性密码分析

165
00:05:50,400 --> 00:05:56,037
so happens that, you know, c is the
encryption of m using key k, and

166
00:05:50,400 --> 00:05:56,037
试想，c是m用密钥k加密得到，

167
00:05:56,037 --> 00:06:00,895
suppose it so happens that if I look at
random key and a random message, somehow

168
00:05:56,037 --> 00:06:00,895
假定我随机地观察密钥和信息

169
00:06:00,895 --> 00:06:05,366
there's a dependence between the message,
ciphertext, and the key bits. In

170
00:06:00,895 --> 00:06:05,366
那么明文、密文和密钥位之间存在着某种联系

171
00:06:05,366 --> 00:06:10,113
particular, if I XOR a subset of
the message bits, so this is just a

172
00:06:05,366 --> 00:06:10,113
特别地，如果我逐位异或一组明文比特

173
00:06:10,113 --> 00:06:17,375
subset of the message bits, if I XOR that with a certain subset of the ciphertext

174
00:06:10,113 --> 00:06:17,375
这是一组明文比特，如果我异或一组特定的密文比特

175
00:06:17,375 --> 00:06:21,697
bits. So these two the attacker
sees. The attacker has the message and the

176
00:06:17,375 --> 00:06:21,697
这样两组攻击者都能看到

177
00:06:21,697 --> 00:06:26,183
attacker has the ciphertext. And then you
compare that to an XOR of a subset of

178
00:06:21,697 --> 00:06:26,183
攻击者同时有明文和对应的密文，然后将其与密钥的异或进行比较

179
00:06:26,183 --> 00:06:30,395
the key bits. Now if the two were
completely independent which is what you'd

180
00:06:26,183 --> 00:06:30,395
如果两者能如你所愿完全独立的话，

181
00:06:30,395 --> 00:06:34,553
like, you definitely don't want your
message and your ciphertext to somehow

182
00:06:30,395 --> 00:06:34,553
我们当然不希望明文和密文

183
00:06:34,553 --> 00:06:38,710
predict your key bits, if the two are
like, completely independent, then this

184
00:06:34,553 --> 00:06:38,710
能用某种方式预测密钥。如果他们完全独立

185
00:06:38,710 --> 00:06:42,868
equality will hold with probability
exactly one-half. But suppose it so

186
00:06:38,710 --> 00:06:42,868
那么这个等式成立的概率就严格地为1/2

187
00:06:42,868 --> 00:06:47,080
happens that there's a bias and this
probability holds with probability half

188
00:06:42,868 --> 00:06:47,080
但是设想有一点不均匀导致这个等式的概率

189
00:06:47,080 --> 00:06:52,158
plus epsilon for some small epsilon. It so
happens that, in fact, for DES, there is

190
00:06:47,080 --> 00:06:52,158
是1/2加上某个小ε 。事实上，对于DES有这样的关系

191
00:06:52,158 --> 00:06:56,868
such a relation. The relation holds
specifically because of a bug in the design

192
00:06:52,158 --> 00:06:56,868
这个关系之所以成立是因为第五个S盒子的设计有一个BUG

193
00:06:56,868 --> 00:07:03,534
of the fifth S-box. It turns out the fifth
S-box happens to be too close to a linear

194
00:06:56,868 --> 00:07:03,534
事实上第五个S盒子太过于接近线性函数了

195
00:07:03,534 --> 00:07:07,000
function. And that linear function,
basically, as it propagates through the

196
00:07:03,534 --> 00:07:07,000
那个线性函数传遍了整个DES的计算过程

197
00:07:07,000 --> 00:07:10,893
entire DES circuit, generates a relation
of this type. You notice, this is

198
00:07:07,000 --> 00:07:10,893
产生了这样的一个关系

199
00:07:10,893 --> 00:07:16,582
basically a linear relation that's being
computed here. So, this small tiny, tiny

200
00:07:10,893 --> 00:07:16,582
注意这里计算的是一个线性关系

201
00:07:16,582 --> 00:07:21,086
linearity in the fifth S-box generates
this relation over the entire circuit,

202
00:07:16,582 --> 00:07:21,086
因此第五个S盒子的微弱线性关系会对整个算法产生这样的关系

203
00:07:21,086 --> 00:07:25,769
where the epsilon is tiny. Epsilon is one
over 2^21, and I wrote down what

204
00:07:21,086 --> 00:07:25,769
这里的ε是很小的，约为2的21次方分之一

205
00:07:25,769 --> 00:07:29,528
that is. So the bias is really, really,
really small. But nevertheless, there is a

206
00:07:25,769 --> 00:07:29,528
这个偏量真的真的很小

207
00:07:29,528 --> 00:07:33,336
bias using these particular subsets of bits. Now, I'm not going to show you how to

208
00:07:29,528 --> 00:07:33,336
但是在使用这些特殊的比特时也会有偏量

209
00:07:33,336 --> 00:07:37,095
derive this relation, or I'm not going to show you even what it is. I'll just tell you

210
00:07:33,336 --> 00:07:37,095
现在我不打算推导这个关系，也不告诉大家这是什么意思

211
00:07:37,095 --> 00:07:41,534
how to use a relation like this once you find it. Okay. So here's our relation

212
00:07:37,095 --> 00:07:41,534
我只告诉你们当你找到它的时候如何使用这个关系

213
00:07:41,534 --> 00:07:45,533
that we have. And the question is how to
use it. So with a little bit of statistics

214
00:07:41,534 --> 00:07:45,533
这里我们只关心如何使用它。用一点统计的知识

215
00:07:45,533 --> 00:07:50,484
you can actually use an equation like this
to determine some of the key bits. And

216
00:07:45,533 --> 00:07:50,484
你就可以使用这样的一个等式来决定某些比特

217
00:07:50,484 --> 00:07:54,844
here's you do it. Suppose you were given one over epsilon squared message-ciphertext pairs.

218
00:07:50,484 --> 00:07:54,844
这么做：假设给定了1/ε的平方个明文-密文对

219
00:07:54,844 --> 00:07:58,612
And these have to be
independently random messages and the

220
00:07:54,844 --> 00:07:58,612
这些必须是互相独立的随机明文和对应的密文

221
00:07:58,612 --> 00:08:03,026
corresponding ciphertexts. What you would
do is you would use the formula above. In

222
00:07:58,612 --> 00:08:03,026
应用上面的公式

223
00:08:03,026 --> 00:08:07,547
fact you would use the left-hand side of
the formula above to compute this relation

224
00:08:03,026 --> 00:08:07,547
事实上你可以使用公式左边来计算

225
00:08:07,547 --> 00:08:11,907
between the message and ciphertext for
all the pairs you were given. Now what do

226
00:08:07,547 --> 00:08:11,907
你所有的明文密文对之间的关系

227
00:08:11,907 --> 00:08:16,122
you know? You know that for half plus
epsilon of these values, you know that

228
00:08:11,907 --> 00:08:16,122
现在，对于这些值的一半加上ε的值

229
00:08:16,122 --> 00:08:20,605
these things will be equal to an
XOR of the key bits. So if you

230
00:08:16,122 --> 00:08:20,605
这些值等于密钥各个位的异或

231
00:08:20,605 --> 00:08:25,087
take majority over all the values you've
computed, it turns out it's not so

232
00:08:20,605 --> 00:08:25,087
取计算结果中的大多数

233
00:08:25,087 --> 00:08:30,107
difficult to see that in fact you'll get
the correct prediction for the XOR of the

234
00:08:25,087 --> 00:08:30,107
不难看出你得到了对密钥所有位异或的正确预测

235
00:08:30,107 --> 00:08:34,888
key bits with a probability of 97.7%. In
other words, if this relation happens to

236
00:08:30,107 --> 00:08:34,888
其正确概率为97.7%。换句话说，如果这个关系在多于一半的时间里是正确的

237
00:08:34,888 --> 00:08:39,775
be correct more than half the time, then
the majority will be right. And because

238
00:08:34,888 --> 00:08:39,775
那么大多数的结果都将是正确的

239
00:08:39,775 --> 00:08:44,912
there's a bias, there's an epsilon bias, the probability that you will be correct

240
00:08:39,775 --> 00:08:44,912
因为有偏量ε，概率将会超过一半，事实上是99.7%

241
00:08:44,912 --> 00:08:49,566
more than half the time is, in fact,
97.7%. In which case, the majority, in

242
00:08:44,912 --> 00:08:49,566
实际上，大部分情况下我们是正确的

243
00:08:49,566 --> 00:08:53,763
fact, will give you the correct XOR of the
key bits. Okay? So this is kinda cool.

244
00:08:49,566 --> 00:08:53,763
这里的大多数结果，会给你正确的密钥所有位的异或，是不是很酷？

245
00:08:53,763 --> 00:08:58,667
Within one over epsilon squared time, you
can figure out an XOR of a bunch of key

246
00:08:53,763 --> 00:08:58,667
在1/ε平方的次数内，你就可以解出密钥所有位的异或 。

247
00:08:58,667 --> 00:09:03,392
bits. So now, let's apply this to DES.
So, for DES, we have epsilon, which is one

248
00:08:58,667 --> 00:09:03,392
现在，我们把它应用到DES。DES的ε等于0.5的21次方

249
00:09:03,392 --> 00:09:08,117
over 2^21. Which means that if you give me
2^42 input-output pairs, I can

250
00:09:03,392 --> 00:09:08,117
意味着如果给定2的42次方个输入输出对时

251
00:09:08,117 --> 00:09:12,961
figure out an XOR of the key bits. And now,
it turns out, I'm not gonna exactly show

252
00:09:08,117 --> 00:09:12,961
我可以接触密钥所有位的异或值。事实上我可以告诉大家

253
00:09:12,961 --> 00:09:17,652
you how, roughly speaking, using this
method, you don't just get one key bit. In

254
00:09:12,961 --> 00:09:17,652
不严格地讲，使用这个方法，你还不知道密钥中任何一位

255
00:09:17,652 --> 00:09:22,352
fact, you get two key bits. You can kind
of use this relation. One's going in a

256
00:09:17,652 --> 00:09:22,352
事实上，你可以取密钥中的任意两位，使用这个方法

257
00:09:22,352 --> 00:09:27,297
forward direction and one's going in a
backwards direction. So that gives you two

258
00:09:22,352 --> 00:09:27,297
一个向前，一个向后

259
00:09:27,297 --> 00:09:31,825
XORs of bits of the secret key. Okay, so
that's two bits of information about the

260
00:09:27,297 --> 00:09:31,825
这样就给你一些密钥中这两位的异或值，这样就有了密钥中两位的信息了

261
00:09:31,825 --> 00:09:35,591
secret key. And then it turns out you can
get twelve more bits, because,

262
00:09:31,825 --> 00:09:35,591
其实你还可以获得另外的12位

263
00:09:35,591 --> 00:09:39,786
essentially, you can figure out what the
inputs are to the fifth S-box. Okay, so,

264
00:09:35,591 --> 00:09:39,786
因为你可以解出第五个S盒子的输入

265
00:09:39,786 --> 00:09:44,143
I'm not going to exactly show you how. But it
turns out you can get twelve more bits,

266
00:09:39,786 --> 00:09:44,143
我不再详细展示了，但是是可以得到另外12位的

267
00:09:44,143 --> 00:09:48,124
which is a total of fourteen bits overall.
So now, using this method, you've

268
00:09:44,143 --> 00:09:48,124
这样一共就得到14位了，现在使用这个方法

269
00:09:48,124 --> 00:09:52,427
recovered fourteen bits of the secret key.
And of course, it took you time 2^42.

270
00:09:48,124 --> 00:09:52,427
你已经还愿了密钥中14位内容，当然这需要进行2^42次。

271
00:09:52,427 --> 00:09:56,438
Okay, so then, what do you do?
Well, so the rest of it is easy. Now what

272
00:09:52,427 --> 00:09:56,438
然后我们做什么呢？，剩下的部分就很简单了

273
00:09:56,438 --> 00:10:00,750
you're going to do is you're going to do
exhaustive search on the remaining bits.

274
00:09:56,438 --> 00:10:00,750
你只需要穷举密钥中剩余的位就可以了

275
00:10:00,750 --> 00:10:04,954
Well how many remaining bits are there?
Well, there are 42 remaining bits, so

276
00:10:00,750 --> 00:10:04,954
还剩下多少位呢？ 42位

277
00:10:04,954 --> 00:10:07,898
the exhaustive search will take you time 2^42. So what's the total attack time?

278
00:10:04,954 --> 00:10:07,898
穷举密钥花掉了 2^42 的时间。那么攻击的总用时是多少？

279
00:10:07,898 --> 00:10:12,450
Well, the first step of the algorithm
to determine the fourteen bits took 2^42 time,

280
00:10:07,898 --> 00:10:12,450
算法的第一步，确定14位需要2^24的时间

281
00:10:12,450 --> 00:10:16,667
and the remaining brute force
search also took 2^42 time.

282
00:10:12,450 --> 00:10:16,667
剩下的穷举搜索需要另一个2^42

283
00:10:16,667 --> 00:10:22,211
So overall, the attack took two to the 43
time. Okay? So now, this is much better

284
00:10:16,667 --> 00:10:22,211
所以攻击的总时间是2^43

285
00:10:22,211 --> 00:10:27,225
than exhaustive search. Within two to the
43 time, we broke DES. But of course, this

286
00:10:22,211 --> 00:10:27,225
这比穷举攻击要好很多 在2^43时间里我们破解了DES

287
00:10:27,225 --> 00:10:32,178
required two to the 42 random input-output
pairs whereas exhaustive search only

288
00:10:27,225 --> 00:10:32,178
不过这需要2^42个输入输出对

289
00:10:32,178 --> 00:10:37,131
required three pairs. Okay, so this is a
fairly large number of input-output

290
00:10:32,178 --> 00:10:37,131
而穷举搜索只需要3对。好，这里要求的明文密文对

291
00:10:37,131 --> 00:10:42,332
pairs that are needed, but given such a
large number, you can actually recover the

292
00:10:37,131 --> 00:10:42,332
数目还是很多的，但给定这么多

293
00:10:42,332 --> 00:10:46,560
key faster than exhaustive search. Okay,
so what's the lesson in all this?

294
00:10:42,332 --> 00:10:46,560
确实可以更快地还原DES密钥，通过这些我们学到了什么？

295
00:10:46,560 --> 00:10:51,227
The lesson is, firstly, any tiny bit of
linearity, basically, in thisâ€” in the

296
00:10:46,560 --> 00:10:51,227
第一，任何细微的线性关系

297
00:10:51,227 --> 00:10:56,219
fifth S-box, which was not designed as
well as the other S-boxes, basically led

298
00:10:51,227 --> 00:10:56,219
比如这里第5个S盒子不像其他S盒子设计的那么好

299
00:10:56,219 --> 00:11:01,908
to an attack on the algorithm. Okay. A tiny
beat of linearity already introduced this

300
00:10:56,219 --> 00:11:01,908
会导致一种攻击算法，任一细微的线性关系

301
00:11:01,908 --> 00:11:06,461
linear attack. And I want to emphasize
again that this is not the sort of thing

302
00:11:01,908 --> 00:11:06,461
都会引入线性攻击。再次强调一下

303
00:11:06,461 --> 00:11:10,499
you would think of when you design a cipher. And so again, the conclusion here is,

304
00:11:06,461 --> 00:11:10,499
这些不是在设计密码时就能够考虑到的。所以结论是

305
00:11:10,499 --> 00:11:15,345
there are very subtle attacks on block
ciphers, ones which you will not be able to

306
00:11:10,499 --> 00:11:15,345
对分组密码存在很复杂的攻击，仅凭自己一个人往往是无法找到的

307
00:11:15,345 --> 00:11:19,484
find yourself. And so just stick to the
standards. Don't ever, ever, ever, ever

308
00:11:15,345 --> 00:11:19,484
所以说要坚持使用标准，永远不要自己设计分组密码

309
00:11:19,484 --> 00:11:23,133
design your block cipher. Okay, so that's
all I want to say about sophisticated

310
00:11:19,484 --> 00:11:23,133
这就是关于复杂攻击所有我想说的

311
00:11:23,133 --> 00:11:27,548
attacks. Now let's move on to the last
type of attack that I want to mention, which

312
00:11:23,133 --> 00:11:27,548
现在我们来看最后一种攻击

313
00:11:27,548 --> 00:11:31,769
I'll call quantum attacks, which are
againâ€” these are generic attacks on

314
00:11:27,548 --> 00:11:31,769
我称之为量子攻击，它对分组密码是通用的

315
00:11:31,769 --> 00:11:35,333
all block ciphers. So let me explain what
I mean by this.

316
00:11:31,769 --> 00:11:35,333
这里让我来解释一下

317
00:11:35,333 --> 00:11:40,453
So first of all, let's look at a generic problem, a generic search problem. Suppose I have a function

318
00:11:35,333 --> 00:11:40,453
首先我们来看一个普遍的问题，一个普遍的搜索问题

319
00:11:40,453 --> 00:11:45,222
on some large domain X, that happens to be
two outputs, either zero or one.

320
00:11:40,453 --> 00:11:45,222
假设我有一个定义在大集合X上的函数，输出有两种值 0或1

321
00:11:45,222 --> 00:11:49,771
And it so happens that this function is mostly
zero. And there's, like, maybe one input

322
00:11:45,222 --> 00:11:49,771
这个函数输出的大部分值都是0

323
00:11:49,771 --> 00:11:54,375
where the function happens to evaluate to
one. And your goal is basically, you know,

324
00:11:49,771 --> 00:11:54,375
这个函数只有一个输入，所对应的函数值为1

325
00:11:54,375 --> 00:11:58,812
find me the inputs where the function
happens to be one. Maybe there's only one

326
00:11:54,375 --> 00:11:58,812
目标是找出这些输入，满足函数值为1

327
00:11:58,812 --> 00:12:02,991
such input. But your goal is to find it.
Well, so on a classical computer, what can

328
00:11:58,812 --> 00:12:02,991
我们的目标就是要找到这个输入。那么在一台经典的计算机上

329
00:12:02,991 --> 00:12:07,172
you do? The function is given to you. It's
given to you as a black box. So the best

330
00:12:02,991 --> 00:12:07,172
你能做什么？函数已经给出了，作为一个黑盒

331
00:12:07,172 --> 00:12:11,094
you can do is just try all possible
inputs. So this is gonna take time which

332
00:12:07,172 --> 00:12:11,094
你所能做的最好是去尝试所有可能的输入

333
00:12:11,094 --> 00:12:15,378
in linear in the size of the domain. Now,
it turns out there's an absolutely magical

334
00:12:11,094 --> 00:12:15,378
所以需要的时间和定义域的大小是线性相关的。但现在，如果有一台

335
00:12:15,378 --> 00:12:19,913
result that says that if you build a
computer that's based on quantum physics

336
00:12:15,378 --> 00:12:19,913
基于量子物理的计算机的话，就会产生神奇的结果。

337
00:12:19,913 --> 00:12:24,381
as opposed to classical physics, you can
solve this problem faster. So let me

338
00:12:19,913 --> 00:12:24,381
而非经典物理的话，那么你可以更快地解决这个问题

339
00:12:24,381 --> 00:12:29,142
explain what I mean by this. So first of
all in the 70s and 80s it was observed, I

340
00:12:24,381 --> 00:12:29,142
我来解释一下。在20世纪七八十年代

341
00:12:29,142 --> 00:12:33,845
think it was actually Richard Feynman who observed this initially, that said

342
00:12:29,142 --> 00:12:33,845
实际上是Richard Feynman最早观察到

343
00:12:33,845 --> 00:12:38,313
that it turns out to be very difficult to
simulate quantum experiments on a

344
00:12:33,845 --> 00:12:38,313
在经典计算机上模拟量子实验是非常困难的

345
00:12:38,313 --> 00:12:42,706
classical computer. So Feynman said, if
that's the case, maybe these quantum

346
00:12:38,313 --> 00:12:42,706
所以他说，如果是这样的话

347
00:12:42,706 --> 00:12:47,233
experiments are computing things that a
classical computer can't compute.

348
00:12:42,706 --> 00:12:47,233
也许这些量子实验是经典计算机所无法计算的东西

349
00:12:47,233 --> 00:12:51,939
So they're somehow able to compute very
quickly things that are very difficult to

350
00:12:47,233 --> 00:12:51,939
所以某种意义上它们可以计算得很快

351
00:12:51,939 --> 00:12:56,526
do classically. And that turned out to be
correct. And in fact, the example I want

352
00:12:51,939 --> 00:12:56,526
而同样的问题经典计算机很难做到。这被证明是正确的，事实上

353
00:12:56,526 --> 00:13:01,470
to show you is one of these amazing things that in fact, if you could build a

354
00:12:56,526 --> 00:13:01,470
我想给大家看一个令人惊奇的的例子，如果你可以构建一个量子计算机

355
00:13:01,470 --> 00:13:06,117
quantum computer that's using quantum
physics, then it's, in fact, you can solve

356
00:13:01,470 --> 00:13:06,117
用于计算量子物理，那么它可以被用来

357
00:13:06,117 --> 00:13:10,636
this search problem not in time X but in
time square root of X. So somehow, even

358
00:13:06,117 --> 00:13:10,636
解决这个搜索问题，用不着|X|的时间，而是|X|的平方根的时间即可

359
00:13:10,636 --> 00:13:14,612
though the computer doesn't know anything
about the function F, it's treating it as

360
00:13:10,636 --> 00:13:14,612
即使计算机不知道任何函数F的信息

361
00:13:14,612 --> 00:13:18,397
a black box, nevertheless, it's able to
find a point where the function is one, in

362
00:13:14,612 --> 00:13:18,397
F被视为黑盒，但是依然可以找到一个点使其函数值为1

363
00:13:18,397 --> 00:13:22,037
time square root of X. I'm not going to explain this here, but, at the end of the

364
00:13:18,397 --> 00:13:22,037
在|X|的平方根的时间内，我在这里不解释其原理

365
00:13:22,037 --> 00:13:25,966
class, we're gonna have an advanced topics
lecture. And if you'd like me to explain

366
00:13:22,037 --> 00:13:25,966
在本课程的结尾，我们会有个高级课题的讲座

367
00:13:25,966 --> 00:13:29,798
how this algorithm works, I can explain it
in that advanced topics lecture.

368
00:13:25,966 --> 00:13:29,798
来解释这个算法的工作过程

369
00:13:29,798 --> 00:13:33,678
It's actually quite interesting, and, in fact,
quantum computers have quite an impact on

370
00:13:29,798 --> 00:13:33,678
这真的是很有趣的，事实上，量子计算机对于密码学

371
00:13:33,678 --> 00:13:37,000
crypto. And again, as I said, I can
explain this in the very last lecture.

372
00:13:33,678 --> 00:13:37,000
影响很大。好的 我会在最后的课程解释这些

373
00:13:37,000 --> 00:13:42,190
All right. So what does this have to do with
breaking block cyphers? So far it's just a

374
00:13:37,000 --> 00:13:42,190
那么，这和破解分组密码有什么关系呢？

375
00:13:42,190 --> 00:13:46,177
generic search problem. Well, oh actually
I should say before I show you the

376
00:13:42,190 --> 00:13:46,177
目前这仅仅是个普遍问题。对了

377
00:13:46,177 --> 00:13:50,377
application, I should mention that, well,
you might be wondering, well, can someone

378
00:13:46,177 --> 00:13:50,377
在谈应用前我还要说一下，大家可能想知道

379
00:13:50,377 --> 00:13:54,417
build a quantum computer. And this is
still completely unknown. At this point,

380
00:13:50,377 --> 00:13:54,417
能不能制造量子计算机，这个目前还完全未知

381
00:13:54,417 --> 00:13:58,936
nobody really knows if we can build
large enough quantum computers to actually

382
00:13:54,417 --> 00:13:58,936
没有人知道我们能否建造量子计算机

383
00:13:58,936 --> 00:14:03,348
take advantage of this beautiful algorithm
due to Grover. Alright, so what does this

384
00:13:58,936 --> 00:14:03,348
来利用这个Grover提供的这个优美的算法

385
00:14:03,348 --> 00:14:07,548
have to do with block ciphers? Well, so
suppose I give you a message-ciphertext pair.

386
00:14:03,348 --> 00:14:07,548
那么，这和分组密码有何关系？假定给你一个或几个明文密文对

387
00:14:07,548 --> 00:14:12,221
Just one or just a few. We can
define a function as follows. It's a

388
00:14:07,548 --> 00:14:12,221
我们可以定义如下的函数

389
00:14:12,221 --> 00:14:17,366
function on K, it's a function on, the key
space. And the function will basically

390
00:14:12,221 --> 00:14:17,366
这是一个定义在密钥空间K上的函数

391
00:14:17,366 --> 00:14:22,198
output one if it so happens that the
encryption of m with k maps to c, and it

392
00:14:17,366 --> 00:14:22,198
这个函数会输出1，如果正好满足k加密m得到c

393
00:14:22,198 --> 00:14:27,406
will output zero otherwise. Now we argue
that basically this is exactly the type of

394
00:14:22,198 --> 00:14:27,406
否则函数输出0。现在我们来讨论这个函数

395
00:14:27,406 --> 00:14:32,363
function that's one at one point in the
key space and that's it. So by Grover's

396
00:14:27,406 --> 00:14:32,363
正是在密钥空间中一点处为1

397
00:14:32,363 --> 00:14:37,541
algorithm, we can actually find the secret
key in time square root of K.

398
00:14:32,363 --> 00:14:37,541
那么根据Grover算法，我们可以找到密钥用|K|的平方根的时间

399
00:14:37,541 --> 00:14:41,609
So what does that mean? For DES, this would
totally destroy DES. This would say

400
00:14:37,541 --> 00:14:41,609
那么这以为着什么？对于DES，这足以完全摧毁DES了

401
00:14:41,609 --> 00:14:46,267
that in time 2^28, you could
find a key. 2^28 is about 200 million.

402
00:14:41,609 --> 00:14:46,267
因为这仅用时2^28就能找出密钥，2^28仅为2亿左右

403
00:14:46,267 --> 00:14:50,747
So 200 million steps which is, you know, just takes a millisecond on a modern computer.

404
00:14:46,267 --> 00:14:50,747
而现代计算机上2亿步只需要毫秒级

405
00:14:50,747 --> 00:14:55,110
This would totally destroy DES. But even AES with 128-bit keys,

406
00:14:50,747 --> 00:14:55,110
这足以摧毁DES了，即便是128位密钥的AES

407
00:14:55,110 --> 00:14:59,827
you would be able to find the secret
key in time, roughly 2^64.

408
00:14:55,110 --> 00:14:59,827
你也可以仅用2^64次的时间就找到密钥

409
00:14:59,827 --> 00:15:04,248
And 2^64 is these days, considered
insecure. That's within the realm of

410
00:14:59,827 --> 00:15:04,248
2^64在如今是视为不安全的

411
00:15:04,248 --> 00:15:08,353
exhaustive search. And so, basically, if
somebody was able to build a quantum

412
00:15:04,248 --> 00:15:08,353
它还在穷举法的范围内。所以，如果有人可以造出量子计算机

413
00:15:08,353 --> 00:15:12,625
computer, we would then say that AES-128
is no longer secure. Instead, if somebody,

414
00:15:08,353 --> 00:15:12,625
我们就可以说AES128不再安全

415
00:15:12,625 --> 00:15:16,683
you know, if tomorrow, you open up the
newspaper, and you read an article that

416
00:15:12,625 --> 00:15:16,683
如果你在明天的报纸上看到有文章说

417
00:15:16,683 --> 00:15:20,942
says, you know, so-and-so built a
quantum computer, the conclusion, the

418
00:15:16,683 --> 00:15:20,942
有人造出量子计算机了

419
00:15:20,942 --> 00:15:25,919
consequence of all that is that you should
immediately move to block ciphers that use

420
00:15:20,942 --> 00:15:25,919
那你就可以得出结论，大家必须立刻使用256位密钥的分组密码了

421
00:15:26,092 --> 00:15:30,837
256 bits, because then the running time
of Grover's algorithm is 2^128,

422
00:15:26,092 --> 00:15:30,837
因为256位密钥的Grover算法运行时间是2^128

423
00:15:30,837 --> 00:15:35,061
which is more time than we consider
feasible, and the, basically there are

424
00:15:30,837 --> 00:15:35,061
目前还是安全的

425
00:15:35,061 --> 00:15:39,112
example ciphers with 256 bits, for
example, AES-256. This is one of the

426
00:15:35,061 --> 00:15:39,112
也有256位的密码，比如AES256

427
00:15:39,112 --> 00:15:43,567
reasons why AES was designed with 256
bits in mind. But to be honest, this is

428
00:15:39,112 --> 00:15:43,567
这也是AES要设计256位密钥的原因之一

429
00:15:43,567 --> 00:15:48,312
not the only reason. There are other reasons why you want it to have larger key sizes.

430
00:15:43,567 --> 00:15:48,312
但其实不是唯一的原因，还有其他原因的

431
00:15:48,312 --> 00:15:53,529
Okay, so this is, as I said, just a taste of the different attacks on block ciphers,

432
00:15:48,312 --> 00:15:53,529
我说过，这只是带大家初尝针对分组密码的不同攻击

433
00:15:53,529 --> 00:15:58,896
and I'm gonna leave it at that. If we decide on quantum for the last

434
00:15:53,529 --> 00:15:58,896
到此告一段落，如果我们决定在最后一讲讨论量子算法

435
00:15:58,896 --> 00:16:02,700
topic of the course, then we'll recover
that in the very last lecture.

436
00:15:58,896 --> 00:16:02,700
我们还会回过来看Grover算法的

