1
00:00:01,794 --> 00:00:04,612
In this segment we're going to look at our first key exchange protocol without a trusted third party.

2
00:00:01,794 --> 00:00:04,612
在这一节中我们来看一下在没有
可信第三方的情况下的第一密钥交换协议

3
00:00:04,612 --> 00:00:08,174
So the settings are, we have our friends Alice and Bob as usual.

4
00:00:04,612 --> 00:00:08,174
我们像往常一样设两个朋友Alice和Bob

5
00:00:08,174 --> 00:00:11,841
And these friends have never met before but somehow they want to generate a shared key.

6
00:00:08,174 --> 00:00:11,841
并且这两人之前并没有见过，但他们都想产生一个共享密钥

7
00:00:11,841 --> 00:00:15,263
So what they're going to do is they're going to send messages to one another, back and forth.

8
00:00:11,841 --> 00:00:15,263
他们将来回地互相发送信息

9
00:00:15,263 --> 00:00:18,895
And this time there is no trusted third party that they can communicate with.

10
00:00:15,263 --> 00:00:18,895
并且这次他们的通信是没有可信第三方的

11
00:00:18,895 --> 00:00:23,641
And at the end of this protocol, somehow they should have a shared key that they both know.

12
00:00:18,895 --> 00:00:23,641
在协议的最后，他们应该有两人都知道的共享密钥

13
00:00:23,641 --> 00:00:26,153
So there's a secret key k that they both know.

14
00:00:23,641 --> 00:00:26,153
所以会有一个他们都知道的密钥k

15
00:00:26,153 --> 00:00:32,667
But an eavesdropper who listens in on this traffic has absolutely no idea what this secret key k is.

16
00:00:26,153 --> 00:00:32,667
但是窃听者监听这条通道时完全不知道密钥k是什么

17
00:00:32,667 --> 00:00:37,669
For now we're just going to worry about attackers that only eavesdrop on the conversation.

18
00:00:32,667 --> 00:00:37,669
现在当我们只要担心窃听对话的攻击者

19
00:00:37,669 --> 00:00:40,374
In other words, we don't allow any tampering with traffic.

20
00:00:37,669 --> 00:00:40,374
换句话说，我们不允许对通道的任何篡改

21
00:00:40,374 --> 00:00:43,611
All we allow is just eavesdropping, and yet eavesdroppers should

22
00:00:40,374 --> 00:00:43,611
我们所允许的只是监听，而且监听者

23
00:00:43,611 --> 00:00:46,417
have no idea what the secret key k is.

24
00:00:43,611 --> 00:00:46,417
并不知道密钥k

25
00:00:46,417 --> 00:00:50,080
So we're going to look at a number of key exchange protocols in these settings.

26
00:00:46,417 --> 00:00:50,080
在这些设定下，我们将看到许多密钥交换协议

27
00:00:50,080 --> 00:00:52,954
Namely, when the attacker is only eavesdropping on the conversation

28
00:00:50,080 --> 00:00:52,954
很明显，当攻击者只窃听会话

29
00:00:52,954 --> 00:00:58,694
but cannot change traffic. And we're going to see three protocols that achieve this goal.

30
00:00:52,954 --> 00:00:58,694
但不能改变通信量。并且我们将要看到实现这一目标的三个协议

31
00:00:58,694 --> 00:01:01,262
And the first question, though, for this segment, is

32
00:00:58,694 --> 00:01:01,262
这节第一个问题是

33
00:01:01,262 --> 00:01:04,095
"Can this be done only using symmetric crypto?"

34
00:01:01,262 --> 00:01:04,095
“只是用对称密码学能做到吗？”

35
00:01:04,095 --> 00:01:08,236
So can this only be done using block ciphers or hash functions, or any of the tools

36
00:01:04,095 --> 00:01:08,236
可以只是用分组加密或者哈希函数，或者

37
00:01:08,236 --> 00:01:11,327
that we've seen in the last four weeks.

38
00:01:08,236 --> 00:01:11,327
任何我们在过去4周学过的工具来实现吗

39
00:01:11,327 --> 00:01:15,747
And so very surprisingly, the answer is "Yes", in fact we can do key exchange

40
00:01:11,327 --> 00:01:15,747
令人惊奇的是，答案是肯定的。事实上，我们可以做密钥交换

41
00:01:15,747 --> 00:01:20,284
just using block ciphers or hash functions without a trusted third party

42
00:01:15,747 --> 00:01:20,284
仅仅使用分组加密或者哈希函数，不借助可信第三方

43
00:01:20,284 --> 00:01:25,265
but unfortunately the resulting protocols are very inefficient and are actually never used in practice.

44
00:01:20,284 --> 00:01:25,265
但不幸的是，结果协议非常无效，事实上从没有应用到实践中

45
00:01:25,265 --> 00:01:28,904
Nevertheless, these are very simple protocols and so I want to show you how they work,

46
00:01:25,265 --> 00:01:28,904
尽管如此，存在一个简单的协议，我会告诉你它们如何工作

47
00:01:28,904 --> 00:01:33,317
and then we'll move on to the more efficient protocols that we'll discuss this week and the next.

48
00:01:28,904 --> 00:01:33,317
并且他们会转为更加有效的协议，我们将在这周和下周讨论

49
00:01:33,317 --> 00:01:38,305
So the simple protocol I want to show you what's called a Merkle Puzzles protocol.

50
00:01:33,317 --> 00:01:38,305
我想告诉你的这个简单协议叫Merkle谜题协议

51
00:01:38,305 --> 00:01:43,810
This protocol was invented by Ralph Merkle back in 1974 when he was just an undergraduate.

52
00:01:38,305 --> 00:01:43,810
这个协议是由Ralph Merkle在1974年发明的，当时他还是个大学生

53
00:01:43,810 --> 00:01:48,218
Interestingly, he invented this protocol as part of a seminar that he took,

54
00:01:43,810 --> 00:01:48,218
有趣的是，他发明这个协议是作为他参加的小组研讨的一部分

55
00:01:48,218 --> 00:01:52,204
but apparently the professor didn't quite understand the significance of the contribution

56
00:01:48,218 --> 00:01:52,204
但是显然，教授没有很好地理解这个结构的意义

57
00:01:52,204 --> 00:01:55,151
and as a result Ralph Merkle actually graduated and then moved

58
00:01:52,204 --> 00:01:55,151
最后Ralph Merkle毕业，又来到斯坦福大学

59
00:01:55,151 --> 00:01:58,342
to Stanford where he became Marty Hellman's student

60
00:01:55,151 --> 00:01:58,342
在那里他成了Marty Hellman的学生

61
00:01:58,342 --> 00:02:02,255
and they've done a lot of good things in public-key cryptography since then.

62
00:01:58,342 --> 00:02:02,255
自从那时起他们做了许多有关公共密钥密码术的研究

63
00:02:02,255 --> 00:02:05,478
So let me show you how Merkle Puzzles work.

64
00:02:02,255 --> 00:02:05,478
接下来让我给大家展示Merkle Puzzles是怎么工作的

65
00:02:05,478 --> 00:02:08,084
The main tool for this protocol is what's called a "puzzle"

66
00:02:05,478 --> 00:02:08,084
这个协议的主要工具叫做一个“谜题”

67
00:02:08,084 --> 00:02:10,164
and let me explain what I mean by a puzzle.

68
00:02:08,084 --> 00:02:10,164
让我解释一下“谜题”的意思

69
00:02:10,164 --> 00:02:14,020
A puzzle is a problem that's difficult to solve, but can be solved with some effort.

70
00:02:10,164 --> 00:02:14,020
一个谜题就是一个很难解决的问题，但可以通过一些努力去解决

71
00:02:14,020 --> 00:02:17,282
In other words, if you really put your mind to it you can solve it.

72
00:02:14,020 --> 00:02:17,282
换句话说，如果你真的想着这个问题那么你就可以解决它

73
00:02:17,282 --> 00:02:18,719
So let me give an example.

74
00:02:17,282 --> 00:02:18,719
那么让我举个例子

75
00:02:18,719 --> 00:02:22,826
Suppose we have a symmetric cipher that uses keys that are 128 bits long

76
00:02:18,719 --> 00:02:22,826
假设我们有一个对称密码，它使用128位长的密钥

77
00:02:22,826 --> 00:02:24,988
So just think of AES for example.

78
00:02:22,826 --> 00:02:24,988
可以想到AES例子

79
00:02:24,988 --> 00:02:31,080
And suppose what I do is a choose an AES key such that the first 96 bits are all 0

80
00:02:24,988 --> 00:02:31,080
假设我选择一个前96位都为零的AES密钥

81
00:02:31,080 --> 00:02:35,996
and only the remaining 32 bits are non-zero and just chosen at random.

82
00:02:31,080 --> 00:02:35,996
只有剩下的32位非零，并且随机选择

83
00:02:35,996 --> 00:02:42,502
Ok, so only 32 bits of this 128-bit key are random. The rest are all 0.

84
00:02:35,996 --> 00:02:42,502
好，那么只有这个128位密钥的32位是随机的。剩下的都为零

85
00:02:42,502 --> 00:02:46,683
And now what I do is I encrypt a fixed plaintext, for example,

86
00:02:42,502 --> 00:02:46,683
我要做的是加密一个固定的明文，

87
00:02:46,683 --> 00:02:52,504
simply the plaintext "message" using this 128-bit key that happens to be mostly 0.

88
00:02:46,683 --> 00:02:52,504
这个明文“message”使用的是大部分为零的128为密钥

89
00:02:52,504 --> 00:02:55,252
The result is what I would call a "puzzle".

90
00:02:52,504 --> 00:02:55,252
结果叫就叫做“谜题”

91
00:02:55,252 --> 00:02:58,250
The reason I call it a puzzle is because it's actually not that hard to find

92
00:02:55,252 --> 00:02:58,250
我称之为谜题的原因是事实上并不难找到

93
00:02:58,250 --> 00:03:03,279
the secret key P simply by trying all 2-to-the-32 possibilities.

94
00:02:58,250 --> 00:03:03,279
密钥P，只需通过2的32次方总可能

95
00:03:03,279 --> 00:03:10,376
Remember the first 96 bits are all 0, there are only 2-to-the-32 possible keys to try.

96
00:03:03,279 --> 00:03:10,376
记住前96位都为零，只能尝试2的32次方种可能的密钥

97
00:03:10,376 --> 00:03:16,407
And for each key we'll try to decrypt this puzzle and see if we get the plaintext "message".

98
00:03:10,376 --> 00:03:16,407
并且对于每一个密钥，我们将要试着去解密这个谜题，看看是否我们得到了明文“message”

99
00:03:16,407 --> 00:03:20,877
If so, we know that we've recovered the right solution, P.

100
00:03:16,407 --> 00:03:20,877
如果是这样，我们就知道我们找到了正确的解决方法P

101
00:03:20,877 --> 00:03:25,043
So within 2-to-the-32 work, we can actually solve this puzzle.

102
00:03:20,877 --> 00:03:25,043
因此，经过这2的32次方次的工作，我们事实上可以解决谜题

103
00:03:25,043 --> 00:03:28,507
Namely, we can find P just given puzzle(P).

104
00:03:25,043 --> 00:03:28,507
显然，给我们谜题（p）我们就可以找到P

105
00:03:28,507 --> 00:03:30,350
So the way this is going to work is as follows:

106
00:03:28,507 --> 00:03:30,350
工作方法如下

107
00:03:30,350 --> 00:03:33,524
Alice is going to start by generating a large number of puzzles.

108
00:03:30,350 --> 00:03:33,524
Alice一开始创建了大量的谜题

109
00:03:33,524 --> 00:03:36,473
In particular, she's going to generate 2-to-the-32 different puzzles.

110
00:03:33,524 --> 00:03:36,473
特别地，她将建立2的32次方个不同的谜题

111
00:03:36,473 --> 00:03:40,558
Now each of these puzzles, the way she generates it is as follows:

112
00:03:36,473 --> 00:03:40,558
现在她建立每一个谜题的方式如下题

113
00:03:40,558 --> 00:03:44,912
What' she'll do is she'll choose a 32-bit random puzzle P-i,

114
00:03:40,558 --> 00:03:44,912
她选择一个32位的随机谜题P-i

115
00:03:44,912 --> 00:03:48,106
(she does this for i = 1 to 2-to-the-32)

116
00:03:44,912 --> 00:03:48,106
（这里i从1到2的32次方）

117
00:03:48,106 --> 00:03:52,567
and then she's going to choose two more values, x-i and k-i that

118
00:03:48,106 --> 00:03:52,567
之后她将选择两个值，x-i，k-i

119
00:03:52,567 --> 00:03:54,108
happen to be 128-bits each.

120
00:03:52,567 --> 00:03:54,108
每一个都是128位的

121
00:03:54,108 --> 00:04:00,779
Now what she'll do is she'll use the puzzle P-i as an AES secret key.

122
00:03:54,108 --> 00:04:00,779
她要做的是她使用谜题P-i作为AES密钥

123
00:04:00,779 --> 00:04:06,581
So she'll create 128-bit key where 96 of the bits are set to 0.

124
00:04:00,779 --> 00:04:06,581
因此，她讲创建一个128位的密钥，它的96位置零

125
00:04:06,581 --> 00:04:09,987
And only the 32 least significant bits happen to be random.

126
00:04:06,581 --> 00:04:09,987
只有32有效位是随机的

127
00:04:09,987 --> 00:04:13,511
So this is a key that only has 32bits of entropy, if you like,

128
00:04:09,987 --> 00:04:13,511
所以这个密钥的墒是3位的

129
00:04:13,511 --> 00:04:15,934
and there are only 2-to-the-32 such keys.

130
00:04:13,511 --> 00:04:15,934
并且只有2的32次方个这样的密钥

131
00:04:15,934 --> 00:04:19,439
Now the plaintext that she'll encrypt using this key

132
00:04:15,934 --> 00:04:19,439
现在她用这个密钥加密的明文

133
00:04:19,439 --> 00:04:22,025
is this message that I wrote over here.

134
00:04:19,439 --> 00:04:22,025
我把它写在这

135
00:04:22,025 --> 00:04:23,890
Basically it's starts off with the word "Puzzle".

136
00:04:22,025 --> 00:04:23,890
基本上，它以“puzzle”开头

137
00:04:23,890 --> 00:04:27,253
That puzzle is identified by the identifier x-i,

138
00:04:23,890 --> 00:04:27,253
谜题被定义成x-i

139
00:04:27,253 --> 00:04:29,623
which happens to be 128 bits.

140
00:04:27,253 --> 00:04:29,623
正好是128位

141
00:04:29,623 --> 00:04:32,548
And to that we concatenate a value k-i which also happens

142
00:04:29,623 --> 00:04:32,548
我们在x-i后面附上k-i，k-i也刚好

143
00:04:32,548 --> 00:04:34,056
to be 128 bits.

144
00:04:32,548 --> 00:04:34,056
是128位

145
00:04:34,056 --> 00:04:38,270
So she does this for all 2-to-the-32 puzzles, and as a result

146
00:04:34,056 --> 00:04:38,270
所以她对所有2的32次方个谜题，因此

147
00:04:38,270 --> 00:04:41,267
she gets 2-to-the-32 different puzzles.

148
00:04:38,270 --> 00:04:41,267
她得到了2的32次方个不同的谜题

149
00:04:41,267 --> 00:04:44,283
She then goes ahead and sends these 2-to-the-32 puzzles to Bob.

150
00:04:41,267 --> 00:04:44,283
她继续将这些2的32次方个谜题发给Bob

151
00:04:44,283 --> 00:04:46,213
So what does Bob do?

152
00:04:44,283 --> 00:04:46,213
那么Bob会怎么做呢？

153
00:04:46,213 --> 00:04:49,790
Well Bob receives this flood of 2-to-the-32 different puzzles.

154
00:04:46,213 --> 00:04:49,790
Bob接收2的32次方个不同的谜题

155
00:04:49,790 --> 00:04:51,785
He's just going to choose one of them.

156
00:04:49,790 --> 00:04:51,785
他只选择其中的一个

157
00:04:51,785 --> 00:04:53,503
He doesn't even have to remember any of them.

158
00:04:51,785 --> 00:04:53,503
他甚至不必记住任何一个

159
00:04:53,503 --> 00:04:55,857
He just randomly lets most of them go by.

160
00:04:53,503 --> 00:04:55,857
他只要随机的忽略大部分的谜题

161
00:04:55,857 --> 00:04:57,997
And he happens to choose one of them.

162
00:04:55,857 --> 00:04:57,997
然后只选择其中的一个

163
00:04:57,997 --> 00:05:00,215
Let's say he chose puzzle number "j".

164
00:04:57,997 --> 00:05:00,215
假设他选择了谜题“j”

165
00:05:00,215 --> 00:05:04,150
Then he spends time 2-to-the-32 and solves this puzzle.

166
00:05:00,215 --> 00:05:04,150
然后他花2的32次方的时间去解这个谜题

167
00:05:04,150 --> 00:05:06,127
Well what does it mean to solve this puzzle?

168
00:05:04,150 --> 00:05:06,127
解决谜题是什么意思呢

169
00:05:06,127 --> 00:05:08,430
He's going to try all possible values of P-i.

170
00:05:06,127 --> 00:05:08,430
他将会尝试p-i所有可能的值

171
00:05:08,430 --> 00:05:11,971
He's going to decrypt the puzzle that he chose, and

172
00:05:08,430 --> 00:05:11,971
他将解密他选择的这一谜题

173
00:05:11,971 --> 00:05:15,490
he's going to check whether the first part of the plaintext starts

174
00:05:11,971 --> 00:05:15,490
并且他会检查是否明文的首部

175
00:05:15,490 --> 00:05:17,152
with the word puzzle.

176
00:05:15,490 --> 00:05:17,152
以puzzle开头

177
00:05:17,152 --> 00:05:19,481
And if it does, he knows that he's correctly solved that puzzle,

178
00:05:17,152 --> 00:05:19,481
如果是这样，他就会知道他正确地解了这个谜题

179
00:05:19,481 --> 00:05:22,866
and he basically obtains the data embedded in the puzzle

180
00:05:19,481 --> 00:05:22,866
并且基本上获得了谜题中嵌入的数据

181
00:05:22,866 --> 00:05:25,552
namely, x-j and k-j.

182
00:05:22,866 --> 00:05:25,552
x-j，k-j

183
00:05:25,552 --> 00:05:29,801
Remember x-j is this value that identifies the puzzle

184
00:05:25,552 --> 00:05:29,801
记住，x-j定义了谜题

185
00:05:29,801 --> 00:05:31,455
and k-j is going to be a secret that they use.

186
00:05:29,801 --> 00:05:31,455
而k-j是他是他使用的一个密钥

187
00:05:31,455 --> 00:05:35,988
So now he's solved the puzzle -- he knows that he's solved the puzzle correctly

188
00:05:31,455 --> 00:05:35,988
现在他解决了谜题--他知道他正确地解决了谜题

189
00:05:35,988 --> 00:05:38,087
and he obtained this x-j and k-j.

190
00:05:35,988 --> 00:05:38,087
并且得到了x-j和k-j

191
00:05:38,087 --> 00:05:40,667
What he'll do is he'll send x-j back to Alice

192
00:05:38,087 --> 00:05:40,667
他接下来要做的是将x-j传回给Alice

193
00:05:40,667 --> 00:05:45,885
-- just the value of x-j. k-j he keeps for himself, and keeps it a secret.

194
00:05:40,667 --> 00:05:45,885
--只是x-j的值。k-j他自己保留，而且将它保密

195
00:05:45,885 --> 00:05:49,186
And then Alice is simply going to lookup in her database

196
00:05:45,885 --> 00:05:49,186
然后Alice在她的谜题数据库中查找

197
00:05:49,186 --> 00:05:52,311
of puzzles, she's going to lookup puzzle number x-j,

198
00:05:49,186 --> 00:05:52,311
她将要去查找谜题x-j

199
00:05:52,311 --> 00:05:57,577
and then she knows Bob chose the key k-j.

200
00:05:52,311 --> 00:05:57,577
之后她就知道了Bob选择了密钥k-j

201
00:05:57,577 --> 00:05:59,608
And now they have this shared key.

202
00:05:57,577 --> 00:05:59,608
现在他们拥有了这个共享密钥

203
00:05:59,608 --> 00:06:02,875
So k-j is going to be the shared key they that use to communicate securely with one another.

204
00:05:59,608 --> 00:06:02,875
因此k-j就成为了他们用来互相安全交流的共享密钥

205
00:06:02,875 --> 00:06:07,262
So in a diagram the way this protocol works is as follows:

206
00:06:02,875 --> 00:06:07,262
所以在示意图中这个协议工作的方式如下

207
00:06:07,262 --> 00:06:11,228
Alice starts off by sending 2-to-the-32 puzzles to Bob.

208
00:06:07,262 --> 00:06:11,228
Alice开始向Bob传了2的32次方的谜题

209
00:06:11,228 --> 00:06:14,468
So we can generalize this. Let's say that she says n puzzles to Bob.

210
00:06:11,228 --> 00:06:14,468
我们可以推广这一说法。她想Bob发送了n个谜题

211
00:06:14,468 --> 00:06:19,152
And lets say that each puzzle takes work proportional to n to solve.

212
00:06:14,468 --> 00:06:19,152
每个谜题需要花费正比于n的时间去解决

213
00:06:19,152 --> 00:06:21,512
Bob solves one of these puzzles,

214
00:06:19,152 --> 00:06:21,512
Bob解出了其中一个谜题

215
00:06:21,512 --> 00:06:24,347
and then he sends back x-j to Alice.

216
00:06:21,512 --> 00:06:24,347
并且他将x-j回送给Alice

217
00:06:24,347 --> 00:06:28,494
So far each one of them has spent work n.

218
00:06:24,347 --> 00:06:28,494
目前双方都花了时间n

219
00:06:28,494 --> 00:06:31,595
And then Alice basically looks up puzzle x-j

220
00:06:28,494 --> 00:06:31,595
然后Alice查看谜题x_j

221
00:06:31,595 --> 00:06:35,339
and recovers the key that corresponds to this puzzle.

222
00:06:31,595 --> 00:06:35,339
还原出对应于谜题的密钥

223
00:06:35,339 --> 00:06:38,411
And as a result both of them now have a shared key

224
00:06:35,339 --> 00:06:38,411
因此现在双方有了一个共享密钥

225
00:06:38,411 --> 00:06:40,185
that they can use to communicate with one another.

226
00:06:38,411 --> 00:06:40,185
他们可以使用这个密钥来相互交流

227
00:06:40,185 --> 00:06:42,157
Ok so lets look at the work they did.

228
00:06:40,185 --> 00:06:42,157
我们来看他们所做的工作

229
00:06:42,157 --> 00:06:44,845
So the work that Alice did is that she had to prepare n puzzles.

230
00:06:42,157 --> 00:06:44,845
Alice必须准备n个谜题

231
00:06:44,845 --> 00:06:47,255
Well, preparing the puzzle takes constant time.

232
00:06:44,845 --> 00:06:47,255
准备谜题花掉固定长的时间

233
00:06:47,255 --> 00:06:51,006
She had to prepare n puzzles, so her work is roughly order n.

234
00:06:47,255 --> 00:06:51,006
她必须准备n个谜题，她的工作是0（n）的

235
00:06:51,006 --> 00:06:54,232
Bob chose one puzzle and solved it, so his work

236
00:06:51,006 --> 00:06:54,232
Bob选择一个谜题并解决

237
00:06:54,232 --> 00:06:57,402
is also proportional to order n. So linear in n.

238
00:06:54,232 --> 00:06:57,402
所以他的工作是与n成正比的 与n成线性

239
00:06:57,402 --> 00:07:00,238
Let's see what the eavesdropper has to do.

240
00:06:57,402 --> 00:07:00,238
我们看窃听者怎么办

241
00:07:00,238 --> 00:07:03,001
Well the poor eavesdropper sees these n puzzles go by

242
00:07:00,238 --> 00:07:03,001
可怜的窃听者看着n个谜题过去了

243
00:07:03,001 --> 00:07:05,366
and then he sees this x-j come back.

244
00:07:03,001 --> 00:07:05,366
然后他看到Bob返回了一个x_j

245
00:07:05,366 --> 00:07:08,678
And he doesn't really know which puzzle Bob actually solved.

246
00:07:05,366 --> 00:07:08,678
攻击者并不知道Bob解的是哪个谜题

247
00:07:08,678 --> 00:07:12,022
All he sees is this random value inside of the puzzle.

248
00:07:08,678 --> 00:07:12,022
他看到的只是谜题中的随机值

249
00:07:12,022 --> 00:07:14,480
And so to break this protocol, the eavesdropper would

250
00:07:12,022 --> 00:07:14,480
为了破解这个协议，窃听者会

251
00:07:14,480 --> 00:07:18,347
actually have to solve all puzzles until he finds the right puzzle

252
00:07:14,480 --> 00:07:18,347
解决所有谜题，直到他找到正确的谜题

253
00:07:18,347 --> 00:07:21,517
that has the value x-j in it, and then he will recover k-j.

254
00:07:18,347 --> 00:07:21,517
里面有x_j,那么攻击者就会还原k_j

255
00:07:21,517 --> 00:07:24,894
So my question to you is, "What is the attacker's work?"

256
00:07:21,517 --> 00:07:24,894
我给大家的问题是，“攻击者要做多少工作？”

257
00:07:24,894 --> 00:07:26,955
How much work did the eavesdropper have to spend

258
00:07:24,894 --> 00:07:26,955
攻击者必须做多少工作

259
00:07:26,955 --> 00:07:28,705
in order to break this protocol.

260
00:07:26,955 --> 00:07:28,705
才能破解这个协议

261
00:07:28,705 --> 00:07:33,536
So the answer is, of course, order n-squared.

262
00:07:28,705 --> 00:07:33,536
答案当然是0（n^2）

263
00:07:33,536 --> 00:07:35,487
You know, quadratic time in n.

264
00:07:33,536 --> 00:07:35,487
n平方的时间

265
00:07:35,487 --> 00:07:39,125
He had to solve n puzzles. Each puzzle takes time n to solve.

266
00:07:35,487 --> 00:07:39,125
他必须解决n个谜题，每个谜题花掉时间n

267
00:07:39,125 --> 00:07:42,306
And as a result he had to spend time order n-squared.

268
00:07:39,125 --> 00:07:42,306
因此他必须花掉时间n^2

269
00:07:42,306 --> 00:07:45,467
In our example we said that there were 2-to-the-32 puzzles

270
00:07:42,306 --> 00:07:45,467
在我们的例子中，我们说过有2的32次方个谜题

271
00:07:45,467 --> 00:07:47,986
and each one took 2-to-the-32 time to solve,

272
00:07:45,467 --> 00:07:47,986
每个谜题需要2的32次方的时间来解决

273
00:07:47,986 --> 00:07:51,820
so overall the attacker's work is roughly 2-to-the-64 steps.

274
00:07:47,986 --> 00:07:51,820
所以总的来看，攻击者需要做2的64次方步工作

275
00:07:51,820 --> 00:07:55,465
So you can see the problem with this protocol.

276
00:07:51,820 --> 00:07:55,465
大家可以看到这个协议的问题了

277
00:07:55,465 --> 00:07:58,151
First of all, the participants Alice and Bob had to do quite

278
00:07:55,465 --> 00:07:58,151
首先，参与者Alice和Bob自己

279
00:07:58,151 --> 00:07:59,584
a bit of work themselves.

280
00:07:58,151 --> 00:07:59,584
需要做大量的工作

281
00:07:59,584 --> 00:08:01,421
If you think about it, Alice basically had to send

282
00:07:59,584 --> 00:08:01,421
想一想，Alice必须发送

283
00:08:01,421 --> 00:08:03,481
2-to-the-32 puzzles to Bob.

284
00:08:01,421 --> 00:08:03,481
2的32次方个谜题给Bob

285
00:08:03,481 --> 00:08:07,168
That's many. many gigabytes that she had to send to Bob.

286
00:08:03,481 --> 00:08:07,168
她必须发很多GB的数据给Bob

287
00:08:07,168 --> 00:08:10,893
Like 16 or 32 gigabytes, depending on how big each puzzle is.

288
00:08:07,168 --> 00:08:10,893
比如16GB或32GB，取决于谜题的大小

289
00:08:10,893 --> 00:08:14,937
Bob had to spend time 2-to-the-32 to solve one of these puzzles.

290
00:08:10,893 --> 00:08:14,937
Bob必须花2的32次方的时间，来解决其中的一个谜题

291
00:08:14,937 --> 00:08:16,787
That would take a few seconds, too.

292
00:08:14,937 --> 00:08:16,787
这大概也会花几秒钟

293
00:08:16,787 --> 00:08:20,361
But then, all the security they got is that the attacker

294
00:08:16,787 --> 00:08:20,361
那么他们获得的所有的安全性在于

295
00:08:20,361 --> 00:08:23,435
can break this protocol in time 2-to-the-64.

296
00:08:20,361 --> 00:08:23,435
攻击者可以在2的64次方的时间内破解这一协议

297
00:08:23,435 --> 00:08:26,677
So 2-to-the-64 is still not considered particularly secure.

298
00:08:23,435 --> 00:08:26,677
2的64次方依然不能被认为是安全的

299
00:08:26,677 --> 00:08:29,366
As a result, the attacker, really, if he really wanted

300
00:08:26,677 --> 00:08:29,366
因此，如果攻击者真想

301
00:08:29,366 --> 00:08:31,502
to break this protocol, he could.

302
00:08:29,366 --> 00:08:31,502
破解这个协议，他是可以的

303
00:08:31,502 --> 00:08:33,738
So to make this secure, the participants would have to

304
00:08:31,502 --> 00:08:33,738
那么为了让这个协议安全，参与双方必须

305
00:08:33,738 --> 00:08:36,141
increase the parameter n.

306
00:08:33,738 --> 00:08:36,141
增加参数n

307
00:08:36,141 --> 00:08:38,391
And they would have to send, say, 2-to-the-64

308
00:08:36,141 --> 00:08:38,391
他们必须发送，比如说，2的64次方个谜题

309
00:08:38,391 --> 00:08:41,450
puzzles to one another, and then spend time 2-to-the-64

310
00:08:38,391 --> 00:08:41,450
给对方，然后花2的64次方的时间

311
00:08:41,450 --> 00:08:44,380
to solve each puzzle, and then the attacker's work

312
00:08:41,450 --> 00:08:44,380
去解决这个谜题，那么攻击者的工作

313
00:08:44,380 --> 00:08:47,791
would be 2-to-the-128, which is considered secure.

314
00:08:44,380 --> 00:08:47,791
将是2的128次方，可认为是安全的了

315
00:08:47,791 --> 00:08:50,165
But having the participants spend time 2-to-the-64 to

316
00:08:47,791 --> 00:08:50,165
但是参与者花了2的64次方的时间

317
00:08:50,165 --> 00:08:53,217
set up a secure session is a little bit too much

318
00:08:50,165 --> 00:08:53,217
来建立一个安全的会话，对每个参与者来说

319
00:08:53,217 --> 00:08:55,429
to ask each of these participants.

320
00:08:53,217 --> 00:08:55,429
有点吃力了

321
00:08:55,429 --> 00:08:58,954
So this is why this protocol is not particularly used in practice.

322
00:08:55,429 --> 00:08:58,954
所以这就是为什么这个协议不实用

323
00:08:58,954 --> 00:09:01,496
But nevertheless there's a really nice idea here

324
00:08:58,954 --> 00:09:01,496
不过这里有一个很好的想法

325
00:09:01,496 --> 00:09:04,194
in that the participants had to spend linear time,

326
00:09:01,496 --> 00:09:04,194
参与者必须花线性的时间

327
00:09:04,194 --> 00:09:06,748
whereas the attacker had to spend quadratic time.

328
00:09:04,194 --> 00:09:06,748
而攻击者必须花平方的时间

329
00:09:06,748 --> 00:09:09,083
So there's a "quadratic gap" between the amount of

330
00:09:06,748 --> 00:09:09,083
这就有一个“平方鸿沟”

331
00:09:09,083 --> 00:09:11,604
work that the participants had to do, versus what the attacker

332
00:09:09,083 --> 00:09:11,604
横亘在参与者和攻击者的工作之间

333
00:09:11,604 --> 00:09:13,607
had to do to break the protocol.

334
00:09:11,604 --> 00:09:13,607
当攻击者想破解这个协议

335
00:09:13,607 --> 00:09:16,926
So a natural question is, "Can we actually do better

336
00:09:13,607 --> 00:09:16,926
那么一个很自然的问题是，我们能否做得更好

337
00:09:16,926 --> 00:09:20,132
than a quadratic gap, just using symmetric ciphers?"

338
00:09:16,926 --> 00:09:20,132
只使用对称密码，做得比平方鸿沟更好呢？

339
00:09:20,132 --> 00:09:21,602
In other words, just using tools

340
00:09:20,132 --> 00:09:21,602
换句话说，使用我们前面四个礼拜

341
00:09:21,602 --> 00:09:24,144
that we developed in the first four weeks of the class.

342
00:09:21,602 --> 00:09:24,144
在本课程中见过的技术

343
00:09:24,144 --> 00:09:27,384
And the answer really is that this is unknown.

344
00:09:24,144 --> 00:09:27,384
答案是未知的

345
00:09:27,384 --> 00:09:30,633
We don't know whether a quadratic gap is the best that we can do.

346
00:09:27,384 --> 00:09:30,633
我们不知道平方鸿沟是否是我们所能做到的最好的结果

347
00:09:30,633 --> 00:09:32,993
You might even try to think about this a bit.

348
00:09:30,633 --> 00:09:32,993
大家可以试着想一想

349
00:09:32,993 --> 00:09:36,062
How would you use AES or SHA-256 to do key exchange

350
00:09:32,993 --> 00:09:36,062
如何使用AES或SHA-256来进行密钥交换

351
00:09:36,062 --> 00:09:38,556
that achieves better than a quadratic gap.

352
00:09:36,062 --> 00:09:38,556
可以获得比平方鸿沟更好的结果？

353
00:09:38,556 --> 00:09:40,759
But I can tell you that we believe that quadratic

354
00:09:38,556 --> 00:09:40,759
不过我可以告诉大家，我们相信

355
00:09:40,759 --> 00:09:41,931
is the best we can do.

356
00:09:40,759 --> 00:09:41,931
平方鸿沟是我们所能做到的最好的了

357
00:09:41,931 --> 00:09:44,436
And there are even some negative results along those lines.

358
00:09:41,931 --> 00:09:44,436
这里还有一些负面的结果

359
00:09:44,436 --> 00:09:47,557
So roughly speaking, there is a result that says

360
00:09:44,436 --> 00:09:47,557
不严格地说，有一个结果说

361
00:09:47,557 --> 00:09:51,177
that, in fact, if we treat the block cipher or the hash function

362
00:09:47,557 --> 00:09:51,177
事实上，如果我们把分组密码或哈希函数

363
00:09:51,177 --> 00:09:53,736
that we use as a black box oracle -- in other words

364
00:09:51,177 --> 00:09:53,736
当做黑盒神谕来使用，换句话说

365
00:09:53,736 --> 00:09:57,124
all the participants can do is just query the block cipher

366
00:09:53,736 --> 00:09:57,124
参与者只能询问分组密码

367
00:09:57,124 --> 00:09:59,165
or query the hash function at certain points

368
00:09:57,124 --> 00:09:59,165
或询问哈希函数在特定点的值

369
00:09:59,165 --> 00:10:03,237
and receive the results -- if that's all they're allowed to do,

370
00:09:59,165 --> 00:10:03,237
并获得结果，如果这些是参与者所能做的全部

371
00:10:03,237 --> 00:10:05,729
in other words, they're not allowed to actually use the implementation

372
00:10:03,237 --> 00:10:05,729
换句话说，参与者不能实际使用

373
00:10:05,729 --> 00:10:08,541
of the cipher, or the hash function, then in fact

374
00:10:05,729 --> 00:10:08,541
分组密码或哈希函数的实现

375
00:10:08,541 --> 00:10:12,414
there is a result that says that if the participants only query

376
00:10:08,541 --> 00:10:12,414
那么事实上有一个结果告诉我们，如果参与者只能

377
00:10:12,414 --> 00:10:15,351
the block cipher at n points, there will always be an attack

378
00:10:12,414 --> 00:10:15,351
询问分组密码在n个点的值，那么总有一个攻击

379
00:10:15,351 --> 00:10:18,707
that runs in time n-squared.

380
00:10:15,351 --> 00:10:18,707
运行在n平方的时间里

381
00:10:18,707 --> 00:10:21,549
So again this suggests that if all you do is use

382
00:10:18,707 --> 00:10:21,549
这就是说，如果你只能使用

383
00:10:21,549 --> 00:10:24,094
the block cipher as a black box that you query,

384
00:10:21,549 --> 00:10:24,094
分组密码作为一个黑盒进行询问

385
00:10:24,094 --> 00:10:26,128
then whatever key exchange you come up with,

386
00:10:24,094 --> 00:10:26,128
那么无论交换什么密钥

387
00:10:26,128 --> 00:10:29,371
there will always be a quadratic attack on this key exchange.

388
00:10:26,128 --> 00:10:29,371
这个密钥交换总有一个平方时间的攻击

389
00:10:29,371 --> 00:10:31,747
And, in fact, at the end of this module, I point to this

390
00:10:29,371 --> 00:10:31,747
事实上，在本章结束时，我指出这篇论文

391
00:10:31,747 --> 00:10:34,713
paper -- it's a fairly recent paper from 2009 -- that shows

392
00:10:31,747 --> 00:10:34,713
最近的一篇2009年的论文

393
00:10:34,713 --> 00:10:36,591
that quadratic is best we can do.

394
00:10:34,713 --> 00:10:36,591
证明了平方是我们能做的最好的

395
00:10:36,591 --> 00:10:38,985
If you want to read more about this impossibility result

396
00:10:36,591 --> 00:10:38,985
如果大家想了解更多的关于这种不可能性的结果

397
00:10:38,985 --> 00:10:41,126
you know, go ahead and take a look at this paper.

398
00:10:38,985 --> 00:10:41,126
去读这篇文章吧

399
00:10:41,126 --> 00:10:44,093
It's actually a very readable paper, and you should be able to understand it.

400
00:10:41,126 --> 00:10:44,093
这篇论文可读性强，大家应该能理解它

401
00:10:44,093 --> 00:10:46,104
And so the question is what to do next.

402
00:10:44,093 --> 00:10:46,104
那么问题是接下来怎么办

403
00:10:46,104 --> 00:10:47,470
So now we're kind of stuck.

404
00:10:46,104 --> 00:10:47,470
我们有点困住了

405
00:10:47,470 --> 00:10:49,013
We said that with block ciphers, we really can't do

406
00:10:47,470 --> 00:10:49,013
我们说过用分组密码，我们不能

407
00:10:49,013 --> 00:10:51,259
better than a quadratic gap.

408
00:10:49,013 --> 00:10:51,259
做得比平方鸿沟更好

409
00:10:51,259 --> 00:10:52,635
And so what do we do?

410
00:10:51,259 --> 00:10:52,635
那我们怎么办

411
00:10:52,635 --> 00:10:55,029
So this was kind of the starting point of public-key cryptography.

412
00:10:52,635 --> 00:10:55,029
那么这就是公钥密码学的起点

413
00:10:55,029 --> 00:10:57,727
And the realization is that we need more than just

414
00:10:55,029 --> 00:10:57,727
我们发现，我们需要

415
00:10:57,727 --> 00:11:00,851
generic block ciphers and generic hash functions.

416
00:10:57,727 --> 00:11:00,851
比通用分组密码和哈希函数更多的技术

417
00:11:00,851 --> 00:11:04,682
We actually need functions that have very, very special properties.

418
00:11:00,851 --> 00:11:04,682
我们实际上需要具备非常特殊性质的函数

419
00:11:04,682 --> 00:11:08,806
And to build these functions, we actually have to rely on some algebra.

420
00:11:04,682 --> 00:11:08,806
为了构建这些函数，我们实际上必须依赖某些代数

421
00:11:08,806 --> 00:11:11,506
So in the next few segments we're going to look

422
00:11:08,806 --> 00:11:11,506
下面几节我们看

423
00:11:11,506 --> 00:11:14,002
at some algebraic constructions and then we'll see

424
00:11:11,506 --> 00:11:14,002
一些代数机制，然后我们看

425
00:11:14,002 --> 00:11:15,760
how to use those for key exchange and for

426
00:11:14,002 --> 00:11:15,760
如何使用它们来进行密钥交换

427
00:11:15,760 --> 00:11:20,000


428
00:11:15,760 --> 00:11:20,003
many other things in public-key cryptography.

