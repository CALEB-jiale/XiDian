1
00:00:00,000 --> 00:00:04,528
The next thing we're going to look at is
how to compute modular large integers. So

2
00:00:00,000 --> 00:00:04,528
我们接下来要看的是如何计算大整数的模

3
00:00:04,528 --> 00:00:09,023
the first question is how do we represent
large integers in a computer? So that's

4
00:00:04,528 --> 00:00:09,023
首先我们要探讨如何在计算机中表示大整数

5
00:00:09,023 --> 00:00:13,615
actually fairly straightforward. So
imagine we're on a 64 bit machine, what we

6
00:00:09,023 --> 00:00:13,615
这实际上相当简单 所以想象我们在操作64比特的机器

7
00:00:13,615 --> 00:00:18,361
would do is we would break the number we
want to represent, into 32 bit buckets And

8
00:00:13,615 --> 00:00:18,361
我们要做的是去分解这个我们要表示的数 32位一组

9
00:00:18,361 --> 00:00:22,686
then, we will basically have these n/32 bit buckets, and together they will

10
00:00:18,361 --> 00:00:22,686
然后我们就会有n/32个组 它们将

11
00:00:22,686 --> 00:00:26,906
represent the number that we want to store
on the computer. Now, I should mention

12
00:00:22,686 --> 00:00:26,906
表示我们想要在计算机上储存的数 现在我要提到

13
00:00:26,906 --> 00:00:30,705
that I'm only giving 64 bit registers as
an example. In fact, many modern

14
00:00:26,906 --> 00:00:30,705
我只是给出一个64位寄存器作为例子 事实上 很多现代的

15
00:00:30,705 --> 00:00:34,977
processors have 128 bit registers or more,
and you can even do multiplications on

16
00:00:30,705 --> 00:00:34,977
处理器拥有128比特或更多比特的寄存器 你甚至可以用它们做乘法

17
00:00:34,977 --> 00:00:38,987
them. So normally you would actually use
much larger blocks than just 32 bits. The

18
00:00:34,977 --> 00:00:38,987
所以通常情况下你 会使用比32位更大的块

19
00:00:38,987 --> 00:00:42,943
reason, by the way, you want to limit
yourself to 32 bits is so that you can

20
00:00:38,987 --> 00:00:42,943
原因是 顺便一说 你想要将你自己限制在32比特的块中这样你就可以将

21
00:00:42,943 --> 00:00:46,952
multiply two blocks together, and the
result will still be less than 64 bits,

22
00:00:42,943 --> 00:00:46,952
两个块相乘，结果仍然会小于64比特

23
00:00:46,952 --> 00:00:51,189
less than the word size on the machine. So
now let's look at particular arithmetic

24
00:00:46,952 --> 00:00:51,189
比机器的字长要短 所以让我们看看特定的算术运算

25
00:00:51,189 --> 00:00:54,788
operations and see how long each one
takes. So addition and subtraction

26
00:00:51,189 --> 00:00:54,788
然后看看每个需要多长 说到加法和减法

27
00:00:54,788 --> 00:00:58,742
basically what you would do is that
addition would carry or subtraction would

28
00:00:54,788 --> 00:00:58,742
基本上你要做的就是加法会进位或者减法会借位

29
00:00:58,742 --> 00:01:03,000
borrow and those are basically linear time
operations. In other words, if you want to

30
00:00:58,742 --> 00:01:03,000
这些基本上是线性时间的操作 换句话说 如果你想要

31
00:01:03,000 --> 00:01:06,954
add or subtract two n bit integers the
running time is basically

32
00:01:03,000 --> 00:01:06,954
加或者减两个n比特整数 运算时间基本上

33
00:01:06,954 --> 00:01:12,626
linear in n. Multiplication
naively will take quadratic time. In fact,

34
00:01:06,954 --> 00:01:12,626
是关于n线性的 乘法运算将需要平方级的时间 事实上

35
00:01:12,626 --> 00:01:16,676
this is what's called the high school algorithm
algorithm. This is what you kind of

36
00:01:12,626 --> 00:01:16,676
这些算法被称为高中算法 这就是你在学校

37
00:01:16,676 --> 00:01:21,114
learned in school, where if you think
about this for a minute you'll see that,

38
00:01:16,676 --> 00:01:21,114
稍微学过的东西 如果你花时间考虑几分钟你会发现

39
00:01:21,114 --> 00:01:25,662
that algorithm basically is quadratic in
the length of the numbers that are being

40
00:01:21,114 --> 00:01:25,662
这个算法基本上就是两个乘数长度的二次方

41
00:01:25,662 --> 00:01:30,156
multiplied. So a big surprise in the 1960s
was an algorithm due to Karatsuba that

42
00:01:25,662 --> 00:01:30,156
所以1960年代的一个大惊喜来是自Karatsuba的算法

43
00:01:30,156 --> 00:01:34,150
actually achieves much better than
quadratic time in fact, it achieved a

44
00:01:30,156 --> 00:01:34,150
它能达到比二次时间更高的效率 事实上，它达到了

45
00:01:34,150 --> 00:01:38,567
running time of n to the 1.585. And
there's actually no point in me showing

46
00:01:34,150 --> 00:01:38,567
n^1.585的运行时间 事实上我向你展示这个算法

47
00:01:38,567 --> 00:01:43,166
you how the algorithm actually worked,
I'll just mention the main idea What

48
00:01:38,567 --> 00:01:43,166
如何运作是没有意义的 我就提一下Karastuba的发现里的

49
00:01:43,166 --> 00:01:48,071
Karatsuba realized, is that in fact when
you want to multiply two numbers, you can

50
00:01:43,166 --> 00:01:48,071
主要思想 就是如果你乘两个数 你可以

51
00:01:48,071 --> 00:01:52,976
write them as, you can take the first
number x, write it as 2 to the b times

52
00:01:48,071 --> 00:01:52,976
把它们写作 你可以把第一个数字x 写作(2^b)*x2+x1

53
00:01:52,976 --> 00:01:57,882
x2 plus x1. Where x2 and x1 are roughly
the size of the square root of x. Okay, so

54
00:01:52,976 --> 00:01:57,882
x2和x1大约是x的平方根的大小

55
00:01:57,882 --> 00:02:02,910
we can kind of break the number x into the
left part of x and the right part of x.

56
00:01:57,882 --> 00:02:02,910
我们可以把数x分成x的左半部分和x的右半部分

57
00:02:02,910 --> 00:02:07,654
And basically, you're writing x as if it
was written base 2 to the b. So it's got

58
00:02:02,910 --> 00:02:07,654
基本上你 你写x就像是写2^b 所以

59
00:02:07,654 --> 00:02:12,398
two digits base 2 to the b. And you do
the same thing with, y. You write y base

60
00:02:07,654 --> 00:02:12,398
这里有两个数字2^b 然后你对数字y做同样的操作 你用2^b表示y

61
00:02:12,398 --> 00:02:16,911
2 to the b. Again, you would write it
as, the sum of the left half plus the

62
00:02:12,398 --> 00:02:16,911
同样的 你应该把它写成 左半部分和右半部分的和

63
00:02:16,911 --> 00:02:21,540
right half, And then, normally, if you try
to do this multiplication, when you open

64
00:02:16,911 --> 00:02:21,540
然后通常情况下 如果你试着做这个乘法 如果你打开

65
00:02:21,540 --> 00:02:27,486
up the parentheses. You see that, this
would require 4 multiplications, right?

66
00:02:21,540 --> 00:02:27,486
这个括号 你看它会需要四次乘法

67
00:02:27,486 --> 00:02:33,365
It would require x2 times y2, x2 times y1,
x1 times y2, and x1 times y1. What

68
00:02:27,486 --> 00:02:33,365
它需要x2*y2，x2*y1，x1*y2，和x1*y1

69
00:02:33,365 --> 00:02:39,879
Karatsuba realized is there's a way to do
this multiplication of x by y using only

70
00:02:33,365 --> 00:02:39,879
Karatsuba发现有一种做这个乘法的方法只需要

71
00:02:39,879 --> 00:02:45,847
three multiplications of x1 x2 y1 y2. So it's just a big multiplication of x times y

72
00:02:39,879 --> 00:02:45,847
乘三次x1 x2 y1 y2 所以它只是一个x*y的大乘法

73
00:02:45,847 --> 00:02:50,214
only it takes three little multiplications. You can now recursively

74
00:02:45,847 --> 00:02:50,214
只需要3次简单的乘法 你现在可以递归地

75
00:02:50,214 --> 00:02:55,087
apply exactly the same procedure to
multiplying x2 by y2, and x2 by y1, and so

76
00:02:50,214 --> 00:02:55,087
应用相同的过程来乘x2和y2，还有x2和y1 等等

77
00:02:55,087 --> 00:02:59,960
on and so forth. And you would get this
recursive algorithm. And if you do the

78
00:02:55,087 --> 00:02:59,960
你会得到这个递归算法 如果你

79
00:02:59,960 --> 00:03:05,087
recursive analysis, you will see that
basically, you get a running time of n to the 1.585.

80
00:02:59,960 --> 00:03:05,087
做一下递归分析 你会发现基本上你会用到n^1.585的运行时间

81
00:03:05,087 --> 00:03:13,640
This number is basically, the 1.585 is basically, log of 3 base 2.

82
00:03:05,087 --> 00:03:13,640
这个数基本上是 1.585基本上是以2为底3的对数

83
00:03:13,640 --> 00:03:17,836
Surprisingly, it turns out that Karatsuba
isn't even the best multiplication

84
00:03:13,640 --> 00:03:17,836
令人惊讶的是 原来Karatsuba在这里也不是最好的乘法

85
00:03:17,836 --> 00:03:23,912
algorithm out there. It turns out that, in fact, you
can do multiplication in about n<i>log(n) time.</i>

86
00:03:17,836 --> 00:03:23,912
算法 事实证明 你可以在约为n*logn的时间内做乘法

87
00:03:23,912 --> 00:03:28,678
So you can do multiplication in almost linear time.
However, this is an extremely asymptotic results.

88
00:03:23,912 --> 00:03:28,678
所以你几乎可以在线性时间里做乘法 然而,这是一个极其近似结果。

89
00:03:28,678 --> 00:03:31,477
The big O here hides very big constants. And as a

90
00:03:28,678 --> 00:03:31,477
这里的大写O隐藏着很大的常量 而且作为结果来说

91
00:03:31,477 --> 00:03:35,452
result, this algorithm only becomes
practical when the numbers are absolutely

92
00:03:31,477 --> 00:03:35,452
这个算法仅仅在数绝对庞大的时候有用

93
00:03:35,452 --> 00:03:39,152
enormous. And so this algorithm is
actually not used very often. But

94
00:03:35,452 --> 00:03:39,152
所以实际上这种算法并不经常被使用

95
00:03:39,152 --> 00:03:43,183
Karatsuba's algorithm is very practical.
And in fact, most crypto-libraries

96
00:03:39,152 --> 00:03:43,183
但是Karatstba的算法就非常实用 事实上 很多密码类库

97
00:03:43,183 --> 00:03:47,885
implement Karatsuba's algorithm for
multiplication. However, for simplicity

98
00:03:43,183 --> 00:03:47,885
使用Karatsuba的算法做乘法 然而 为了简单一些

99
00:03:47,885 --> 00:03:51,923
here, I'm just gonna ignore Karatsuba's
algorithm, and just for simplicity, I'm

100
00:03:47,885 --> 00:03:51,923
我准备忽略Karatsuba的算法 只是为了简单起见

101
00:03:51,923 --> 00:03:55,960
gonna assume that multiplication runs in
quadratic time. But in your mind, you

102
00:03:51,923 --> 00:03:55,960
我要假设这乘法在平方级时间内运行 但是在你脑海里

103
00:03:55,960 --> 00:03:59,893
should always be thinking all multiplication really is a little bit faster than quadratic.

104
00:03:55,960 --> 00:03:59,893
你要时刻记得所有乘法运算都是比平方级时间要快的

105
00:03:59,893 --> 00:04:04,794
And then the next question after multiplication is what about

106
00:03:59,893 --> 00:04:04,794
然后乘法后的下一个问题是关于

107
00:04:04,794 --> 00:04:10,297
division with remainder and it turns out
that's also a quadratic time algorithm.

108
00:04:04,794 --> 00:04:10,297
有余除法 原来这也是个平方级时间的运算

109
00:04:10,297 --> 00:04:15,420
So the main operation that remains, and one
that we've used many times so far, and

110
00:04:10,297 --> 00:04:15,420
所以主要操作不变 而且也是我们用过很多次的

111
00:04:15,420 --> 00:04:20,346
I've never, actually never, ever told you
how to actually compute it, is this

112
00:04:15,420 --> 00:04:20,346
我从未 确实从未 曾经告诉你们该如何去计算它 这是

113
00:04:20,346 --> 00:04:26,339
question of exponentiation. So let's solve
this exponentiation problem a bit more

114
00:04:20,346 --> 00:04:26,339
一个有关幂运算的问题 所以让我们来更加抽象地解决这个幂运算的问题

115
00:04:26,339 --> 00:04:31,558
abstractly. So imagine we have a finite
cyclic group G. All this means is that

116
00:04:26,339 --> 00:04:31,558
想象我们有一个有限循环群G 这意味着

117
00:04:31,558 --> 00:04:37,115
this group is generated from the powers of
some generator little g. So for example

118
00:04:31,558 --> 00:04:37,115
这个群由一些有限生成元g的幂产生 比如

119
00:04:37,115 --> 00:04:42,673
think of this group as simply ZP<i>, and think of little g as some generator of</i>

120
00:04:37,115 --> 00:04:42,673
简单想象这个群Z*_p 想象小g作为大G的某个生成元

121
00:04:42,673 --> 00:04:48,886
big G. The reason I'm sitting in this way,
is I'm, I want you to start getting used

122
00:04:42,673 --> 00:04:48,886
我这样做的原因是 我希望你可以习惯

123
00:04:48,886 --> 00:04:54,023
to this abstraction where we deal with a
generic group G and ZP really is just

124
00:04:48,886 --> 00:04:54,023
这个抽象概念 我们在处理一般的群G 而ZP真的只是

125
00:04:54,023 --> 00:04:58,915
one example of such a group. But, in fact,
there are many other examples of finite

126
00:04:54,023 --> 00:04:58,915
这种群的一个例子 但是 事实上 还有很多其他有限循环群的例子

127
00:04:58,915 --> 00:05:03,379
cyclic groups. And again I want to
emphasis basically that group G, all it

128
00:04:58,915 --> 00:05:03,379
我还要重申基本上这个群G 只简单地

129
00:05:03,379 --> 00:05:08,087
is, it's simply this powers of this
generator up to the order of the group.

130
00:05:03,379 --> 00:05:08,087
是这个生成元的幂数排列到群的阶数组成的群

131
00:05:08,087 --> 00:05:15,153
I'll write it as G to the Q. So our goal
now is given this element g, and some

132
00:05:08,087 --> 00:05:15,153
我将它写成g的q次方 所以现在我么的目标是基于这种元素g 和一些

133
00:05:15,153 --> 00:05:20,797
exponent x, our goal is to compute the
value of g to the x. Now normally what you

134
00:05:15,153 --> 00:05:20,797
指数x 我们的目标是计算g^x的值 所以通常

135
00:05:20,797 --> 00:05:24,810
would say is, you would think well, you
know, if x is equal to 3  then I'm

136
00:05:20,797 --> 00:05:24,810
你要说 你要想的是 如果 x=3

137
00:05:24,810 --> 00:05:28,898
gonna compute you know, g cubed. Well,
there's really nothing to do. All I do is

138
00:05:24,810 --> 00:05:28,898
然后我将去计算g立方 这真的没什么关系

139
00:05:28,898 --> 00:05:32,795
I just do g times g times g and I get g
cubed, which is what I wanted. So that's

140
00:05:28,898 --> 00:05:32,795
我要做的只是g乘g乘g 然后我得到了g的立方 这就是我要的

141
00:05:32,795 --> 00:05:36,790
actually pretty easy. But in fact, that's
not the case that we're interested in. In

142
00:05:32,795 --> 00:05:36,790
所以这是很简单的 但是实际上 这不是我们感兴趣的东西

143
00:05:36,790 --> 00:05:40,638
our case, our exponents are gonna be
enormous. And so if you try, you know,

144
00:05:36,790 --> 00:05:40,638
对我们来说 我们的指数会是很大的 而且如果你去尝试

145
00:05:40,638 --> 00:05:45,644
think of like a 500-bit number and so if
you try to compute g to the power of a

146
00:05:40,638 --> 00:05:45,644
想象一个500比特的数 如果你试着去计算g的一个五百比特数的次方

147
00:05:45,644 --> 00:05:50,710
500-bit number simply by multiplying g by
g by g by g this is gonna take quite a

148
00:05:45,644 --> 00:05:50,710
只是简单地做乘法g乘g乘g乘g 这需要很长时间

149
00:05:50,710 --> 00:05:55,716
while. In fact it will take exponential
time which is not something that we want

150
00:05:50,710 --> 00:05:55,716
事实上它将花费指数级的时间 这不是我们想要的

151
00:05:55,897 --> 00:06:00,722
to do. So the question is whether even
though x is enormous, can we still compute

152
00:05:55,897 --> 00:06:00,722
所以问题是尽管x非常大 我们是否依然能够比较快地计算出

153
00:06:00,722 --> 00:06:05,667
g to the x relatively fast and the answer
is yes and the algorithm that does that

154
00:06:00,722 --> 00:06:05,667
g^x 答案是可以的 相应的算法

155
00:06:05,667 --> 00:06:10,822
is called a repeated squaring algorithm.
And so let me show you how repeated

156
00:06:05,667 --> 00:06:10,822
叫做重复平方算法 现在让我向你们展示下重复平方算法是如何工作的

157
00:06:10,822 --> 00:06:15,593
squaring works. So let's take as an
example, 53. Naively you would have to do

158
00:06:10,822 --> 00:06:15,593
让我们看一个例子 x=53 你将要计算

159
00:06:15,593 --> 00:06:20,295
53 multiplications of g by g by g by g
until you get to g by the 53 but I want to

160
00:06:15,593 --> 00:06:20,295
53个g的乘积 g*g*g... 直到第53个g 但是我想向你们

161
00:06:20,295 --> 00:06:25,275
show you how you can do it very quickly.
So what we'll do is we'll write 53 in

162
00:06:20,295 --> 00:06:25,275
展示如何能很快的完成它 我们要做的是 将53写成二进制

163
00:06:25,275 --> 00:06:30,497
binary. So here this is the binary
representation of 53. And all that means

164
00:06:25,275 --> 00:06:30,497
所以这就是53的二进制表示 这意味着

165
00:06:30,497 --> 00:06:36,282
is, you notice this one corresponds to 32,
this one corresponds to 16, this one

166
00:06:30,497 --> 00:06:36,282
注意这个1代表32 这个1代表16

167
00:06:36,282 --> 00:06:41,292
corresponds to 4, and this one
corresponds to 1. So really 53 is 32

168
00:06:36,282 --> 00:06:41,292
这个1代表4 这个1代表1 所以事实上

169
00:06:41,292 --> 00:06:47,038
plus 16 plus 4 plus 1. But what
that means is that g to the power of 53 is

170
00:06:41,292 --> 00:06:47,038
53=31+16+4+1 这意味着g^53=g^(32+16+4+1)

171
00:06:47,038 --> 00:06:51,801
g to the power of 32+16+4+1. And we can
break that up, using again, the rules of

172
00:06:47,038 --> 00:06:51,801
我们可以把它分开 再一次使用指数的运算法则

173
00:06:51,801 --> 00:06:57,235
exponentiation. We can break that up as g
to the 32 times g to the 16 times g to the

174
00:06:51,801 --> 00:06:57,235
我们可以把那个分成(g^32)*(g^16)*(g^4)*(g^1)

175
00:06:57,235 --> 00:07:02,938
4 times g to the 1, Now that should start
giving you an idea for how to compute g to

176
00:06:57,235 --> 00:07:02,938
现在这应该能给你一个如何快速计算g^53的主意了

177
00:07:02,938 --> 00:07:07,141
the 53 very quickly. What we'll do is,
simply, we'll take g and we'll start

178
00:07:02,938 --> 00:07:07,141
我们要做的就是 简单地 将g平方

179
00:07:07,141 --> 00:07:11,459
squaring it. So what square wants, g wants
to get g squared. We square it again to

180
00:07:07,141 --> 00:07:11,459
得到g^2 再将它平方得到g^4

181
00:07:11,459 --> 00:07:15,778
get g to the 4, turn g to the 8.
Turn g to the 16, g to the 32. So

182
00:07:11,459 --> 00:07:15,778
再得到g^8 g^16 g^32

183
00:07:15,778 --> 00:07:20,607
we've computed all these squares of g. And
now, what we're gonna do is we're simply

184
00:07:15,778 --> 00:07:20,607
所以我们已经计算完了所有对g的平方 现在我们要做的是

185
00:07:20,607 --> 00:07:25,719
gonna multiply the appropriate powers to
give us the g to the 53. So this is g to

186
00:07:20,607 --> 00:07:25,719
将合适的幂相乘来得到g^53 也就是

187
00:07:25,719 --> 00:07:30,390
the one times g to the 4 times g to the 16 times g to the 32, is basically

188
00:07:25,719 --> 00:07:30,390
(g^1)*(g^4)*(g^16)*(g^32)

189
00:07:30,390 --> 00:07:35,376
gonna give us the value that we want,
which is g to the 53. So here you see that

190
00:07:30,390 --> 00:07:35,376
这就得到了我们想要的值 也就是g^53 所以在这你看到

191
00:07:35,376 --> 00:07:40,173
all we had to do was just compute, let's
see, we had to do one, two, three, four,

192
00:07:35,376 --> 00:07:40,173
我们所做的仅是计算 看一下 我们要做1 2 3 4

193
00:07:40,173 --> 00:07:49,343
five squaring, plus four more multiplications
so with 9 multiplications we computed g

194
00:07:40,173 --> 00:07:49,343
5次平方 加上4次额外的乘法 所以通过9次乘法运算 我们计算出了

195
00:07:49,343 --> 00:07:53,726
to the 53. Okay so that's pretty
interesting. And it turns out this is a

196
00:07:49,343 --> 00:07:53,726
g^53 这很有趣 而且这是一个普遍的现象

197
00:07:53,726 --> 00:07:58,253
general phenomena that allows us to raise
g to very, very high powers and do it very

198
00:07:53,726 --> 00:07:58,253
我们能够很快地将g的幂数升到非常高

199
00:07:58,253 --> 00:08:02,509
quickly. So let me show you the algorithm,
as I said this is called the repeated

200
00:07:58,253 --> 00:08:02,509
让我给你们演示一下这个算法 正如我说过的 这叫做重复平方算法

201
00:08:02,509 --> 00:08:06,497
squaring algorithm. So the input to the
algorithm is the element g and the

202
00:08:02,509 --> 00:08:06,497
这个算法的输入是元素g

203
00:08:06,497 --> 00:08:10,858
exponent x. And the output is g to the x.
So what we're gonna do is we're gonna

204
00:08:06,497 --> 00:08:10,858
和指数x 输出是g^x 我们要做的是

205
00:08:10,858 --> 00:08:15,415
write x in binary notation. So let's say
that x has n bits. And this is the actual

206
00:08:10,858 --> 00:08:15,415
将x写成二进制记法 让我们假设x有n位

207
00:08:15,415 --> 00:08:19,521
bit representation of x as a binary
number. And then what we'll do is the

208
00:08:15,415 --> 00:08:19,521
这就是x的二进制表示 然后我们做如下事情

209
00:08:19,521 --> 00:08:24,246
following. We'll have these two registers.
y is gonna be a register that's constantly

210
00:08:19,521 --> 00:08:24,246
我们要使用两个寄存器 y是一个总做平方的寄存器

211
00:08:24,246 --> 00:08:28,127
squared. And then z is gonna be an
accumulator that multiplies in the

212
00:08:24,246 --> 00:08:28,127
z是一个累加器 它将所需的不同次幂的g相乘

213
00:08:28,127 --> 00:08:32,683
appropriate powers of g as needed. So all
we do is the following we loop through the

214
00:08:28,127 --> 00:08:32,683
我们要做的就是按照x的位循环遍历

215
00:08:32,683 --> 00:08:36,526
bits of x starting from the least
significant bits, And then we do the

216
00:08:32,683 --> 00:08:36,526
从最低位开始 然后我们这样做

217
00:08:36,526 --> 00:08:41,414
following: in every iteration we're simply
gonna square y. Okay, so y just keeps on

218
00:08:36,526 --> 00:08:41,414
在每次迭代中我们就将y平方 所以y在每次迭代中

219
00:08:41,414 --> 00:08:45,940
squaring at every iteration. And then
whenever the corresponding bit of the

220
00:08:41,414 --> 00:08:45,940
一直被平方 然后当指数x中相应位数为1时

221
00:08:45,940 --> 00:08:50,554
exponent x happens to be one, we simply
accumulate the current value of y into

222
00:08:45,940 --> 00:08:50,554
我们就将y的当前值累乘到

223
00:08:50,554 --> 00:08:55,173
this accumulator z and then at the end, we
simply output z. That's it. That's the

224
00:08:50,554 --> 00:08:55,173
累加器z中 最后输出z 就是这样

225
00:08:55,173 --> 00:08:59,558
whole algorithm, and that's the repeated
squaring algorithm. So, let's see an

226
00:08:55,173 --> 00:08:59,558
这就是整个算法 这就是重复平方算法

227
00:08:59,558 --> 00:09:04,060
example with G to the 53. So,
you can see the two columns. y is one

228
00:08:59,558 --> 00:09:04,060
让我们看一个g^53的例子 大家看这两列

229
00:09:04,060 --> 00:09:08,387
column, as it evolves through the
iterations, and z is another column, again

230
00:09:04,060 --> 00:09:08,387
每次迭代y的变化是一列 z是另一列

231
00:09:08,387 --> 00:09:13,064
as it evolves through the iterations. So,
y is not very interesting. Basically, all

232
00:09:08,387 --> 00:09:13,064
表示它在迭代过程中的变化 y不是很有意思 基本上

233
00:09:13,064 --> 00:09:17,449
that happens to y is that at every
iteration, it simply gets squared. And so

234
00:09:13,064 --> 00:09:17,449
每轮迭代y的变化就是被平方

235
00:09:17,449 --> 00:09:22,299
it just walks through the powers of two
and the exponents and that's it. z is the

236
00:09:17,449 --> 00:09:22,299
所以它以2的次数为指数变化

237
00:09:22,299 --> 00:09:26,915
more interesting register where what it
does is it accumulates the appropriate

238
00:09:22,299 --> 00:09:26,915
z是一个更有趣的寄存器 它所做的是 只要指数相应位为1

239
00:09:26,915 --> 00:09:31,882
powers of g whenever the corresponding bit
to the exponent is one. So for example the

240
00:09:26,915 --> 00:09:31,882
就将相应幂的g指数累乘 比如

241
00:09:31,882 --> 00:09:36,031
first bit of the exponent is one,
therefore, the, at the end of the first

242
00:09:31,882 --> 00:09:36,031
指数的第一位是1 所以第一次迭代后

243
00:09:36,031 --> 00:09:41,219
iteration the value of z is simply equal to
g. The second bit of the exponent is zero

244
00:09:36,031 --> 00:09:41,219
z的值为g 指数的第二位为0

245
00:09:41,219 --> 00:09:46,473
so the value of z doesn't change after the
second iteration. And at the end of the

246
00:09:41,219 --> 00:09:46,473
所以第二次迭代后z的值不发生变化 第三次迭代后

247
00:09:46,473 --> 00:09:51,856
third iteration well the third bit of the
exponent is one so we accumulate g to the

248
00:09:46,473 --> 00:09:51,856
因为指数的第三位是1 所以我们将g^4乘进z

249
00:09:51,856 --> 00:09:56,662
fourth into z. The next bit of the
exponent is zero so z doesn't change. The

250
00:09:51,856 --> 00:09:56,662
指数的下一位是0 所以z不会变化

251
00:09:56,662 --> 00:10:02,109
next bit of the exponent is one and so now
we're supposed to accumulate the previous

252
00:09:56,662 --> 00:10:02,109
指数的再下一位是1 所以我们应该将前面的y值

253
00:10:02,109 --> 00:10:07,491
value of y into the accumulator z so let
me ask you so what's gonna be the value of z?

254
00:10:02,109 --> 00:10:07,491
乘进累加器z 让我来问你 z的值将会是多少

255
00:10:10,868 --> 00:10:14,245
Well, we simply accumulate g to the
16 into z and so we simply compute the sum

256
00:10:10,868 --> 00:10:14,245
我们将g^16累乘进z 计算出

257
00:10:14,245 --> 00:10:19,594
of 16 and 5 we get g to the 21.
Finally, the last bit is also set to one

258
00:10:14,245 --> 00:10:19,594
16+5 然后我们得到了g^21 最后一位也是1

259
00:10:19,594 --> 00:10:24,943
so we accumulate it into z, we do 32 plus 21 and we get the finally output g to the 53.

260
00:10:19,594 --> 00:10:24,943
所以我们把它乘进z 计算32+21 就得到了最终的输出g^53

261
00:10:24,943 --> 00:10:30,022
Okay, so this gives you an idea of how
this repeated squaring algorithm works.

262
00:10:24,943 --> 00:10:30,022
这就是一个重复平方算法如何进行的思路

263
00:10:30,022 --> 00:10:35,777
It's is quite an interesting algorithm and
it allows us to compute enormous powers of

264
00:10:30,022 --> 00:10:35,777
这是一个挺有趣的算法 它允许我们以非常非常快的速度计算

265
00:10:35,777 --> 00:10:41,064
g very, very, very quickly. So the number
of iterations here, essentially, would be

266
00:10:35,777 --> 00:10:41,064
g的极高次幂 所以这里迭代的次数 本质上将会是

267
00:10:41,064 --> 00:10:46,456
log base 2 of x. Okay. You notice the
number of iterations simply depends on the

268
00:10:41,064 --> 00:10:46,456
以2为底x的对数 你会注意到迭代的次数仅取决于

269
00:10:46,456 --> 00:10:51,954
number of digits of x, which is basically
the log base 2 of x. So even if  x is a

270
00:10:46,456 --> 00:10:51,954
x的二进制位数 也就是log_2(x) 所以就算x有

271
00:10:51,954 --> 00:10:56,519
500 bit number in 500 multiplication,
well, 500 iterations, really 1,000

272
00:10:51,954 --> 00:10:56,519
500位 要做500次乘法 也就是500迭代 实际上是1000乘法

273
00:10:56,519 --> 00:11:01,736
multiplications because we have to square
and we have to accumulate. So in 1,000

274
00:10:56,519 --> 00:11:01,736
因为我们必须进行平方和累乘 所以通过1000次乘法运算

275
00:11:01,736 --> 00:11:06,627
multiplications we'll be able to raise g
to the power of a 500 bit exponent.

276
00:11:01,736 --> 00:11:06,627
我们能够将指数g的幂升到500位

277
00:11:06,627 --> 00:11:12,760
Okay so now we can summarize kind of the running times so suppose we

278
00:11:06,627 --> 00:11:12,760
好 现在我们能够总结出它的运行时间 假设我们

279
00:11:12,760 --> 00:11:17,680
have an N bit modulus capital N as we
said addition and subtraction in ZN takes

280
00:11:12,760 --> 00:11:17,680
有一个n位模 正如我们说过的 zn上的加减法需要线性时间

281
00:11:17,680 --> 00:11:22,157
linear time. Multiplication of just, you
know, as I said, Karatsuba's actually makes this

282
00:11:17,680 --> 00:11:22,157
乘法 我说过 Karatsuba让乘法计算更有效

283
00:11:22,157 --> 00:11:26,897
more efficient, but for simplicity we'll
just say that it takes quadratic time. And

284
00:11:22,157 --> 00:11:26,897
但是为了简单起见 我们仅说乘法需要平方级时间

285
00:11:26,897 --> 00:11:31,579
then exponentiation, as I said, basically
takes log of x iterations, and at each

286
00:11:26,897 --> 00:11:31,579
然后指数运算 基本上需要logx次迭代

287
00:11:31,579 --> 00:11:35,509
iteration we basically do two
multiplications. So it's O(log (x))

288
00:11:31,579 --> 00:11:35,509
在每一次迭代中 我们做两次乘法 所以是O(log (x)*T(x))

289
00:11:35,509 --> 00:11:40,307
times the time to multiply. And let's say
that the time to multiply is quadratic. So

290
00:11:35,509 --> 00:11:40,307
让我们说乘法需要的是平方级时间

291
00:11:40,307 --> 00:11:44,758
the running time would be, really, N
squared log x. And since x is always gonna

292
00:11:40,307 --> 00:11:44,758
所以运行时间将会是(n^2)logx 根据Fermat定理 x总是会比N小

293
00:11:44,758 --> 00:11:49,168
be less than N, by Fermat's theorem
there's no point in raising g to a power

294
00:11:44,758 --> 00:11:49,168
所以没有必要去计算g大于模数次的幂

295
00:11:49,168 --> 00:11:53,958
that's larger than the modulus. So x is
gonna be less than N. Let's suppose that x

296
00:11:49,168 --> 00:11:53,958
所以x会比N小 让我们假设

297
00:11:53,958 --> 00:11:58,570
is also an N-bit integer, then, really
exponentiation is a cubic-time algorithm.

298
00:11:53,958 --> 00:11:58,570
x也是N位整数 那么 实际上指数运算是立方级时间算法

299
00:11:58,570 --> 00:12:02,970
Okay so that's what I wanted you to
remember, that exponentiation is actually

300
00:11:58,570 --> 00:12:02,970
这是我想让你们记住的 指数运算实际上速度

301
00:12:02,970 --> 00:12:07,163
a relatively slow. These days, it actually
takes a few microseconds on a modern

302
00:12:02,970 --> 00:12:07,163
比较慢 现在 它在现代计算机上实际需要几毫秒

303
00:12:07,163 --> 00:12:11,259
computer. But still, microseconds for a,
for a, say a four gigahertz processor is

304
00:12:07,163 --> 00:12:11,259
但是 毫秒对比如说一个4Ghz的处理器来说依然

305
00:12:11,259 --> 00:12:15,092
quite a bit of work. And so just keep in
mind that all the exponentiation

306
00:12:11,259 --> 00:12:15,092
是很大的工作量 所以要记住所有我们讨论的

307
00:12:15,092 --> 00:12:19,556
operations we talked about. For example,
for determining if a number is a quadratic

308
00:12:15,092 --> 00:12:19,556
指数运算操作 比如 判断一个数是否是二次剩余的

309
00:12:19,556 --> 00:12:23,600
residue or not, All those, all those
exponentiations basically take cubic time.

310
00:12:19,556 --> 00:12:23,600
所有这些 所有指数运算基本上都花费立方级时间

311
00:12:24,780 --> 00:12:29,677
Okay, so that completes our discussion of
arithmetic algorithms, and then in the

312
00:12:24,780 --> 00:12:29,677
好了 这就完成了我们对算术算法的讨论

313
00:12:29,677 --> 00:12:34,078
next segment we'll start talking about
hard problems, modulo, primes and composites.

314
00:12:29,677 --> 00:12:34,078
在下一节我们将开始讨论困难问题 模数运算 质数和合数

