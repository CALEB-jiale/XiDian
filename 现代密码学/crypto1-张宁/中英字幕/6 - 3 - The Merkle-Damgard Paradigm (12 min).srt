1
00:00:00,000 --> 00:00:03,760
So now we're gonna look at a very general
paradigm called the Merkle-Damgard

2
00:00:00,000 --> 00:00:03,760
现在我们要看一个非常通用的机制，叫做Merkle-Damgard机制

3
00:00:03,760 --> 00:00:07,668
paradigm, that's used for constructing
collision-resistant hash functions. Before

4
00:00:03,760 --> 00:00:07,668
用于组建抗碰撞的哈希函数

5
00:00:07,668 --> 00:00:11,526
we do that, let me just remind you what
our goals are. So as usual we say that H

6
00:00:07,668 --> 00:00:11,526
在这之前，让我提醒一下我们的目标

7
00:00:11,526 --> 00:00:15,483
is a hash function that maps some large
message space into a small tag space. And

8
00:00:11,526 --> 00:00:15,483
通常情况下，我们说H是个哈希函数，将大的信息空间映射到小的标签空间

9
00:00:15,483 --> 00:00:19,195
we say that a collision for a hash
function is basically a pair of distinct

10
00:00:15,483 --> 00:00:19,195
我们说哈希函数的一个碰撞是一对不同的信息

11
00:00:19,195 --> 00:00:23,053
messages that happen to map to the same
value under this hash function. And our

12
00:00:19,195 --> 00:00:23,053
它们正好被哈希函数映射到同样的值

13
00:00:23,053 --> 00:00:27,205
goal is to build collision-resistant hash
functions namely functions where it's hard

14
00:00:23,053 --> 00:00:27,205
我们的目标是构建一个很难找到一个碰撞的抗碰撞的哈希函数

15
00:00:27,205 --> 00:00:30,974
to find even a single collision. Even
though we know many collisions exist. No

16
00:00:27,205 --> 00:00:30,974
尽管我们知道有很多碰撞存在

17
00:00:30,974 --> 00:00:35,090
efficient algorithm can even output a
single collision. So we're gonna construct

18
00:00:30,974 --> 00:00:35,090
没有有效的算法可以输出哪怕一个碰撞。那么我们要构建这些哈希函数

19
00:00:35,090 --> 00:00:38,948
these hash functions, these collision
resistant hash functions, in two steps.

20
00:00:35,090 --> 00:00:38,948
我们分两步构造这些抗碰撞的哈希函数

21
00:00:38,948 --> 00:00:43,064
The first step, which we're gonna do in
this segment, is to show that if you give

22
00:00:38,948 --> 00:00:43,064
第一步，就是我们本节要讲的，它将展示如果

23
00:00:43,064 --> 00:00:47,437
me a collision resistant hash function for
short messages, we can extend it and build

24
00:00:43,064 --> 00:00:47,437
你给我一个处理短信息的抗碰撞的哈希函数，我们可以扩展它

25
00:00:47,437 --> 00:00:51,427
a collision resistant hash function for
much, much, much longer messages. In the

26
00:00:47,437 --> 00:00:51,427
来构建一个处理长的多的信息的抗碰撞的哈希函数

27
00:00:51,427 --> 00:00:54,946
next segment, we'll actually build
collision-resistant HASH functions for

28
00:00:51,427 --> 00:00:54,946
在下一节，我们将构建处理短信息的抗碰撞的哈希函数。

29
00:00:54,946 --> 00:00:59,219
short messages. Okay so let's look at the
construction. The construction is actually

30
00:00:54,946 --> 00:00:59,219
那我们来看这个机制

31
00:00:59,219 --> 00:01:02,924
very general and in fact all
collision-resistant hash functions follow

32
00:00:59,219 --> 00:01:02,924
这个机制很通用，事实上，所有的抗碰撞的哈希函数

33
00:01:02,924 --> 00:01:06,891
this paradigm. It's actually a very
elegant paradigm and let me show you how

34
00:01:02,924 --> 00:01:06,891
都遵循这个机制。这是一个非常优雅的机制，让我来告诉你它怎样工作

35
00:01:06,891 --> 00:01:10,545
it works. So here we have our function H
which we're gonna assume is a

36
00:01:06,891 --> 00:01:10,545
这里我们有函数H，我们假设它是抗碰撞的哈希函数

37
00:01:10,545 --> 00:01:14,869
collision-resistant hash function for
small sized inputs. So the way we're gonna

38
00:01:10,545 --> 00:01:14,869
可以处理短输入

39
00:01:14,869 --> 00:01:19,565
use this little function h, this h is
sometimes called a compression function,

40
00:01:14,869 --> 00:01:19,565
我们使用这个小函数h，h有时叫做压缩函数

41
00:01:19,565 --> 00:01:24,319
is we're gonna take a big message M and
break this message in to blocks. And then

42
00:01:19,565 --> 00:01:24,319
我们将取长信息M，把它分成若干组

43
00:01:24,319 --> 00:01:28,991
we use a fixed value called the IV. Here
is the case the IV is fixed forever. And

44
00:01:24,319 --> 00:01:28,991
然后我们使用一个固定值叫做Ⅳ。这里Ⅳ永远是固定的

45
00:01:28,991 --> 00:01:33,496
it's basically embedded in the code and in
the standards, it's just a fixed ID that's

46
00:01:28,991 --> 00:01:33,496
它内嵌在代码和标准里，只是一个固定的ID

47
00:01:33,496 --> 00:01:37,788
part of the fin-nation of the function.
And then what we do is we apply the small

48
00:01:33,496 --> 00:01:37,788
是函数的一部分。然后我们对第一个信息分组应用

49
00:01:37,788 --> 00:01:41,709
compression function H to the first
message block along with this ID. What

50
00:01:37,788 --> 00:01:41,709
小的压缩函数H，一并使用这个ID

51
00:01:41,709 --> 00:01:45,948
comes out of that is what's called a
chaining variable that's gonna be fed into

52
00:01:41,709 --> 00:01:45,948
得到的叫做链接变量，将被交给下一压缩函数

53
00:01:45,948 --> 00:01:50,028
the next compression function which
compresses the next block along with the

54
00:01:45,948 --> 00:01:50,028
来压缩下一个分组，一并使用前一个链接变量

55
00:01:50,028 --> 00:01:54,320
previous chaining variable and out comes
the next chaining variable, and the next

56
00:01:50,028 --> 00:01:54,320
输出下一个链接变量

57
00:01:54,320 --> 00:01:58,772
message block is compresses, and so on and
so forth until we which the final message

58
00:01:54,320 --> 00:01:58,772
然后下个信息分组被压缩，等等，直到我们到达最后分组

59
00:01:58,772 --> 00:02:03,087
block And then the final message block,
the one special thing that we do, is that

60
00:01:58,772 --> 00:02:03,087
在最后分组上，我们要做一个特别的事情

61
00:02:03,087 --> 00:02:07,246
we must append this padding block, this
PB, which stands for padding block (and

62
00:02:03,087 --> 00:02:07,246
就是我们必须将这个补齐分组PB附在信息后面

63
00:02:07,246 --> 00:02:11,567
I'll explain what the padding block is in
just a second). But after we append the

64
00:02:07,246 --> 00:02:11,567
我们稍后解释这个这个补齐分组。但在我附上补齐分组之后

65
00:02:11,567 --> 00:02:16,104
padding block we again compress the last
[inaudible] variable with the last message

66
00:02:11,567 --> 00:02:16,104
我们还是要压缩最后的链接变量与最后的分组

67
00:02:16,104 --> 00:02:20,124
block, and the output of that is the
actual output of the hash function. So

68
00:02:16,104 --> 00:02:20,124
得到的输出就是实际哈希函数的输出

69
00:02:20,124 --> 00:02:25,232
just to summarize, in symbols, we have
this compression function that elements in

70
00:02:20,124 --> 00:02:25,232
总结一下，用符号表示，我们用这个压缩函数在T中取元素

71
00:02:25,232 --> 00:02:29,468
T. This is the opposite of the hash
function. Plus message blocks, this x

72
00:02:25,232 --> 00:02:29,468
这与哈希函数正好相反

73
00:02:29,468 --> 00:02:34,169
corresponds to message blocks, and outputs
the next chaining variables. So as I said,

74
00:02:29,468 --> 00:02:34,169
加上信息分组，这个X对应信息分组，输出下一链接变量

75
00:02:34,169 --> 00:02:38,982
this is what the compression functions do.
And then from this compression function

76
00:02:34,169 --> 00:02:38,982
如我所说，这就是压缩函数的工作。然后根据这个压缩函数

77
00:02:38,982 --> 00:02:43,625
we're able to build a hash function for
large inputs, namely inputs is the space x

78
00:02:38,982 --> 00:02:43,625
我们可以构建一个长输入的哈希函数

79
00:02:43,625 --> 00:02:48,099
to some power of l namely up to l blocks
of x. And of course these are variable

80
00:02:43,625 --> 00:02:48,099
输入是空间X的L次方，表示至多L^X的分组。当然这些长度可变

81
00:02:48,099 --> 00:02:52,686
lengths so we could have different length
messages that are being given input to

82
00:02:48,099 --> 00:02:52,686
这样我们可以有不同的信息长度

83
00:02:52,686 --> 00:02:57,193
this function h and what comes out of it
is basically a tag in tag space. So the

84
00:02:52,686 --> 00:02:57,193
它们给函数h输入，得到的是标签空间中的标签

85
00:02:57,193 --> 00:03:01,456
only thing left to define is the padding
block. So the padding block is actually

86
00:02:57,193 --> 00:03:01,456
唯一剩下的需要定义的是补齐分组

87
00:03:01,456 --> 00:03:05,719
very important as we're gonna see in just
a minute. What it is, is basically, well

88
00:03:01,456 --> 00:03:05,719
补齐分组非常重要，我们接下来会看到

89
00:03:05,719 --> 00:03:10,089
it's a sequence of 1000 that denotes the
end of the actual message block. And then

90
00:03:05,719 --> 00:03:10,089
这是序列1000，为实际明文分组的结尾

91
00:03:10,089 --> 00:03:14,460
the most important part of the message
block is that we encode the message length

92
00:03:10,089 --> 00:03:14,460
这个分组最重要的部分是我们对信息长度进行的编码

93
00:03:14,460 --> 00:03:18,879
In this padding block. And the message
length field is basically fixed to be 64

94
00:03:14,460 --> 00:03:18,879
在这个补齐分组里。信息长度域固定为64位

95
00:03:18,879 --> 00:03:23,186
bits. So in all the [inaudible] hash
functions, so in all the [inaudible] hash

96
00:03:18,879 --> 00:03:23,186
所以在所有的SHA哈希函数中

97
00:03:23,186 --> 00:03:27,828
functions the maximum message length is
two to the sixty four minus one so in fact

98
00:03:23,186 --> 00:03:27,828
最大的信息长度为2^64-1

99
00:03:27,828 --> 00:03:32,247
the message length fits into a 64 bit
block. An upper bound of two to the sixty

100
00:03:27,828 --> 00:03:32,247
事实上信息长度应当适应于64位分组。2^64-1位的信息长度的上界

101
00:03:32,247 --> 00:03:36,778
four minus one bit on the message length
is actually sufficiently long to handle

102
00:03:32,247 --> 00:03:36,778
对应我们能释放的信息来说足够长了

103
00:03:36,778 --> 00:03:41,071
all of the messages we're gonna throw at
it. Okay, so that's the padding block, and

104
00:03:36,778 --> 00:03:41,071
好，这是补齐分组

105
00:03:41,071 --> 00:03:45,130
of course the question is: what do we do
if the last block really is a multiple of

106
00:03:41,071 --> 00:03:45,130
当然，那么问题来了，如果最后一个分组

107
00:03:45,130 --> 00:03:49,190
the compression function of block length?
Where are we gonna fit the padding block?

108
00:03:45,130 --> 00:03:49,190
是压缩函数分组长度的倍数，我们该怎么办？我们该如何补齐分组？

109
00:03:49,190 --> 00:03:53,380
And the answer, as usual, is basically if
there's no space for the padding block in

110
00:03:49,190 --> 00:03:53,380
通常，答案是如果在最后分组中没有空间

111
00:03:53,380 --> 00:03:58,003
the last block of the message, then we're
gonna have to ass another dummy block and

112
00:03:53,380 --> 00:03:58,003
留给补齐分组时，那么我们就必须加另外一个假分组

113
00:03:58,003 --> 00:04:02,561
stick the padding block in there. And of
course put the one zero, zero, zero in the

114
00:03:58,003 --> 00:04:02,561
把补齐分组放在那里。当然以正确的方式写1000

115
00:04:02,561 --> 00:04:07,062
right place. Okay so the point is that
it's very, very important that the padding

116
00:04:02,561 --> 00:04:07,062
有一点非常重要，那就是

117
00:04:07,062 --> 00:04:11,507
block contains the message length as we'll
see in just a minute. So this is the

118
00:04:07,062 --> 00:04:11,507
补齐分组包含信息长度，我们待会将会看到

119
00:04:11,676 --> 00:04:16,065
Merkle-Damgard construction, the last
piece of terminology I'll say is that we

120
00:04:11,676 --> 00:04:16,065
那么这就是Merkle-Damgard机制，最后一点技术内容

121
00:04:16,065 --> 00:04:20,285
have these chaining variables. So H0 is
the initial value. H1, H2, H3, up to H4

122
00:04:16,065 --> 00:04:20,285
是我们有这些链接变量。那么HO是初始值，H1，H2，H3直到H4

123
00:04:20,285 --> 00:04:24,881
which is the actual final output of this
hash function. So as I said, all standard

124
00:04:20,285 --> 00:04:24,881
H4是哈希函数的最终输出。如我所说

125
00:04:24,881 --> 00:04:29,443
hash functions follow this paradigm for
constructing a collision resistant hash

126
00:04:24,881 --> 00:04:29,443
所有的标准哈希函数都遵循着这个机制，由一个压缩函数构建抗碰撞的哈希函数

127
00:04:29,443 --> 00:04:33,966
function from a compression function. The
reason that this paradigm is so popular is

128
00:04:29,443 --> 00:04:33,966
这个机制如此流行的原因是

129
00:04:33,966 --> 00:04:37,673
because of the following theorem, which
says basically that if the little

130
00:04:33,966 --> 00:04:37,673
因为下面这个定理告诉我们

131
00:04:37,673 --> 00:04:41,373
compression function is collision
resistant, then the big Merkle-Damgard

132
00:04:37,673 --> 00:04:41,373
如果小的压缩函数是抗碰撞的

133
00:04:41,380 --> 00:04:45,493
hash function is also collision resistant.
So, in other words, if we're going to build

134
00:04:41,380 --> 00:04:45,493
那么大的 Merkle-Damgard哈希函数也是抗碰撞的

135
00:04:45,493 --> 00:04:49,607
collision resistant functions for large inputs, all
we have to do is just build compression

136
00:04:45,493 --> 00:04:49,607
换句话说，如果我们要为长输入构建抗碰撞的哈希函数

137
00:04:49,607 --> 00:04:53,771
functions that are collision resistant. So
let's prove this theorem. It's a elegant

138
00:04:49,607 --> 00:04:53,771
我们只需构建一个抗碰撞的压缩函数。那么我们来证明这个定理

139
00:04:53,771 --> 00:04:57,732
proof and it's not too difficult. So the
way we're gonna prove it is using the

140
00:04:53,771 --> 00:04:57,732
这个证明很优雅，且不难，我们证明它的逆否命题

141
00:04:57,732 --> 00:05:01,794
contrapositive, that is, if you can find
me a collision on the big hash function

142
00:04:57,732 --> 00:05:01,794
也就是，如果你能找到这个大哈希函数的一个碰撞

143
00:05:01,794 --> 00:05:06,107
then we're gonna deduce a collision on the
little compression function. Therefore, if

144
00:05:01,794 --> 00:05:06,107
那么我们我们可以推出这个小压缩函数的一个碰撞

145
00:05:06,107 --> 00:05:10,460
little h is a collision resistant, so will
be the big H. So suppose you give me a

146
00:05:06,107 --> 00:05:10,460
因此，如果h是抗碰撞的，那么H也是

147
00:05:10,460 --> 00:05:15,085
collision on the big compression function,
namely two distinct messages M and M',

148
00:05:10,460 --> 00:05:15,085
假设给我一个大压缩函数的碰撞，即两个不同的信息M和M'

149
00:05:15,085 --> 00:05:19,492
that happen to hash to the same output,
we're going to use M and M' to build

150
00:05:15,085 --> 00:05:19,492
它们正好被哈希到同一个输出，我们将使用M和M'

151
00:05:19,492 --> 00:05:23,854
a collision on the little compression
function. So the first thing is we

152
00:05:19,492 --> 00:05:23,854
来构建这个小压缩函数的一个碰撞

153
00:05:23,854 --> 00:05:28,645
have to remember how the Merkle-Damgard
construction works and, in particular,

154
00:05:23,854 --> 00:05:28,645
首先我们必须记住 Merkle-Damgard机制的过程

155
00:05:28,645 --> 00:05:33,872
let's assign names to the chain variables
when we hash M versus when we hash M'.

156
00:05:28,645 --> 00:05:33,872
特别的，当我们哈希M和M'，给链接变量起一些名字

157
00:05:33,872 --> 00:05:38,787
So here are the chain variables that come up
when we hash the message M, so H0 is the

158
00:05:33,872 --> 00:05:38,787
当我们计算信息M的哈希值时，会得到这些链接变量

159
00:05:38,787 --> 00:05:43,952
fixed IV that starts the whole process, H1
would be the result of hashing the first

160
00:05:38,787 --> 00:05:43,952
那么H0是固定的Ⅳ，开启整个过程，H1是用Ⅳ计算第一个分组的哈希结果，等等

161
00:05:43,952 --> 00:05:48,932
message block with the IV, and so on and
so forth, until H sub t+1 is the

162
00:05:43,952 --> 00:05:48,932
直到H_t+1是最后一个链接变量

163
00:05:48,932 --> 00:05:53,945
final chain variable, which is the final
output of the Merkle-Damgard chain. And

164
00:05:48,932 --> 00:05:53,945
也是Merkle-Damgard链的最后输出

165
00:05:53,945 --> 00:05:59,401
then similarly for M', let's define H0'
to be the first chaining variable, H1'

166
00:05:53,945 --> 00:05:59,401
类似的对于M',定义H0'为第一个链接变量

167
00:05:59,401 --> 00:06:04,668
to be the result after compressing
the first message block of M', and so

168
00:05:59,401 --> 00:06:04,668
H1'是第一个分组M'的压缩结果，等等……

169
00:06:04,668 --> 00:06:09,997
on and so forth, up until we get to H'
of r+1, which is the final hash of

170
00:06:04,668 --> 00:06:09,997
直到我们获得H'_r+1,，即信息M'的最后哈希值

171
00:06:09,997 --> 00:06:14,820
the message M'. Now you notice the
length of the messages M and M'

172
00:06:09,997 --> 00:06:14,820
现在大家注意信息M和M'的长度

173
00:06:14,820 --> 00:06:20,654
don't have to be the same. In particular, M
has length t, whereas M' has length r.

174
00:06:14,820 --> 00:06:20,654
不一定是一样的。特别的，M的长度为t，M'的长度为r

175
00:06:20,654 --> 00:06:24,876
Now because the collision occurred, we
know that these two values here are the

176
00:06:20,654 --> 00:06:24,876
由于发生了碰撞，我们知道这两个值是相等的

177
00:06:24,876 --> 00:06:29,067
same. H(M) is equal to H(M'). In
other words, the last chaining variables

178
00:06:24,876 --> 00:06:29,067
H（M）是等于H(M').换句话说，最后的链接变量是

179
00:06:29,067 --> 00:06:33,416
are actually equal to one another. So now
let's look carefully how H t+1 and

180
00:06:29,067 --> 00:06:33,416
是等于另一个的。现在让我们仔细观察

181
00:06:33,416 --> 00:06:37,389
H' r+1 were calculated. Well
H t+1 is calculated as the

182
00:06:33,416 --> 00:06:37,389
H t+1和H' r+1是怎样算出来的

183
00:06:37,389 --> 00:06:41,780
compression function applied to the
previous chaining variable along with the

184
00:06:37,389 --> 00:06:41,780
H t+1 是由压缩函数应用到之前的的链接变量和最后分组得到的M得到的

185
00:06:41,780 --> 00:06:46,002
last message block of M, including the
padding block. You'll notice here I'm

186
00:06:41,780 --> 00:06:46,002
包括补白区块。大家注意

187
00:06:46,002 --> 00:06:50,618
assuming that the padding block fits with
the last message block of M even if the

188
00:06:46,002 --> 00:06:50,618
这里假设补白区块符合最后的分组M，即使

189
00:06:50,618 --> 00:06:55,121
last padding block is in its own block,
it's not going to make any difference. So

190
00:06:50,618 --> 00:06:55,121
最后补白区块在它自己的分组，也没有任何区别

191
00:06:55,121 --> 00:06:59,512
for simplicity, let's assume that the
padding block fits with the last message

192
00:06:55,121 --> 00:06:59,512
为了简便，我们假设补白区块在最后的分组M中，

193
00:06:59,512 --> 00:07:03,960
block with capital M. So, by hashing the
last message block with a padding block

194
00:06:59,512 --> 00:07:03,960
因此，通过计算放着补白区块的最后分组的和最后一个链接变量的哈希

195
00:07:03,960 --> 00:07:08,547
and the last chaining variable, we obtain
H t+1 and, similarly, the same thing

196
00:07:03,960 --> 00:07:08,547
我们得到了H t+1，同样的，我们对M'进行同样的计算

197
00:07:08,547 --> 00:07:12,922
happens with M'. By hashing the last
message block, the last chaining variable,

198
00:07:08,547 --> 00:07:12,922
通过计算最后的信息分组和最后的链接变量的哈希

199
00:07:12,922 --> 00:07:17,350
我们得到了H’r+1，我们知道，只要这两个变量是相等的

200
00:07:12,922 --> 00:07:17,350
we obtain H' r+1. And we know
that, since these two values are equal, all

201
00:07:17,350 --> 00:07:21,778
我么就有了一个候选的压缩函数的碰撞

202
00:07:17,350 --> 00:07:21,778
of a sudden we have a candidate collision
for the compression function. Here, let me

203
00:07:21,778 --> 00:07:26,099
这里，我们圈出这个候选的碰撞，这是它的一部分，这是它的另一部分

204
00:07:21,778 --> 00:07:26,099
circle the candidate collision, this is one
part of it and this is the other part of

205
00:07:26,099 --> 00:07:30,072
由于在这两个参数间有一个等式

206
00:07:26,099 --> 00:07:30,072
it. Okay, so we have an equality
between two arguments given to the

207
00:07:30,072 --> 00:07:34,405
把这两个参数给压缩函数，正好产生的相同的值

208
00:07:30,072 --> 00:07:34,405
compression function that happen to
produce the same value. The only way we

209
00:07:34,405 --> 00:07:38,853
我们不获得任何一个碰撞的唯一方法是,这两个参数相等

210
00:07:34,405 --> 00:07:38,853
would not get a collision is if the
arguments happen to be the same. In other

211
00:07:38,853 --> 00:07:43,533
换句话说，这里我们注意到，如果这两个参数不同

212
00:07:38,853 --> 00:07:43,533
words, what we're seeing here is if the
arguments to the compression function are

213
00:07:43,533 --> 00:07:47,750
那么我们就得到了h的一个碰撞，我们写的更精确一些

214
00:07:43,533 --> 00:07:47,750
distinct, then we get a collision for
little h. So let's write it out more

215
00:07:47,750 --> 00:07:55,220
如果Ht不等于H'r或者Mt不等于M'r

216
00:07:47,750 --> 00:07:55,220
precisely: so if H t is not equal to H' r,
or Mt is not equal to M' r,

217
00:07:55,220 --> 00:08:02,784
或者补白区块不同，我们就会得到压缩函数h的一个碰撞

218
00:07:55,220 --> 00:08:02,784
or the padding blocks are distinct, then
we have a collision for the compression

219
00:08:02,784 --> 00:08:08,415
这样的们就完成了，就可以结束了。我们还要继续做的情况是

220
00:08:02,784 --> 00:08:08,415
function h and we're done, we're done and we can stop.
So, the only way we need to continue is if

221
00:08:08,415 --> 00:08:12,653
如果这三个‘或’条件不成立，三个‘或’条件不成立是什么意思呢？

222
00:08:08,415 --> 00:08:12,653
this three-way disjunction doesn't hold.
So what does it mean that this disjunction

223
00:08:12,653 --> 00:08:16,998
我们需要继续工作的唯一情形是，当最后一个变量和倒数第二个变量相等

224
00:08:12,653 --> 00:08:16,998
doesn't hold? well, so the only reason we
need to continue is if the second-to-last

225
00:08:16,998 --> 00:08:21,183
两个信息的最后分组也相同

226
00:08:16,998 --> 00:08:21,183
chaining variables are equal, the last
blocks of the messages are equal and the

227
00:08:21,183 --> 00:08:25,605
并且，两个补白区块也相同，两个补白区块相等是什么意思呢？

228
00:08:21,183 --> 00:08:25,605
two padding blocks are equal. So what does
it mean that the two padding blocks are

229
00:08:25,605 --> 00:08:29,961
还记得被编码在补白区块的信息长度吧

230
00:08:25,605 --> 00:08:29,961
equal? Remember that the message lengths
were encoded in the padding block. So, in

231
00:08:29,961 --> 00:08:34,371
特别的，这意味着M的长度等于M'的长度

232
00:08:29,961 --> 00:08:34,371
particular, this means that the length of M
and the length of M' is the same,

233
00:08:34,371 --> 00:08:38,782
也就是说t是等于r的。所以现在我可以假设t=r。

234
00:08:34,371 --> 00:08:38,782
namely the t is equal to r. So from now on
I can assume t is equal to r. Whenever I

235
00:08:38,782 --> 00:08:43,972
我写r时就等同于我写t。但是现在我们可以对倒数第二个变量应用相同的参数

236
00:08:38,782 --> 00:08:43,972
wrote r, I'm just gonna write t. But now we
can apply exactly the same argument to the

237
00:08:43,972 --> 00:08:48,773
换句话说，H是怎么计算的？

238
00:08:43,972 --> 00:08:48,773
second to last chaining variables. In
other words, how was H t computed? Well

239
00:08:48,773 --> 00:08:53,703
Ht 是通过前一个链接变量Ht-1和倒数第二个的信息分组的哈希计算得来的

240
00:08:48,773 --> 00:08:53,703
H t is computed by hashing the previous
chaining variable, namely H t-1,

241
00:08:53,703 --> 00:08:58,929
相似的，我们可以得到H't

242
00:08:53,703 --> 00:08:58,929
with the second to last message block. And
similarly, H' t was computed, you

243
00:08:58,929 --> 00:09:05,128
注意到我用r代替了t，所以H't是通过通过前一个的链接变量和

244
00:08:58,929 --> 00:09:05,128
notice I replaced r by t, so H' t was
computed by hashing the previous chaining

245
00:09:05,128 --> 00:09:10,804
M' 的倒数第二个的信息分组的哈希得到的

246
00:09:05,128 --> 00:09:10,804
variable along with the second to last
message block of M'. And because

247
00:09:10,804 --> 00:09:16,704
由于这两者相同，所以我们得到了另一个候选的压缩函数的碰撞

248
00:09:10,804 --> 00:09:16,704
these two are equal, now we get another
candidate collision for the compression

249
00:09:16,704 --> 00:09:23,030
换句话说，如果Ht+1不等于Ht-1，或者Mt-1不等于M't-1

250
00:09:16,704 --> 00:09:23,030
function. In other words, if H t+1 is not
equal to H' t-1, or M t-1 is not equal to

251
00:09:23,030 --> 00:09:29,985
那我们就有了一个h的碰撞，那么我们就可以结束了

252
00:09:23,030 --> 00:09:29,985
M' t-1, then basically we
have a collision for h, and we can stop,

253
00:09:29,985 --> 00:09:36,710
现在，我们唯一需要继续的情况是这个条件不存在

254
00:09:29,985 --> 00:09:36,710
we're done. So now, the only case when we
need to continue is if this condition over

255
00:09:36,710 --> 00:09:44,464
也就是说，假设Ht-1等于H't-1

256
00:09:36,710 --> 00:09:44,464
here doesn't hold, namely, so let's suppose
that H t-1 is equal to H' t-1

257
00:09:44,464 --> 00:09:50,600
我们已经知道，Mt 等于M't 

258
00:09:44,464 --> 00:09:50,600
and we already know that, let's
see, so M t is equal to M' t and

259
00:09:50,600 --> 00:09:56,060
并且Mt-1等于M't-1。假设这两个条件都成立

260
00:09:50,600 --> 00:09:56,060
M t-1 is equal to M' t-1.
Suppose it so happens that these two

261
00:09:56,270 --> 00:10:02,010
这里你可以看到，我们可以继续迭代了

262
00:09:56,270 --> 00:10:02,010
conditions hold, well, you can see that now
we can continue to iterate. In other

263
00:10:02,010 --> 00:10:07,750
换句话说，我们可以给Ht-1和H't-1使用相同的参数

264
00:10:02,010 --> 00:10:07,750
words, we can now apply exactly the same
argument to H t-1 and H' t-1

265
00:10:07,750 --> 00:10:12,566
然后依次迭代，我们就可以迭代出

266
00:10:07,750 --> 00:10:12,566
and so iterating this again and
again, we can iterate all the way to the

267
00:10:12,566 --> 00:10:17,450
信息的开始。迭代到信息的开始，下面两者之一一定成立：

268
00:10:12,566 --> 00:10:17,450
beginning of the message. Iterate to the
beginning of the message, and one of two

269
00:10:17,450 --> 00:10:22,252
我们找不到任何一个压缩函数的碰撞或者

270
00:10:17,450 --> 00:10:22,252
things must hold, either we find the
collision for the compression function

271
00:10:25,257 --> 00:10:28,262
所有的信息M和M’的所有信息分组都相等

272
00:10:25,257 --> 00:10:28,262
or it so happens that all the message blocks
of M and M' are the same. In other

273
00:10:28,262 --> 00:10:34,089
换句话说，对于所有的i，Mi =M'i。这意味着

274
00:10:28,262 --> 00:10:34,089
words, for all i, M i is equal to M' i.
But this means, because the messages, we'd

275
00:10:34,089 --> 00:10:39,941
由于我们已经证明过这些信息是一样长的，所以M=M’的

276
00:10:34,089 --> 00:10:39,941
reprove the messages are the same length,
this means that M is actually equal to M'.

277
00:10:39,941 --> 00:10:44,469
然而，是和这与你给我的是个碰撞的前提矛盾

278
00:10:39,941 --> 00:10:44,469
But then, this contradicts the fact
that you gave me a collision to begin

279
00:10:44,469 --> 00:10:48,849
换句话说，由于有矛盾，故这不可能发生

280
00:10:44,469 --> 00:10:48,849
with, so, in other words, this condition
over here, can't actually happen because

281
00:10:48,849 --> 00:10:53,342
因为它与M和M'是这个大Merkle-Damgard函数H相碰撞这个事实矛盾

282
00:10:48,849 --> 00:10:53,342
it contradicts the fact that M and M'
are actually a collision for the big

283
00:10:53,342 --> 00:10:58,059
因此，我们必须为这个压缩函数找一碰撞

284
00:10:53,342 --> 00:10:58,059
Merkle-Damgard function H. And, as
a result, this means that we have to find a

285
00:10:58,059 --> 00:11:02,664
既然这样，让我们从信息的最后开始工作

286
00:10:58,059 --> 00:11:02,664
collision for the compression function, so
that, as we work our way from the end of

287
00:11:02,664 --> 00:11:07,269
一直算到信息的开始，在某处我们一定可以找到h的碰撞

288
00:11:02,664 --> 00:11:07,269
the message, all the way to the beginning,
at some point we must find the collision

289
00:11:07,269 --> 00:11:11,492
这基本就完成了我们的证明

290
00:11:07,269 --> 00:11:11,492
for little h. Okay, so this basically
completes the proof of the theorems, I can

291
00:11:11,492 --> 00:11:15,738
我可以在这里写个‘证明完毕’，这就是证明

292
00:11:11,492 --> 00:11:15,738
put a little QED block here, so basically
what this proof is, that if the little

293
00:11:15,738 --> 00:11:19,553
如果压缩函数h是抗碰撞的，那么大Merkle-Damgard函数H

294
00:11:15,738 --> 00:11:19,553
compression function h is collision
resistant, then the big Merkle-Damgard

295
00:11:19,553 --> 00:11:24,013
必须也是抗碰撞的。所以，人们喜欢这个机制的原因是

296
00:11:19,553 --> 00:11:24,013
function H must also be collision
resistant. So, again, the reason why people

297
00:11:24,013 --> 00:11:28,366
这个定理展示了如何构建大的哈希函数

298
00:11:24,013 --> 00:11:28,366
like this construction is it shows that
to construct big hash functions,

299
00:11:28,366 --> 00:11:32,611
只要能构建短输入的压缩就足够了

300
00:11:28,366 --> 00:11:32,611
it suffices to construct just compression
functions for small inputs, and we're

301
00:11:32,611 --> 00:11:34,439
下面我们进入下一章节

302
00:11:32,611 --> 00:11:34,439
gonna do that in the next segment.

