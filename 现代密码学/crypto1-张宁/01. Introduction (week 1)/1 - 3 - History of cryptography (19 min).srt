1
00:00:00,000 --> 00:00:04,194
Before we start with the technical
material, I want to tell you a little bit

2
00:00:04,194 --> 00:00:09,012
about the history of cryptography. There's
a beautiful book on this topic by David

3
00:00:09,012 --> 00:00:13,490
Kahn called the codebreakers. It covers
the history of cryptography all the way

4
00:00:13,490 --> 00:00:17,742
from the Babylonian era, to the
present. Here, I'm just going to give you

5
00:00:17,742 --> 00:00:22,146
a few examples of historical ciphers, all
of which are badly broken. So to talk

6
00:00:22,146 --> 00:00:26,830
about ciphers the first thing I'm going to
do is introduce our friends Alice and Bob,

7
00:00:26,830 --> 00:00:31,243
who are gonna be with us for the rest of
the quarter. So Alice and Bob are trying

8
00:00:31,243 --> 00:00:35,657
to communicate securely and there is an
attacker who's trying to eavesdrop on

9
00:00:35,657 --> 00:00:39,908
their conversation. So to communicate
securely, they're going to share a secret

10
00:00:39,908 --> 00:00:44,544
key, which I'll denote by K. They both know
the secret key. But the attacker does not

11
00:00:44,544 --> 00:00:49,665
know anything about this key K.
So now they're gonna use a cipher, which

12
00:00:49,665 --> 00:00:53,749
is a pair of algorithms, an
encryption algorithm denoted by E, and a

13
00:00:53,749 --> 00:00:58,870
decryption algorithm, D. These algorithms
work as follows: the encryption algorithm

14
00:00:58,870 --> 00:01:03,930
E takes the message M as inputs. And it
takes as inputs, the key K. I'm gonna

15
00:01:03,930 --> 00:01:08,807
put a wedge above the key input just
to denote the fact that this input is

16
00:01:08,807 --> 00:01:14,670
really the key input. And then it outputs
a ciphertext. Which is the encryption of

17
00:01:14,670 --> 00:01:20,319
the message M using the key K. I'm always
gonna write the key first. Now, and when I

18
00:01:20,319 --> 00:01:24,486
write: = what I mean is that the
expression defines what C what the

19
00:01:24,486 --> 00:01:29,437
variable C stands for. Now the ciphertext
is transmitted over the internet to Bob,

20
00:01:29,437 --> 00:01:34,231
somehow. Actually it could be transmitted
over the internet. Could be transmitted

21
00:01:34,407 --> 00:01:39,156
using an encrypted file system, it doesn't
really matter, but when the ciphertext

22
00:01:39,156 --> 00:01:43,402
reaches Bob, he can plug it into the
decryption algorithm and give the

23
00:01:43,402 --> 00:01:47,985
decryption algorithm the same key K.
Again, I'm gonna put a wedge here as well. To

24
00:01:47,985 --> 00:01:53,191
denote the key inputs and the decryption
algorithm outputs the original plaintext

25
00:01:53,191 --> 00:01:58,149
message. Now the reason we say that these
are symmetric ciphers is that both the

26
00:01:58,149 --> 00:02:03,169
encrypter and decrypter actually use the
same key K. As we'll see later

27
00:02:03,169 --> 00:02:08,312
in the course, there are ciphers where the
encrypter uses one key and the decrypter

28
00:02:08,312 --> 00:02:13,394
uses a different key. But here we're just
going to focus on symmetric cipher where

29
00:02:13,394 --> 00:02:18,280
both sides use the same key. Okay, so let
me give you a few historic examples of

30
00:02:18,280 --> 00:02:23,159
ciphers. The first example, the simplest
one is called the substitution cipher. I

31
00:02:23,159 --> 00:02:27,977
am sure all of you played the substitution
ciphers when you were in kindergarten.

32
00:02:28,162 --> 00:02:33,165
Basically a key for a substitution cipher
is a substitution table that basically

33
00:02:33,165 --> 00:02:38,230
says how to map our letters. So here for
example the letter A would be mapped to C,

34
00:02:38,230 --> 00:02:43,232
the letter B would be mapped to W the
letter C would be mapped to N so on and so

35
00:02:43,232 --> 00:02:48,499
forth and then the letter Z would be
mapped, say, to A. So this is one example

36
00:02:48,499 --> 00:02:54,922
of a key for a substitution cipher. So just
to practice the notation we introduced

37
00:02:54,922 --> 00:03:00,775
before, the encryption of a certain
message using this key, let's say the

38
00:03:00,775 --> 00:03:07,197
message is BCZA, the encryption of this
message using this key here would be, is

39
00:03:07,197 --> 00:03:13,782
done by substituting one letter at a time.
So B becomes W, C becomes N, Z becomes A,

40
00:03:13,782 --> 00:03:20,530
and A becomes C. So the encryption of BCZA
is WNAC, and this defines the ciphertext.

41
00:03:20,530 --> 00:03:25,654
Similarly we can decrypt the ciphertext using the same key and of course

42
00:03:25,654 --> 00:03:31,073
we'll get back the original message.
Okay. So, just for historical

43
00:03:31,073 --> 00:03:35,763
reasons, there is one example of something
that's related to the substitution cipher

44
00:03:35,763 --> 00:03:39,950
called the Caesar cipher. The Caesar
cipher, actually, is not really a cipher

45
00:03:39,950 --> 00:03:44,417
at all. And the reason is that it doesn't
have a key. What a Caesar cipher is, is

46
00:03:44,417 --> 00:03:48,772
basically a substitution cipher where the
substitution is fixed. Namely, it's a

47
00:03:48,772 --> 00:03:56,796
shift by three. So A becomes D, B becomes
E, C becomes F and so on and so forth.

48
00:03:56,796 --> 00:04:05,197
What is it, Y becomes B and Z becomes C.
It's a fixed substitution that's applied

49
00:04:05,197 --> 00:04:10,931
to all plaintext messages. So, again,
this is not a cipher, because there is no

50
00:04:10,931 --> 00:04:15,734
key, the key is fixed. So if an attacker
knows how our encryption scheme works, he

51
00:04:15,734 --> 00:04:20,597
can easily decrypt the message. The key is
not random, and therefore, decryption is

52
00:04:20,597 --> 00:04:25,233
very easy once you understand how the
scheme actually works. Okay, so now, let's

53
00:04:25,233 --> 00:04:29,941
go back to the substitution cipher, where
the keys really are chosen at random, the

54
00:04:29,941 --> 00:04:34,132
substitution tables are chosen at random.
And let's see how we break this

55
00:04:34,132 --> 00:04:38,724
substitution cipher. Turns out to be very
easy to break. The first question is, how

56
00:04:38,724 --> 00:04:43,030
big is the key space? How many different
keys are there, assuming we have 26

57
00:04:43,030 --> 00:04:48,367
letters? So, I hope all of you said that,
the number of keys is 26 factorial,

58
00:04:48,367 --> 00:04:53,874
because, a key, a substitution key, is
simply a table, a permutation of all 26

59
00:04:53,874 --> 00:05:00,115
letters. The number of permutations of 26
letters, is 26 factorial. If you calculate

60
00:05:00,115 --> 00:05:05,769
this out, twenty-sixth factorial is about
two to the 88th, which means that

61
00:05:05,769 --> 00:05:11,422
describing a key in a substitution cipher
takes about 88 bits. So, each key is

62
00:05:11,422 --> 00:05:17,325
represented by about 88 bits. Now, this is
a perfectly fine size for a keyspace. In

63
00:05:17,325 --> 00:05:22,076
fact, we're gonna be seeing ciphers that
are perfectly secure, or, you know, that

64
00:05:22,076 --> 00:05:26,710
are adequately secure, with key spaces
that are roughly of this size. However,

65
00:05:26,710 --> 00:05:31,461
even though the substitution cipher has a
large key space of size 2^88, it's

66
00:05:31,461 --> 00:05:36,330
still terribly insecure. So let's see how
to break it. And to break it, we're going

67
00:05:36,330 --> 00:05:40,523
to be using letter frequencies. So the
first question is, what is the most

68
00:05:40,696 --> 00:05:45,099
frequent letter in English text? So I
imagine all of you know that, in fact, E

69
00:05:45,099 --> 00:05:49,617
is the most common letter. And that is
gonna, if we make it quantitative, that's

70
00:05:49,617 --> 00:05:54,194
gonna help us break a substitution cipher.
So just given the ciphertext, we can

71
00:05:54,194 --> 00:05:59,012
already recover the plaintext. So the way
we do that is, first of all, using

72
00:05:59,012 --> 00:06:04,094
frequencies of English letters. So here's
how this works. So you give me an

73
00:06:04,094 --> 00:06:09,737
encrypted message using the substitution
cipher. All I know is that the plaintext

74
00:06:09,737 --> 00:06:15,227
is in English and I know that the letter E
is the most frequent letter in English.

75
00:06:15,227 --> 00:06:19,846
And in fact, it appears 12.7 percent of
the time in standard English texts. So

76
00:06:19,846 --> 00:06:25,202
what I'll do is I'll look at the ciphertext you gave me and I'm going to count

77
00:06:25,202 --> 00:06:30,692
how many times every letter appears. Now
the most common letter in the ciphertext

78
00:06:30,692 --> 00:06:35,771
is going to be the encryption of the
letter E with very high probability. So

79
00:06:35,771 --> 00:06:41,187
now I'm able to recover one entry in the
key table. Mainly the letter, mainly now I

80
00:06:41,187 --> 00:06:46,855
know what the letter E maps to. The
next, most common letter in English is the

81
00:06:46,855 --> 00:06:52,068
letter T, that appears about 9.1 percent
of the time. So now again, I count how

82
00:06:52,068 --> 00:06:56,526
many times each letter appears in the
ciphertext. And the second most frequent

83
00:06:56,526 --> 00:07:01,269
letter is very likely to be the encryption
of the letter T. So now I've recovered a

84
00:07:01,269 --> 00:07:05,784
second entry in the key table. And I can
continue this way. In fact, the letter A

85
00:07:05,784 --> 00:07:09,841
is the next most common letter; it appears
8.1 percent of the time. So now I can

86
00:07:09,841 --> 00:07:14,642
guess that the third most common letter in
the ciphertext is the encryption of the

87
00:07:14,642 --> 00:07:19,157
letter A. And now I've recovered three
entries in the key table. Well, so now

88
00:07:19,157 --> 00:07:23,543
what do I do? The remaining letters in
English appear roughly same amount of

89
00:07:23,543 --> 00:07:27,997
time, other than some rare letters like Q
and X. But we're kinda stuck at this

90
00:07:27,997 --> 00:07:32,963
point. We figured out three entries in
the key table but what do we do next? So,

91
00:07:32,963 --> 00:07:38,619
the next idea is to use frequencies of
pairs of letters. Sometimes these are

92
00:07:38,619 --> 00:07:44,647
called digrams. So, what I'll do is, I'll
count how many times each pair of letters

93
00:07:44,647 --> 00:07:50,527
appears in the cipher text, and, I know
that in English, the most common pairs of

94
00:07:50,527 --> 00:07:55,973
letters are things like, HE, AN. IN, I
guess TH is another common pair of

95
00:07:55,973 --> 00:08:02,240
letters. And so I know that the most
common pair of letters in the ciphertext

96
00:08:02,240 --> 00:08:08,134
is likely to be the encryption of one of
these four pairs. And so by trial and

97
00:08:08,134 --> 00:08:13,257
error I can sort of figure out more entry ...
more elements in the key table and again

98
00:08:13,257 --> 00:08:18,195
by more trial and error this way by
looking at trigrams. I can actually figure

99
00:08:18,195 --> 00:08:23,256
out the entire key table. So the bottom
line here is that in fact the substitution

100
00:08:23,256 --> 00:08:28,441
cipher is vulnerable to the worst possible
type of attack namely a ciphertext only

101
00:08:28,441 --> 00:08:33,440
attack. Just given the ciphertext the
attack that can recover the decryption key

102
00:08:33,440 --> 00:08:37,798
and therefore recover the original plaintext. So there's really no point in

103
00:08:37,798 --> 00:08:41,949
encrypting anything using the substitution
cipher, because the attacker can easily

104
00:08:41,949 --> 00:08:46,100
decrypt it all; you might as well send
your plaintext completely in the clear.

105
00:08:46,100 --> 00:08:50,471
So, now we're gonna fast-forward to the
Renaissance, and, I guess we're moving

106
00:08:50,471 --> 00:08:55,073
from the Roman Era to the Renaissance, and
look at a cipher designed by a fellow

107
00:08:55,073 --> 00:08:59,042
named Vigener, who lived in the
sixteenth century. He designed a couple

108
00:08:59,042 --> 00:09:03,529
of ciphers. Here I'm gonna show you a
variant of one of his ciphers, this is

109
00:09:03,529 --> 00:09:07,153
called a Vigener cipher. So, in a
Vigener cipher, the key is a

110
00:09:07,153 --> 00:09:11,870
word. In this case the word, is CRYPTO,
it's got six letters in it. And then to

111
00:09:11,870 --> 00:09:16,272
encrypt a message, what you do is, you
write the message under the key. So in

112
00:09:16,272 --> 00:09:22,041
this case the message is "WHAT A NICE DAY
TODAY" and then you replicate the key as

113
00:09:22,041 --> 00:09:28,375
many times as needed to cover the message.
And then the way you encrypt is basically,

114
00:09:28,375 --> 00:09:34,514
you add the key letters to the message
letters, modulo 26. So just to give

115
00:09:34,514 --> 00:09:41,125
you an example here, for example, if you
add Y and A, you get Z. If you add T and

116
00:09:41,125 --> 00:09:47,263
A, you get U. And you do this for all the
letters. And remember, whenever you add,

117
00:09:47,263 --> 00:09:52,541
you add modulo 26. So if you go past Z,
you go back to A. So, that's the

118
00:09:52,541 --> 00:09:56,159
Vigener cipher. And in fact,
decryption is just as easy as encryption.

119
00:09:56,159 --> 00:10:00,512
Basically, the way you would decrypt is,
again, you would write the ciphertext

120
00:10:00,512 --> 00:10:05,260
under the key. You would replicate the key
and then you would subtract the key from

121
00:10:05,260 --> 00:10:10,125
the ciphertext to get the original plain
text message. So, breaking the Vigener

122
00:10:10,125 --> 00:10:15,112
cipher is actually quite easy. Let me
show you how you do it. The first thing we

123
00:10:15,112 --> 00:10:20,038
need to do is we need to assume that we
know the length of the key. So let's just

124
00:10:20,038 --> 00:10:24,842
assume we know that. In this case, the
length of the key is six. And then what we

125
00:10:24,842 --> 00:10:29,890
do is we break the cipher text into groups
of six letters each, okay? So we're gonna

126
00:10:29,890 --> 00:10:35,789
get a bunch, a bunch of groups like this.
Each one, contains six letters. And then

127
00:10:35,789 --> 00:10:41,698
we're gonna look at, the first letter in
each group. Okay? So, in this case, yes,

128
00:10:41,698 --> 00:10:47,680
we're looking at the first letter, every
six characters. Now, what do we know about

129
00:10:47,680 --> 00:10:53,514
these six letters? We know that, in fact,
they're all encrypted using the same

130
00:10:53,514 --> 00:10:59,496
letter in the ciphertext. All of these
are encrypted using the letter c. In other

131
00:10:59,496 --> 00:11:09,170
words. Z L W is a shift by three of the
plaintext letters. So if we collect all

132
00:11:09,170 --> 00:11:14,782
these letters then the most common letter
among the set is likely to be the

133
00:11:14,782 --> 00:11:20,394
encryption of E, right? E is the most
common letter in English, therefore, if I

134
00:11:20,394 --> 00:11:26,154
look at every sixth letter, the most
common letter in that set is likely to be

135
00:11:26,154 --> 00:11:32,209
the encryption of the letter E. Ahah! So
let's just suppose that in fact the most

136
00:11:32,209 --> 00:11:38,009
common letter every sixth letter happens
to be the letter H. Then we know that E

137
00:11:38,009 --> 00:11:43,624
plus the first letter of the key is equal
to H. That says that the first letter of

138
00:11:43,624 --> 00:11:48,828
the key is equal to H minus E. And in fact
that is the letter C. So now we've

139
00:11:48,828 --> 00:11:54,275
recovered the first letter of the key. Now
we can continue doing this with the second

140
00:11:54,275 --> 00:11:59,238
letter. So we look at the second letter in
every group of six characters and again,

141
00:11:59,238 --> 00:12:04,141
we repeat the same exercise. We find
the most common letter among the sets and

142
00:12:04,141 --> 00:12:09,044
we know that the most, this most common
letter is likely the encryption of E and

143
00:12:09,044 --> 00:12:13,463
therefore whatever this letter, whatever
this most common letter is if we

144
00:12:13,463 --> 00:12:18,666
subtract 'E' from it we're going to get the
second letter of the key. And so on and so

145
00:12:18,666 --> 00:12:23,418
forth. With, the third letter every six
characters. And this way we recover, the

146
00:12:23,418 --> 00:12:27,900
entire key. And that allows us to
decrypt, the message. Now, the only caveat

147
00:12:27,900 --> 00:12:32,496
is that I had to assume ahead of time that
I know the length of the key, which in

148
00:12:32,496 --> 00:12:37,035
this case is six. But if I don't know the
length of the key ahead of time, that's

149
00:12:37,035 --> 00:12:41,461
not a problem either. What I would do is I
would run this decryption procedure,

150
00:12:41,461 --> 00:12:45,629
assuming the key length is one. Then I'd
run it assuming the key length is two.

151
00:12:45,629 --> 00:12:49,423
Then I would run it assuming the key
lengths is three. And so on, and so on,

152
00:12:49,423 --> 00:12:53,319
and so on, until finally I get a message.
I get a decryption that makes sense,

153
00:12:53,319 --> 00:12:57,771
that's sensical. And once I do that I know
that I've kind of recovered the right

154
00:12:57,771 --> 00:13:02,141
length of the key and I know that
I've also recovered the right key and

155
00:13:02,141 --> 00:13:06,348
therefore the right message. Okay? So
very, very quickly, you can recover, you

156
00:13:06,348 --> 00:13:10,571
can decrypt Vigener cyphers. Again,
this is a ciphertext only attack. The

157
00:13:10,571 --> 00:13:14,954
interesting thing is, Vigener had a
good idea here. This addition mod

158
00:13:14,954 --> 00:13:19,123
26 is actually a good idea, and we'll see
that later, except it's executed very

159
00:13:19,123 --> 00:13:23,307
poorly here. And so we'll correct that, a
little bit later. Okay, we're gonna

160
00:13:23,307 --> 00:13:27,908
fast-forward now from the Renaissance to, to the nineteenth century where

161
00:13:27,908 --> 00:13:32,738
everything became electric. And so people
wanted to design ciphers that use electric

162
00:13:32,738 --> 00:13:37,396
motors. In particular, these ciphers are
called rotor machines because they use

163
00:13:37,396 --> 00:13:42,111
rotors. So an early example is called the
Hibber machine which uses a single motor.

164
00:13:42,111 --> 00:13:46,654
Here you have a picture of this machine.
The, the motor, the, I guess the rotor is

165
00:13:46,654 --> 00:13:51,941
over here. And the secret key is captured
by this disc here, it's embedded inside of

166
00:13:51,941 --> 00:13:56,524
this disc, which rotates by one notch
every time you press a key on the

167
00:13:56,524 --> 00:14:01,687
typewriter, okay? So every time you, that
you hit a key, the disc rotates by one

168
00:14:01,687 --> 00:14:06,722
notch. Now what does this key do? Well,
the key actually encodes a substitution

169
00:14:06,722 --> 00:14:11,950
table. So ... and therefore, the disc actually
is the secret key. And as I said, this

170
00:14:11,950 --> 00:14:17,049
disc encodes a substitution table. In this
case, if you happen to press C as the

171
00:14:17,049 --> 00:14:22,211
first letter, output would be the letter
T. And then the disc would rotate by one

172
00:14:22,211 --> 00:14:27,242
notch. After rotating, rotating by one
notch, the new substitution table becomes

173
00:14:27,242 --> 00:14:31,693
the one shown here. You see that E,
basically, moves up, and then the

174
00:14:31,693 --> 00:14:36,531
remaining letters move down. So imagine
this is basically a two dimensional

175
00:14:36,531 --> 00:14:41,495
rendering of the disc rotating by one
notch. Then you press the next letter. And

176
00:14:41,495 --> 00:14:46,798
the disc rotates again. You notice again N
moved up and the remaining letters moved

177
00:14:46,798 --> 00:14:51,590
down. So in particular, if we hit the
letter C three times, the first time we

178
00:14:51,590 --> 00:14:56,765
would output, the output would be T, the
second time the output would be S, and the

179
00:14:56,765 --> 00:15:01,756
third time the output wold be K. So this
is how the single rotor machine works and

180
00:15:01,756 --> 00:15:06,806
as it turned out very quickly after it was
advertised it was again broken basically

181
00:15:06,806 --> 00:15:11,136
using letter frequency, digram
frequencies and trigram frequencies. It's

182
00:15:11,136 --> 00:15:16,126
not that hard given enough ciphertext to
directly recover the secret key and then

183
00:15:16,126 --> 00:15:20,756
the message. Again, a ciphertext only
attack. So to kind of work against these

184
00:15:20,756 --> 00:15:25,326
frequency attacks, these statistical
attacks, these rotor machines became more

185
00:15:25,326 --> 00:15:29,861
and more complicated over time. Until
finally, I'm sure you've all heard of the

186
00:15:29,861 --> 00:15:33,841
Enigma. The Enigma is a kind of
complicated rotor machine. It uses

187
00:15:33,841 --> 00:15:37,991
three, four, or five rotors. There are
different versions of the Enigma

188
00:15:37,991 --> 00:15:42,311
machine. Here you see an example of the
Enigma machine with three rotors. The

189
00:15:42,311 --> 00:15:47,086
secret key in the Enigma machine is the
initial setting of the rotors. Okay. So in

190
00:15:47,086 --> 00:15:51,748
the case of three rotors there would be 26
cubed possible different keys. When you

191
00:15:51,748 --> 00:15:57,049
type on the typewriter basically these
rotors here rotate at different rates.  Oh,

192
00:15:57,049 --> 00:16:02,351
forgot to say this is a diagram of an Enigma
machine using four rotors. As you type on

193
00:16:02,351 --> 00:16:07,463
the typewriter the rotors rotate and
output the appropriate, letters of, the

194
00:16:07,463 --> 00:16:12,576
ciphertext. So in this case the number
of keys is 26 to the fourth, which is two

195
00:16:12,576 --> 00:16:17,372
to the eighteen, which is relatively a
small key space. Today you can kind of,

196
00:16:17,562 --> 00:16:22,359
brute-force a search using a computer
through two to the eighteen different

197
00:16:22,359 --> 00:16:26,723
keys, very, very quickly. You know, my
wristwatch can do it in just a few

198
00:16:26,723 --> 00:16:31,010
seconds, I guess. And so, these, this
Enigma machine was, already was using

199
00:16:31,010 --> 00:16:35,529
relatively small key spaces. But I'm sure
you've all heard that the British

200
00:16:35,529 --> 00:16:40,280
cryptographers at Bletchley Park were
able to mount ciphertext only attacks on

201
00:16:40,280 --> 00:16:44,915
the Enigma machine. They were able to
decrypt German ciphers back in World, in

202
00:16:44,915 --> 00:16:49,377
World War Two. And that played an
important role in many different battles

203
00:16:49,377 --> 00:16:54,109
during the war. After the war, I guess
that was the end kind of the mechanical

204
00:16:54,109 --> 00:16:58,988
age and started the digital age where
folks were using computers. And as the

205
00:16:58,988 --> 00:17:04,046
world kind of migrated to using computers,
the government realized that it's buying a

206
00:17:04,046 --> 00:17:09,045
lot of digital equipment from industry.
And so they wanted industry to use a good

207
00:17:09,045 --> 00:17:13,864
cipher so that when it buys equipment from
the, from industry, it would be getting

208
00:17:13,864 --> 00:17:19,509
equipment with, with a decent cipher. And
so the government put out this request for

209
00:17:19,509 --> 00:17:24,691
proposal for a data encryption standard,
a Federal data encryption standard. And

210
00:17:24,691 --> 00:17:30,205
we're gonna talk about this effort, in
more detail later on in the course, but in

211
00:17:30,205 --> 00:17:35,720
1974 a group at IBM put together a cipher
that became known as DES, data encryption

212
00:17:35,720 --> 00:17:41,633
standard, which became a Federal standard
for encrypting data. The key space for DES

213
00:17:41,633 --> 00:17:46,616
is two to the 56, which is relatively
small these days, but was large enough

214
00:17:46,616 --> 00:17:51,553
back in 1974. And another interesting
thing about DES is, rather than, unlike

215
00:17:51,553 --> 00:17:56,683
rotor machines which encrypt one character
at a time the data encryption standard

216
00:17:56,683 --> 00:18:01,623
encrypts 64 bits at a time, namely eight
characters at a time. And we'll see the

217
00:18:01,623 --> 00:18:06,563
significance of this later on in the
course. Because DES uses such

218
00:18:06,563 --> 00:18:11,440
a small key space, these days it can be
broken by a brute-force search and so

219
00:18:11,440 --> 00:18:15,994
these days DES is considered
insecure and should not be used in

220
00:18:15,994 --> 00:18:20,798
projects. Unfortunately, it is used in
some legacy systems, but it definitely is

221
00:18:20,798 --> 00:18:25,787
on its way out and definitely should not
be used in new projects. Today there are

222
00:18:25,787 --> 00:18:30,529
new ciphers, things like the advanced
encryption standard which uses 128 bit

223
00:18:30,529 --> 00:18:35,579
keys. Again, we'll talk about the advanced
encryption standards in much more detail

224
00:18:35,579 --> 00:18:40,383
later on in the course. There are many,
many other types of ciphers. I mentioned

225
00:18:40,383 --> 00:18:45,248
Salsa20 here. We'll see why in just a
minute. But this is all for the quick

226
00:18:45,248 --> 00:18:49,560
historical survey and now we can get into
the more technical material.
