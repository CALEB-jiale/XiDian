1
00:00:01,794 --> 00:00:04,612
In this segment we're going to look at our first key exchange protocol without a trusted third party.

2
00:00:04,612 --> 00:00:08,174
So the settings are, we have our friends Alice and Bob as usual.

3
00:00:08,174 --> 00:00:11,841
And these friends have never met before but somehow they want to generate a shared key.

4
00:00:11,841 --> 00:00:15,263
So what they're going to do is they're going to send messages to one another, back and forth.

5
00:00:15,263 --> 00:00:18,895
And this time there is no trusted third party that they can communicate with.

6
00:00:18,895 --> 00:00:23,641
And at the end of this protocol, somehow they should have a shared key that they both know.

7
00:00:23,641 --> 00:00:26,153
So there's a secret key k that they both know.

8
00:00:26,153 --> 00:00:32,667
But an eavesdropper who listens in on this traffic has absolutely no idea what this secret key k is.

9
00:00:32,667 --> 00:00:37,669
For now we're just going to worry about attackers that only eavesdrop on the conversation.

10
00:00:37,669 --> 00:00:40,374
In other words, we don't allow any tampering with traffic.

11
00:00:40,374 --> 00:00:43,611
All we allow is just eavesdropping, and yet eavesdroppers should

12
00:00:43,611 --> 00:00:46,417
have no idea what the secret key k is.

13
00:00:46,417 --> 00:00:50,080
So we're going to look at a number of key exchange protocols in these settings.

14
00:00:50,080 --> 00:00:52,954
Namely, when the attacker is only eavesdropping on the conversation

15
00:00:52,954 --> 00:00:58,694
but cannot change traffic. And we're going to see three protocols that achieve this goal.

16
00:00:58,694 --> 00:01:01,262
And the first question, though, for this segment, is

17
00:01:01,262 --> 00:01:04,095
"Can this be done only using symmetric crypto?"

18
00:01:04,095 --> 00:01:08,236
So can this only be done using block ciphers or hash functions, or any of the tools

19
00:01:08,236 --> 00:01:11,327
that we've seen in the last four weeks.

20
00:01:11,327 --> 00:01:15,747
And so very surprisingly, the answer is "Yes", in fact we can do key exchange

21
00:01:15,747 --> 00:01:20,284
just using block ciphers or hash functions without a trusted third party

22
00:01:20,284 --> 00:01:25,265
but unfortunately the resulting protocols are very inefficient and are actually never used in practice.

23
00:01:25,265 --> 00:01:28,904
Nevertheless, these are very simple protocols and so I want to show you how they work,

24
00:01:28,904 --> 00:01:33,317
and then we'll move on to the more efficient protocols that we'll discuss this week and the next.

25
00:01:33,317 --> 00:01:38,305
So the simple protocol I want to show you what's called a Merkle Puzzles protocol.

26
00:01:38,305 --> 00:01:43,810
This protocol was invented by Ralph Merkle back in 1974 when he was just an undergraduate.

27
00:01:43,810 --> 00:01:48,218
Interestingly, he invented this protocol as part of a seminar that he took,

28
00:01:48,218 --> 00:01:52,204
but apparently the professor didn't quite understand the significance of the contribution

29
00:01:52,204 --> 00:01:55,151
and as a result Ralph Merkle actually graduated and then moved

30
00:01:55,151 --> 00:01:58,342
to Stanford where he became Marty Hellman's student

31
00:01:58,342 --> 00:02:02,255
and they've done a lot of good things in public-key cryptography since then.

32
00:02:02,255 --> 00:02:05,478
So let me show you how Merkle Puzzles work.

33
00:02:05,478 --> 00:02:08,084
The main tool for this protocol is what's called a "puzzle"

34
00:02:08,084 --> 00:02:10,164
and let me explain what I mean by a puzzle.

35
00:02:10,164 --> 00:02:14,020
A puzzle is a problem that's difficult to solve, but can be solved with some effort.

36
00:02:14,020 --> 00:02:17,282
In other words, if you really put your mind to it you can solve it.

37
00:02:17,282 --> 00:02:18,719
So let me give an example.

38
00:02:18,719 --> 00:02:22,826
Suppose we have a symmetric cipher that uses keys that are 128 bits long

39
00:02:22,826 --> 00:02:24,988
So just think of AES for example.

40
00:02:24,988 --> 00:02:31,080
And suppose what I do is a choose an AES key such that the first 96 bits are all 0

41
00:02:31,080 --> 00:02:35,996
and only the remaining 32 bits are non-zero and just chosen at random.

42
00:02:35,996 --> 00:02:42,502
Ok, so only 32 bits of this 128-bit key are random. The rest are all 0.

43
00:02:42,502 --> 00:02:46,683
And now what I do is I encrypt a fixed plaintext, for example,

44
00:02:46,683 --> 00:02:52,504
simply the plaintext "message" using this 128-bit key that happens to be mostly 0.

45
00:02:52,504 --> 00:02:55,252
The result is what I would call a "puzzle".

46
00:02:55,252 --> 00:02:58,250
The reason I call it a puzzle is because it's actually not that hard to find

47
00:02:58,250 --> 00:03:03,279
the secret key P simply by trying all 2-to-the-32 possibilities.

48
00:03:03,279 --> 00:03:10,376
Remember the first 96 bits are all 0, there are only 2-to-the-32 possible keys to try.

49
00:03:10,376 --> 00:03:16,407
And for each key we'll try to decrypt this puzzle and see if we get the plaintext "message".

50
00:03:16,407 --> 00:03:20,877
If so, we know that we've recovered the right solution, P.

51
00:03:20,877 --> 00:03:25,043
So within 2-to-the-32 work, we can actually solve this puzzle.

52
00:03:25,043 --> 00:03:28,507
Namely, we can find P just given puzzle(P).

53
00:03:28,507 --> 00:03:30,350
So the way this is going to work is as follows:

54
00:03:30,350 --> 00:03:33,524
Alice is going to start by generating a large number of puzzles.

55
00:03:33,524 --> 00:03:36,473
In particular, she's going to generate 2-to-the-32 different puzzles.

56
00:03:36,473 --> 00:03:40,558
Now each of these puzzles, the way she generates it is as follows:

57
00:03:40,558 --> 00:03:44,912
What' she'll do is she'll choose a 32-bit random puzzle P-i,

58
00:03:44,912 --> 00:03:48,106
(she does this for i = 1 to 2-to-the-32)

59
00:03:48,106 --> 00:03:52,567
and then she's going to choose two more values, x-i and k-i that

60
00:03:52,567 --> 00:03:54,108
happen to be 128-bits each.

61
00:03:54,108 --> 00:04:00,779
Now what she'll do is she'll use the puzzle P-i as an AES secret key.

62
00:04:00,779 --> 00:04:06,581
So she'll create 128-bit key where 96 of the bits are set to 0.

63
00:04:06,581 --> 00:04:09,987
And only the 32 least significant bits happen to be random.

64
00:04:09,987 --> 00:04:13,511
So this is a key that only has 32bits of entropy, if you like,

65
00:04:13,511 --> 00:04:15,934
and there are only 2-to-the-32 such keys.

66
00:04:15,934 --> 00:04:19,439
Now the plaintext that she'll encrypt using this key

67
00:04:19,439 --> 00:04:22,025
is this message that I wrote over here.

68
00:04:22,025 --> 00:04:23,890
Basically it's starts off with the word "Puzzle".

69
00:04:23,890 --> 00:04:27,253
That puzzle is identified by the identifier x-i,

70
00:04:27,253 --> 00:04:29,623
which happens to be 128 bits.

71
00:04:29,623 --> 00:04:32,548
And to that we concatenate a value k-i which also happens

72
00:04:32,548 --> 00:04:34,056
to be 128 bits.

73
00:04:34,056 --> 00:04:38,270
So she does this for all 2-to-the-32 puzzles, and as a result

74
00:04:38,270 --> 00:04:41,267
she gets 2-to-the-32 different puzzles.

75
00:04:41,267 --> 00:04:44,283
She then goes ahead and sends these 2-to-the-32 puzzles to Bob.

76
00:04:44,283 --> 00:04:46,213
So what does Bob do?

77
00:04:46,213 --> 00:04:49,790
Well Bob receives this flood of 2-to-the-32 different puzzles.

78
00:04:49,790 --> 00:04:51,785
He's just going to choose one of them.

79
00:04:51,785 --> 00:04:53,503
He doesn't even have to remember any of them.

80
00:04:53,503 --> 00:04:55,857
He just randomly lets most of them go by.

81
00:04:55,857 --> 00:04:57,997
And he happens to choose one of them.

82
00:04:57,997 --> 00:05:00,215
Let's say he chose puzzle number "j".

83
00:05:00,215 --> 00:05:04,150
Then he spends time 2-to-the-32 and solves this puzzle.

84
00:05:04,150 --> 00:05:06,127
Well what does it mean to solve this puzzle?

85
00:05:06,127 --> 00:05:08,430
He's going to try all possible values of P-i.

86
00:05:08,430 --> 00:05:11,971
He's going to decrypt the puzzle that he chose, and

87
00:05:11,971 --> 00:05:15,490
he's going to check whether the first part of the plaintext starts

88
00:05:15,490 --> 00:05:17,152
with the word puzzle.

89
00:05:17,152 --> 00:05:19,481
And if it does, he knows that he's correctly solved that puzzle,

90
00:05:19,481 --> 00:05:22,866
and he basically obtains the data embedded in the puzzle

91
00:05:22,866 --> 00:05:25,552
namely, x-j and k-j.

92
00:05:25,552 --> 00:05:29,801
Remember x-j is this value that identifies the puzzle

93
00:05:29,801 --> 00:05:31,455
and k-j is going to be a secret that they use.

94
00:05:31,455 --> 00:05:35,988
So now he's solved the puzzle -- he knows that he's solved the puzzle correctly

95
00:05:35,988 --> 00:05:38,087
and he obtained this x-j and k-j.

96
00:05:38,087 --> 00:05:40,667
What he'll do is he'll send x-j back to Alice

97
00:05:40,667 --> 00:05:45,885
-- just the value of x-j. k-j he keeps for himself, and keeps it a secret.

98
00:05:45,885 --> 00:05:49,186
And then Alice is simply going to lookup in her database

99
00:05:49,186 --> 00:05:52,311
of puzzles, she's going to lookup puzzle number x-j,

100
00:05:52,311 --> 00:05:57,577
and then she knows Bob chose the key k-j.

101
00:05:57,577 --> 00:05:59,608
And now they have this shared key.

102
00:05:59,608 --> 00:06:02,875
So k-j is going to be the shared key they that use to communicate securely with one another.

103
00:06:02,875 --> 00:06:07,262
So in a diagram the way this protocol works is as follows:

104
00:06:07,262 --> 00:06:11,228
Alice starts off by sending 2-to-the-32 puzzles to Bob.

105
00:06:11,228 --> 00:06:14,468
So we can generalize this. Let's say that she says n puzzles to Bob.

106
00:06:14,468 --> 00:06:19,152
And lets say that each puzzle takes work proportional to n to solve.

107
00:06:19,152 --> 00:06:21,512
Bob solves one of these puzzles,

108
00:06:21,512 --> 00:06:24,347
and then he sends back x-j to Alice.

109
00:06:24,347 --> 00:06:28,494
So far each one of them has spent work n.

110
00:06:28,494 --> 00:06:31,595
And then Alice basically looks up puzzle x-j

111
00:06:31,595 --> 00:06:35,339
and recovers the key that corresponds to this puzzle.

112
00:06:35,339 --> 00:06:38,411
And as a result both of them now have a shared key

113
00:06:38,411 --> 00:06:40,185
that they can use to communicate with one another.

114
00:06:40,185 --> 00:06:42,157
Ok so lets look at the work they did.

115
00:06:42,157 --> 00:06:44,845
So the work that Alice did is that she had to prepare n puzzles.

116
00:06:44,845 --> 00:06:47,255
Well, preparing the puzzle takes constant time.

117
00:06:47,255 --> 00:06:51,006
She had to prepare n puzzles, so her work is roughly order n.

118
00:06:51,006 --> 00:06:54,232
Bob chose one puzzle and solved it, so his work

119
00:06:54,232 --> 00:06:57,402
is also proportional to order n. So linear in n.

120
00:06:57,402 --> 00:07:00,238
Let's see what the eavesdropper has to do.

121
00:07:00,238 --> 00:07:03,001
Well the poor eavesdropper sees these n puzzles go by

122
00:07:03,001 --> 00:07:05,366
and then he sees this x-j come back.

123
00:07:05,366 --> 00:07:08,678
And he doesn't really know which puzzle Bob actually solved.

124
00:07:08,678 --> 00:07:12,022
All he sees is this random value inside of the puzzle.

125
00:07:12,022 --> 00:07:14,480
And so to break this protocol, the eavesdropper would

126
00:07:14,480 --> 00:07:18,347
actually have to solve all puzzles until he finds the right puzzle

127
00:07:18,347 --> 00:07:21,517
that has the value x-j in it, and then he will recover k-j.

128
00:07:21,517 --> 00:07:24,894
So my question to you is, "What is the attacker's work?"

129
00:07:24,894 --> 00:07:26,955
How much work did the eavesdropper have to spend

130
00:07:26,955 --> 00:07:28,705
in order to break this protocol.

131
00:07:28,705 --> 00:07:33,536
So the answer is, of course, order n-squared.

132
00:07:33,536 --> 00:07:35,487
You know, quadratic time in n.

133
00:07:35,487 --> 00:07:39,125
He had to solve n puzzles. Each puzzle takes time n to solve.

134
00:07:39,125 --> 00:07:42,306
And as a result he had to spend time order n-squared.

135
00:07:42,306 --> 00:07:45,467
In our example we said that there were 2-to-the-32 puzzles

136
00:07:45,467 --> 00:07:47,986
and each one took 2-to-the-32 time to solve,

137
00:07:47,986 --> 00:07:51,820
so overall the attacker's work is roughly 2-to-the-64 steps.

138
00:07:51,820 --> 00:07:55,465
So you can see the problem with this protocol.

139
00:07:55,465 --> 00:07:58,151
First of all, the participants Alice and Bob had to do quite

140
00:07:58,151 --> 00:07:59,584
a bit of work themselves.

141
00:07:59,584 --> 00:08:01,421
If you think about it, Alice basically had to send

142
00:08:01,421 --> 00:08:03,481
2-to-the-32 puzzles to Bob.

143
00:08:03,481 --> 00:08:07,168
That's many. many gigabytes that she had to send to Bob.

144
00:08:07,168 --> 00:08:10,893
Like 16 or 32 gigabytes, depending on how big each puzzle is.

145
00:08:10,893 --> 00:08:14,937
Bob had to spend time 2-to-the-32 to solve one of these puzzles.

146
00:08:14,937 --> 00:08:16,787
That would take a few seconds, too.

147
00:08:16,787 --> 00:08:20,361
But then, all the security they got is that the attacker

148
00:08:20,361 --> 00:08:23,435
can break this protocol in time 2-to-the-64.

149
00:08:23,435 --> 00:08:26,677
So 2-to-the-64 is still not considered particularly secure.

150
00:08:26,677 --> 00:08:29,366
As a result, the attacker, really, if he really wanted

151
00:08:29,366 --> 00:08:31,502
to break this protocol, he could.

152
00:08:31,502 --> 00:08:33,738
So to make this secure, the participants would have to

153
00:08:33,738 --> 00:08:36,141
increase the parameter n.

154
00:08:36,141 --> 00:08:38,391
And they would have to send, say, 2-to-the-64

155
00:08:38,391 --> 00:08:41,450
puzzles to one another, and then spend time 2-to-the-64

156
00:08:41,450 --> 00:08:44,380
to solve each puzzle, and then the attacker's work

157
00:08:44,380 --> 00:08:47,791
would be 2-to-the-128, which is considered secure.

158
00:08:47,791 --> 00:08:50,165
But having the participants spend time 2-to-the-64 to

159
00:08:50,165 --> 00:08:53,217
set up a secure session is a little bit too much

160
00:08:53,217 --> 00:08:55,429
to ask each of these participants.

161
00:08:55,429 --> 00:08:58,954
So this is why this protocol is not particularly used in practice.

162
00:08:58,954 --> 00:09:01,496
But nevertheless there's a really nice idea here

163
00:09:01,496 --> 00:09:04,194
in that the participants had to spend linear time,

164
00:09:04,194 --> 00:09:06,748
whereas the attacker had to spend quadratic time.

165
00:09:06,748 --> 00:09:09,083
So there's a "quadratic gap" between the amount of

166
00:09:09,083 --> 00:09:11,604
work that the participants had to do, versus what the attacker

167
00:09:11,604 --> 00:09:13,607
had to do to break the protocol.

168
00:09:13,607 --> 00:09:16,926
So a natural question is, "Can we actually do better

169
00:09:16,926 --> 00:09:20,132
than a quadratic gap, just using symmetric ciphers?"

170
00:09:20,132 --> 00:09:21,602
In other words, just using tools

171
00:09:21,602 --> 00:09:24,144
that we developed in the first four weeks of the class.

172
00:09:24,144 --> 00:09:27,384
And the answer really is that this is unknown.

173
00:09:27,384 --> 00:09:30,633
We don't know whether a quadratic gap is the best that we can do.

174
00:09:30,633 --> 00:09:32,993
You might even try to think about this a bit.

175
00:09:32,993 --> 00:09:36,062
How would you use AES or SHA-256 to do key exchange

176
00:09:36,062 --> 00:09:38,556
that achieves better than a quadratic gap.

177
00:09:38,556 --> 00:09:40,759
But I can tell you that we believe that quadratic

178
00:09:40,759 --> 00:09:41,931
is the best we can do.

179
00:09:41,931 --> 00:09:44,436
And there are even some negative results along those lines.

180
00:09:44,436 --> 00:09:47,557
So roughly speaking, there is a result that says

181
00:09:47,557 --> 00:09:51,177
that, in fact, if we treat the block cipher or the hash function

182
00:09:51,177 --> 00:09:53,736
that we use as a black box oracle -- in other words

183
00:09:53,736 --> 00:09:57,124
all the participants can do is just query the block cipher

184
00:09:57,124 --> 00:09:59,165
or query the hash function at certain points

185
00:09:59,165 --> 00:10:03,237
and receive the results -- if that's all they're allowed to do,

186
00:10:03,237 --> 00:10:05,729
in other words, they're not allowed to actually use the implementation

187
00:10:05,729 --> 00:10:08,541
of the cipher, or the hash function, then in fact

188
00:10:08,541 --> 00:10:12,414
there is a result that says that if the participants only query

189
00:10:12,414 --> 00:10:15,351
the block cipher at n points, there will always be an attack

190
00:10:15,351 --> 00:10:18,707
that runs in time n-squared.

191
00:10:18,707 --> 00:10:21,549
So again this suggests that if all you do is use

192
00:10:21,549 --> 00:10:24,094
the block cipher as a black box that you query,

193
00:10:24,094 --> 00:10:26,128
then whatever key exchange you come up with,

194
00:10:26,128 --> 00:10:29,371
there will always be a quadratic attack on this key exchange.

195
00:10:29,371 --> 00:10:31,747
And, in fact, at the end of this module, I point to this

196
00:10:31,747 --> 00:10:34,713
paper -- it's a fairly recent paper from 2009 -- that shows

197
00:10:34,713 --> 00:10:36,591
that quadratic is best we can do.

198
00:10:36,591 --> 00:10:38,985
If you want to read more about this impossibility result

199
00:10:38,985 --> 00:10:41,126
you know, go ahead and take a look at this paper.

200
00:10:41,126 --> 00:10:44,093
It's actually a very readable paper, and you should be able to understand it.

201
00:10:44,093 --> 00:10:46,104
And so the question is what to do next.

202
00:10:46,104 --> 00:10:47,470
So now we're kind of stuck.

203
00:10:47,470 --> 00:10:49,013
We said that with block ciphers, we really can't do

204
00:10:49,013 --> 00:10:51,259
better than a quadratic gap.

205
00:10:51,259 --> 00:10:52,635
And so what do we do?

206
00:10:52,635 --> 00:10:55,029
So this was kind of the starting point of public-key cryptography.

207
00:10:55,029 --> 00:10:57,727
And the realization is that we need more than just

208
00:10:57,727 --> 00:11:00,851
generic block ciphers and generic hash functions.

209
00:11:00,851 --> 00:11:04,682
We actually need functions that have very, very special properties.

210
00:11:04,682 --> 00:11:08,806
And to build these functions, we actually have to rely on some algebra.

211
00:11:08,806 --> 00:11:11,506
So in the next few segments we're going to look

212
00:11:11,506 --> 00:11:14,002
at some algebraic constructions and then we'll see

213
00:11:14,002 --> 00:11:15,760
how to use those for key exchange and for

214
00:11:15,760 --> 99:59:59,000
many other things in public-key cryptography.
