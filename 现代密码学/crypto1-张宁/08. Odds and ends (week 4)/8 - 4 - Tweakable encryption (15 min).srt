1
00:00:00,000 --> 00:00:03,467
In this segment we are gonna look at
another form of encryption called

2
00:00:03,467 --> 00:00:07,520
tweakable encryption. I'm gonna motivate
tweakable encryption using disk encryption

3
00:00:07,520 --> 00:00:11,379
as an application and we'll see disk
encryption as yet another application for

4
00:00:11,379 --> 00:00:15,255
deterministic encryption. So the disk
encryption problem is that we wanna

5
00:00:15,255 --> 00:00:19,790
encrypt sectors on disk. Say each sector
is four kilobytes long and the problem is

6
00:00:19,790 --> 00:00:24,492
that there is no space to expand. In other
words if the sector size is four kilobytes

7
00:00:24,492 --> 00:00:28,585
the cipher text size also has to be
exactly four kilobyte because there is

8
00:00:28,585 --> 00:00:32,402
nowhere to write the extra bits if the
cipher text was bigger than the plaintext.

9
00:00:32,402 --> 00:00:37,564
And so our goal is basically to build a
non expanding encryption where the cipher

10
00:00:37,564 --> 00:00:41,905
text size is identical exactly equal to
the plaintext size. So what does it mean

11
00:00:41,905 --> 00:00:45,820
that encryption can't expand? Well,
technically we were saying, basically the

12
00:00:45,820 --> 00:00:50,099
message space is equal to the cipher text
space. So the message space will be four

13
00:00:50,099 --> 00:00:54,288
kilobyte messages and the cipher text
space would be also four kilobyte

14
00:00:54,288 --> 00:00:58,084
messages. In this case clearly we have to
use deterministic encryption because if

15
00:00:58,084 --> 00:01:02,468
encryption was randomized there will be no
place to store the randomness. And similarly

16
00:01:02,468 --> 00:01:05,841
we have no room for integrity, because we can't
expand the cipher text and add any

17
00:01:05,841 --> 00:01:10,714
integrity bits. So the most we can achieve
is deterministic CPA security and that's

18
00:01:10,714 --> 00:01:14,264
going to be our goal. Now it turns out
there's a really simple lemma to

19
00:01:14,264 --> 00:01:19,600
prove, that basically says if you give me
a deterministically CPA secure cipher

20
00:01:19,600 --> 00:01:23,636
where the message space is equal to the
cipher text space, so no expansion, then in

21
00:01:23,636 --> 00:01:28,043
fact the cipher is a PRP. So, really all
we're saying here is if we want no

22
00:01:28,043 --> 00:01:32,038
expansion at all our only option for
encrypting is what we called construction

23
00:01:32,038 --> 00:01:37,664
number two in the previous segment. Namely
we have to encrypt using a PRP. So, let's

24
00:01:37,664 --> 00:01:41,939
look at how we might encrypt using a
PRP. Well, we take our disk, and we break

25
00:01:41,939 --> 00:01:47,182
it into sectors. And now, if we encrypted
every sector using a PRP under the same

26
00:01:47,182 --> 00:01:52,098
key, we kind of run into our standard
problem with deterministic encryption.

27
00:01:52,098 --> 00:01:57,210
Namely, if sector one and sector three
happen to have the same plain text, then

28
00:01:57,210 --> 00:02:01,303
the encrypted sector one would be equal to
the encrypted sector three and the

29
00:02:01,303 --> 00:02:04,924
attacker would learn that the
corresponding plain texts are the same.

30
00:02:04,924 --> 00:02:09,122
Now this actually is a real problem for
example, if your, if some of your sectors

31
00:02:09,122 --> 00:02:13,267
are empty you know they are all set to
zero then in fact the encrypted sectors

32
00:02:13,267 --> 00:02:17,518
would be identical and as a result the
attacked would know exactly which sectors

33
00:02:17,518 --> 00:02:21,784
on your disk are empty and which sectors
are not. So this is actually quite

34
00:02:21,784 --> 00:02:26,577
problematic and the question is, can we do
any better? And so the answer is yes, and

35
00:02:26,577 --> 00:02:31,720
the first idea that comes to mind is well,
why don't we use a different key for every

36
00:02:31,720 --> 00:02:35,318
sector? So you can see sector number one
gets encrypted with key one, sector number

37
00:02:35,318 --> 00:02:40,153
two gets encrypted with key two and so on
and so forth. So now even if the content

38
00:02:40,153 --> 00:02:44,395
of sector number one is equal to sector
number three the cipher text of sector one

39
00:02:44,395 --> 00:02:48,018
and sector three will be different because
they are encrypted under different keys.

40
00:02:48,018 --> 00:02:52,118
So this actually avoids the leakage that
we talked about before although I do want

41
00:02:52,118 --> 00:02:55,971
to point out that there is still a little
bit of leakage with this mode. For example

42
00:02:55,971 --> 00:03:01,295
if the user happened to change one bit in
sector one and then that sector gets

43
00:03:01,295 --> 00:03:05,691
encrypted into a different cipher text. So
this will be garbled all completely,

44
00:03:05,691 --> 00:03:09,323
because this is a pseudo random
permutation, the sector will be-- even if

45
00:03:09,323 --> 00:03:12,642
one bit of the plain text changes, the
sector will be just mapped to a completely

46
00:03:12,642 --> 00:03:18,654
new random output. However, if the user
then undoes the change, and reverts back

47
00:03:18,654 --> 00:03:23,275
to the original sector, then the encrypted
sector will revert back to its original

48
00:03:23,275 --> 00:03:27,544
state, and the attacker can tell that a
change was made and then reverted. So,

49
00:03:27,544 --> 00:03:31,153
there's still a little bit of 
information leakage. But that type of

50
00:03:31,153 --> 00:03:34,659
information leakage, there's really
nothing we can do without really

51
00:03:34,659 --> 00:03:38,422
sacrificing performance. So, we're just
going to ignore that and deem that

52
00:03:38,422 --> 00:03:42,616
acceptable. So the next question is now
you realize our disks are actually getting

53
00:03:42,616 --> 00:03:46,856
pretty big and there are lots of sectors.
So this would mean that we are generating

54
00:03:46,856 --> 00:03:50,295
lots and lots of keys here, but of course
we don't have to store all these keys, we

55
00:03:50,295 --> 00:03:54,437
can simply generate these keys using a
pseudo random function. So, the way this

56
00:03:54,437 --> 00:03:58,538
would work is we would have a master key
which we would call K. And then the sector

57
00:03:58,538 --> 00:04:03,253
number which I'm gonna denote by T is
gonna be encrypted using the master key.

58
00:04:03,253 --> 00:04:06,838
And the result of that encryption would be
the particular sector key, which I'll

59
00:04:06,838 --> 00:04:11,635
denote by K sub T. Now the reason this is
secured is again because the PRF is

60
00:04:11,635 --> 00:04:15,475
indistinguishable from our random
function, which means that basically if we

61
00:04:15,475 --> 00:04:20,389
apply a random function to these sector
numbers, one, two, three, four, up to L,

62
00:04:20,561 --> 00:04:25,253
they basically get mapped to completely
random elements in the key space and as a

63
00:04:25,253 --> 00:04:29,618
result we are encrypting every sector
using a new random independent key. So

64
00:04:29,618 --> 00:04:33,718
this is a fine construction, however
again, for every sector we would have to

65
00:04:33,718 --> 00:04:37,906
apply this PRF. And so the natural
question is, can we do even better? And it

66
00:04:37,906 --> 00:04:43,391
turns out we can. And this introduces this
concept of a tweakable block cipher where

67
00:04:43,391 --> 00:04:48,442
really what we want is basically to have
one master key. And we want this one

68
00:04:48,442 --> 00:04:53,396
master key to derive many, many,
many PRPs. So we said one way to do that

69
00:04:53,396 --> 00:04:59,008
is simply encrypt the key K using the PRP
number. But as we'll see, there's a more

70
00:04:59,008 --> 00:05:03,598
efficient way to do that. Now this PRP
number is actually what's called a tweak,

71
00:05:03,598 --> 00:05:08,071
and that introduces this concept of
tweakable, a tweakable block cipher. So in

72
00:05:08,071 --> 00:05:12,602
a tweakable block cipher, the encryption
and decryption algorithm basically, as

73
00:05:12,602 --> 00:05:17,250
usual, take a key as input, they take a
tweak as input. This capital T is what's

74
00:05:17,250 --> 00:05:21,383
called the tweak space. And of course they
take the data as input and they output

75
00:05:21,383 --> 00:05:26,777
data in the set X. The property is such that for
every tweak in a tweak space in a random

76
00:05:26,777 --> 00:05:31,572
key. Basically if we fix the key and the
tweak, then we end up with an invertible

77
00:05:31,572 --> 00:05:36,193
function, a one to one function on the
set X. And because the key is random with

78
00:05:36,193 --> 00:05:40,063
the, the function is in fact
indistinguishable from random. In other

79
00:05:40,063 --> 00:05:44,626
words, for every setting of the tweak, we
basically get a PRP, an independent PRP

80
00:05:44,626 --> 00:05:48,843
from X to X. And as I said, the
application for this is now we're going to

81
00:05:48,843 --> 00:05:53,343
use the sector number as the tweak, and as
a result, every sector is going to get its

82
00:05:53,343 --> 00:05:58,336
own independent PRP. So let me very, very
quickly just define more precisely what is

83
00:05:58,336 --> 00:06:03,041
a secure tweakable block cipher. So as we
said there's a tweak space. There's a key,

84
00:06:03,041 --> 00:06:07,025
a tweak space and an [inaudible] space X.
And as usual, we define our two

85
00:06:07,025 --> 00:06:12,196
experiments. Here in experiment one what's
gonna happen is we are gonna choose a

86
00:06:12,196 --> 00:06:17,251
truly random set of permutations. So not
just one permutation we're gonna choose as

87
00:06:17,251 --> 00:06:22,305
many permutations as there are tweaks. So
you notice this is why we raise this to the

88
00:06:22,305 --> 00:06:26,521
size of the tweak space. If the size of
the tweak space is five, this says we are

89
00:06:26,521 --> 00:06:31,877
choosing five random permutations on the
set X. And in the other case, basically,

90
00:06:31,877 --> 00:06:35,429
we're just gonna, you know, choose a
random key, and we're gonna define our set

91
00:06:35,429 --> 00:06:40,665
of permutations as the ones defined by
the, by tweaks in the tweak space. And

92
00:06:40,665 --> 00:06:43,835
then the adversary basically gets to
submit a tweak and an X. And he gets to

93
00:06:43,835 --> 00:06:48,770
see the value of the permutation defined
by the tweak T1, evaluated at the point

94
00:06:48,770 --> 00:06:53,340
X1. And he gets to see this again and
again. And again, he gets to see the value

95
00:06:53,340 --> 00:06:58,614
of the permutation defined by the tweak
T2, evaluated at the point X2, and so on

96
00:06:58,614 --> 00:07:03,223
and so forth. And then his goal is to say
whether he interacted with truly random

97
00:07:03,223 --> 00:07:07,091
permutations, or pseudo random
permutations. And if he can't do it, we

98
00:07:07,091 --> 00:07:11,813
say that this tweakable block cipher is
secure. So the difference from a regular

99
00:07:11,813 --> 00:07:16,137
block cipher, is, in a regular block
cipher, you only get to interact with one

100
00:07:16,137 --> 00:07:19,646
permutation. And then your goal is to tell
whether you're interacting with a

101
00:07:19,646 --> 00:07:24,474
pseudorandom permutation or a truly random
permutation. Here you get to interact with

102
00:07:24,474 --> 00:07:27,847
T random permutations. And again your goal
is to tell whether the T random

103
00:07:27,847 --> 00:07:32,436
permutations are truly random or
pseudorandom. So as usual if you can't

104
00:07:32,436 --> 00:07:37,247
distinguish, if the adversary behaves the
same in both experiments, we say that this

105
00:07:37,247 --> 00:07:43,414
PRP is a secure tweakable PRP. Okay. Very
good. So let's look at some examples. So

106
00:07:43,414 --> 00:07:47,645
we already looked at, at the trivial
example. In the trivial example, what we do,

107
00:07:47,645 --> 00:07:52,240
we just, we're gonna assume that the key
space is equal to the input space. So this

108
00:07:52,240 --> 00:07:59,664
PRP really acts on, you know, X times X to
X. So think of AES for example, where

109
00:07:59,664 --> 00:08:05,070
the key space is 128 bits, the data space
is 128 bits and of course the output is

110
00:08:05,070 --> 00:08:10,540
128 bits and then the way that we defined a
tweakable block cipher again there is a

111
00:08:10,540 --> 00:08:15,360
key, a tweak and data as input is
basically we encrypt the tweak using our

112
00:08:15,360 --> 00:08:20,681
master key and then we encrypt the data
using the resulting random key. Now

113
00:08:20,681 --> 00:08:25,695
you realize that if we wanted to encrypt n
blocks with this tweakable block cipher,

114
00:08:25,695 --> 00:08:30,648
this would require 2n evaluations of
the block cipher: n evaluations to encrypt

115
00:08:30,648 --> 00:08:35,057
the given tweaks, and then n more evaluations 
to encrypt the actual given data.

116
00:08:35,057 --> 00:08:39,955
So, I want to show you a nice example, 
that shows that we can actually do better.

117
00:08:39,955 --> 00:08:43,963
This is called the XTS construction. 
It's actually originally based on

118
00:08:43,963 --> 00:08:49,428
a mode called XEX due to Phil Rogaway.
And it works as follows. So suppose you

119
00:08:49,428 --> 00:08:54,018
give me a, a regular block cipher that
operates on n-bit blocks. So not a

120
00:08:54,018 --> 00:08:57,745
tweakable block cipher, just a regular
block cipher. We're gonna define a

121
00:08:57,745 --> 00:09:01,664
tweakable block cipher. So again, this
tweakable block cipher is gonna take two

122
00:09:01,664 --> 00:09:05,341
keys as input. The tweak space, for
convenience, which you're gonna see in

123
00:09:05,341 --> 00:09:09,817
just a minute, we're gonna assume this
tweak space is made up of, of two values,

124
00:09:09,817 --> 00:09:15,104
T and I. T is going to be some, you know, some
tweak value which we'll see in a minute, and I is

125
00:09:15,104 --> 00:09:19,474
going to be some index. And then X is
going to be an n-bit string which we're

126
00:09:19,474 --> 00:09:24,069
going to apply the tweakable block cipher
to. So, the way XTS works is as follows.

127
00:09:24,069 --> 00:09:27,775
The first thing we're going to do is we're
going to encrypt the left half of the

128
00:09:27,775 --> 00:09:33,266
tweak, namely T, using the key K2 and we're
going to call the result N. So now what

129
00:09:33,266 --> 00:09:37,866
we're gonna do is we're gonna XOR the
message m with some padding function

130
00:09:37,866 --> 00:09:42,589
applied to this value N that we just
derived, at the index I. And this padding

131
00:09:42,589 --> 00:09:46,982
function is extremely fast. We can pretty
much ignore it in the running time. The

132
00:09:46,982 --> 00:09:52,930
next thing we do is we're gonna encrypt
using the key k2. And then we're going

133
00:09:52,930 --> 00:09:56,868
to XOR again, using the same pad. So
we're going to XOR again using the pad

134
00:09:56,868 --> 00:10:02,335
of N applied to I. And the result is going
to be the cipher text, which we'll denote

135
00:10:02,335 --> 00:10:06,576
by C. Okay, so again as I said, the
function P is some very, very simple

136
00:10:06,576 --> 00:10:10,161
function. It's just some multiplication in
a finite field which I'm not going to

137
00:10:10,161 --> 00:10:14,195
explain here. Very, very fast so the
running time is dominated by the running

138
00:10:14,195 --> 00:10:21,614
time of the block cipher E and that's it. That's
XTS. And the nice thing about this construction

139
00:10:21,614 --> 00:10:26,635
is now if we wanted to encrypt n plus one
blocks, all we do is we compute the value

140
00:10:26,635 --> 00:10:32,391
N once. And then for the indices one, two,
three, four basically we just need to

141
00:10:32,391 --> 00:10:37,574
evaluate the PRP E once per block. So we
would need to encrypt n blocks using the

142
00:10:37,574 --> 00:10:43,858
tweaks T,1, T,2, T,3, T,4 and so on. We
would just need n plus one evaluations of

143
00:10:43,858 --> 00:10:47,940
the block cipher E. So it's twice
as fast as the trivial construction.

144
00:10:47,940 --> 00:10:52,431
So I want you to stare for just a minute
at this XTS construction. So my question

145
00:10:52,431 --> 00:10:56,353
to you is, is it really necessary to
encrypt the tweak before using it?

146
00:10:56,353 --> 00:11:00,506
That is, that is the following construction
a secure tweakable PRP. So you can see

147
00:11:00,506 --> 00:11:04,766
in this construction, this tweak is used
directly as input to the padding function

148
00:11:04,766 --> 00:11:09,027
for the XOR and my question to you is 
if we did that, would that be a

149
00:11:09,027 --> 00:11:12,969
secure tweakable PRP? And let me 
remind you again that, this is the key,

150
00:11:12,969 --> 00:11:14,948
this is the tweak and this is the data.

151
00:11:17,948 --> 00:11:20,361
I hope everybody said that this is the correct answer.

152
00:11:20,361 --> 00:11:25,908
Basically, if we set the data to
be P(t, 1), then when we XOR it with the

153
00:11:25,908 --> 00:11:30,992
corresponding tweak, which is also P(t,1)
we're gonna get here, zero. And so

154
00:11:30,992 --> 00:11:35,488
what's gonna get encrypted is actually
zero, so whatever that comes out to be.

155
00:11:35,488 --> 00:11:40,601
Let's say that some value, C0. And
then the actual output is just gonna be C0

156
00:11:40,601 --> 00:11:47,655
XOR P(t,1). Now when we do the same
thing with P(t, 2), we're gonna get c0

157
00:11:47,655 --> 00:11:53,284
XOR P(t, 2). And when we XOR these two
things together, we just get P(t, 1) XOR P(t, 2).

158
00:11:53,284 --> 00:11:58,372
So the fact that this is true means
that an attacker can simply query the

159
00:11:58,372 --> 00:12:03,663
challenger at this tweak and this data,
this tweak and that data. And then just

160
00:12:03,663 --> 00:12:08,110
compute the XOR of the two responses, and
compare to the XOR of the appropriate

161
00:12:08,110 --> 00:12:12,010
padding values. And if the equality holds,
we're interacting with a pseudorandom

162
00:12:12,010 --> 00:12:15,429
function; otherwise we're interacting with
a, with a truly random function. So this

163
00:12:15,429 --> 00:12:20,164
would allow the attacker to defeat this
construction with advantage one. So just

164
00:12:20,164 --> 00:12:24,595
to summarize the way XTS is used for disk
encryption. What we do is we look at

165
00:12:24,595 --> 00:12:28,912
sector number T, and we break it into
blocks, sixteen byte blocks. And then

166
00:12:28,912 --> 00:12:32,825
block number one gets encrypted with a
tweak, T1. Block number two gets encrypted

167
00:12:32,825 --> 00:12:37,831
with a tweak, T2, and so on and so forth.
And so every block gets its own PRP. And

168
00:12:37,831 --> 00:12:41,978
the whole sector, as a result, is
encrypted, using, you know, a collection

169
00:12:41,978 --> 00:12:46,353
of PRPs. Now you notice, this is a block
level PRP. It's not a sector level PRP.

170
00:12:46,353 --> 00:12:50,557
So, in fact, it's not true that each
sector gets encrypted with its own PRP.

171
00:12:50,557 --> 00:12:55,230
It's just each block gets encrypted with
its own PRP. The distinction between a

172
00:12:55,230 --> 00:12:59,037
sector and a block is some, somewhat
artificial, and this XTS mode actually

173
00:12:59,037 --> 00:13:04,230
provides you know, deterministic CPA
encryption at the block level, at the

174
00:13:04,230 --> 00:13:08,902
16-byte level. That's the goal. And this
mode actually is fairly popular in disk

175
00:13:08,902 --> 00:13:13,321
encryption products. I just wrote a couple
of examples here that actually support

176
00:13:13,321 --> 00:13:17,960
XTS. So I wanted you to know that this is
in fact how disk encryption is commonly

177
00:13:17,960 --> 00:13:22,162
done in practice. So, to summarize,
tweakable encryption is a useful concept

178
00:13:22,162 --> 00:13:26,799
to know when you need many independent
PRPs all derived from a single key. One

179
00:13:26,799 --> 00:13:31,436
important thing to remember is, in fact,
the trivial construction is not the most

180
00:13:31,436 --> 00:13:36,073
efficient. There are constructions like
XTS are actually more efficient, where you

181
00:13:36,073 --> 00:13:40,538
can kind of reuse encryptions from one
tweak to get many encryptions for many

182
00:13:40,538 --> 00:13:45,040
different tweaks. And so those are the
better ways to use them. Both the trivial

183
00:13:45,040 --> 00:13:49,872
construction and the XTS construction are
what are called narrow block constructions.

184
00:13:49,872 --> 00:13:54,496
Namely they provide a tweakable block
ciphers for a sixteen byte block. But as we

185
00:13:54,496 --> 00:13:57,762
said, we looked the, at the EME
construction in the last segment, which

186
00:13:57,762 --> 00:14:02,884
provided a PRP for larger, much larger
blocks and in fact EME is a tweakable

187
00:14:02,884 --> 00:14:07,758
mode of operation. So, if you need PRPs for larger
blocks or tweakable PRPs for larger

188
00:14:07,758 --> 00:14:12,608
blocks then you would just use EME. But you
notice there, in EME, you had to apply the

189
00:14:12,608 --> 00:14:16,773
block cipher twice per input block, and
as a result it's twice as slow as

190
00:14:16,773 --> 00:14:21,617
XTS, and is not very often used. So that's
what I wanted to say about tweakable

191
00:14:21,617 --> 00:14:25,593
encryption. And in the next segment we'll
talk about format preserving encryption.
