1
00:00:00,000 --> 00:00:04,438
So now that we understand what collision
resistant hash functions are and we know

2
00:00:04,438 --> 00:00:08,660
how to construct them, we're ready to
describe very popular MAC called HMAC. So

3
00:00:08,660 --> 00:00:12,828
let me remind you what the Merkle-Damgard construction is. Basically we have a

4
00:00:12,828 --> 00:00:17,158
small compression function h from which we
build a large hash function, which is

5
00:00:17,158 --> 00:00:20,785
collision resistant assuming the
compression function is collision resistant.

6
00:00:20,785 --> 00:00:25,169
The question we're gonna ask
this segment is can we use the large hash

7
00:00:25,169 --> 00:00:29,445
function to construct a MAC directly
without having to rely on a PRF. So here's

8
00:00:29,445 --> 00:00:33,879
the first thing that comes to mind.
Suppose I give you a Merkle-Damgard hash

9
00:00:33,879 --> 00:00:38,781
function so you notice a mapped, it hashes
large messages into small digests and we

10
00:00:38,781 --> 00:00:43,742
want to convert that directly into a Mac.
The first thing that comes to mind is well

11
00:00:43,742 --> 00:00:48,526
why don't we just hash the concatenation
of the MAC key as long with the message

12
00:00:48,526 --> 00:00:53,310
that we're trying to MAC? It turns out
that this is completely insecure so let me

13
00:00:53,310 --> 00:00:55,329
ask you, why is this is insecure?

14
00:00:56,036 --> 00:01:01,529
The answer is the standard extension of that, and if you think back to the
Merkle-Damgard construction, you realize

15
00:01:01,529 --> 00:01:06,027
that if I tell you the tag of a particular
message, in other words I tell you the

16
00:01:06,027 --> 00:01:10,580
value at this point. It's very easy for
the attacker to just add another block and

17
00:01:10,580 --> 00:01:15,188
then compute one more application of the
compression function H. And now they'll be

18
00:01:15,188 --> 00:01:19,408
able to get the tag for the original
message concatenated the padding block,

19
00:01:19,408 --> 00:01:23,739
concatenated the word W that they added
themselves and as a result this is an

20
00:01:23,739 --> 00:01:27,887
existential forgery. Yes, so basically
this is exactly what we get here. Where

21
00:01:27,887 --> 00:01:32,497
after concatenating the padding block, the
attacker can actually concatenate whatever

22
00:01:32,497 --> 00:01:36,727
he wants and he would get the tag on this
combined message. So this is totally

23
00:01:36,727 --> 00:01:41,121
insecure and I cannot tell you how many
products have actually made this mistake

24
00:01:41,121 --> 00:01:45,297
where they assumed that this is a secure
Mac. This is completely insecure and

25
00:01:45,297 --> 00:01:49,861
should never ever, ever, ever be used.
Instead there's a standardized method to

26
00:01:49,861 --> 00:01:54,448
convert a collision resistant hash
function to a MAC and that method is

27
00:01:54,448 --> 00:01:59,608
called HMAC. So in particular we could use
the SHA-256 hash function to build

28
00:01:59,608 --> 00:02:04,767
this MAC. The output is going to be 256
bits and in fact HMAC is believed to be a

29
00:02:04,767 --> 00:02:09,609
pseudo-random function, so in fact out of
SHA-256 we get a pseudo-random

30
00:02:09,609 --> 00:02:14,774
function that outputs 256 bit outputs. So
let me show the construction. Here's the

31
00:02:14,774 --> 00:02:19,815
construction in symbols and it works as
follows. First we take our key k and we

32
00:02:19,815 --> 00:02:25,112
concatenate what's we call an internal pad
to it, an ipad to it. This makes it into

33
00:02:25,112 --> 00:02:29,771
one block of the Merkle-Damguard
construction, so for example this would be

34
00:02:29,771 --> 00:02:35,251
512 bits in the case of SHA256. We prepend
this to the message M and then we hash.

35
00:02:35,251 --> 00:02:40,364
Now this by itself we just said is
completely insecure, however what HMAC

36
00:02:40,364 --> 00:02:45,896
does in addition, it takes the output,
which is 256 bits, it prepends to that the

37
00:02:45,896 --> 00:02:51,569
key again XOR with, what's called the
outer pad, the opad. This also becomes

38
00:02:51,569 --> 00:02:56,259
512 bits. It's one block. And then it
hashes the combination of these two to

39
00:02:56,259 --> 00:03:00,943
finally obtain the resulting tag on the
message M. So it's more rather looking

40
00:03:00,943 --> 00:03:05,833
into some symbols. It's more instructive
to look at HMAC in pictures. And so you

41
00:03:05,833 --> 00:03:10,661
can see that here are the two keys k XOR
inner-pad, which is then fed into the

42
00:03:10,661 --> 00:03:15,427
Merkle-Damgard chain. And then the
resulting output of this chain is fed into

43
00:03:15,427 --> 00:03:20,322
another Merkle-Damgard chain and finally
the final output is produced. Okay, so

44
00:03:20,322 --> 00:03:26,090
this is how HMAC works in pictures and
now I want to argue that we've already

45
00:03:26,090 --> 00:03:31,295
seen something very similar to this. In
particular, if you can think of the

46
00:03:31,295 --> 00:03:36,868
compression function H as a PRF where the
key is the first, the top inputs, then

47
00:03:36,868 --> 00:03:42,769
what we're actually doing here is we're
evaluating this PRF H at a fixed IV and

48
00:03:42,769 --> 00:03:48,817
the result here is a random value which
we're gonna call K1. And then we apply the

49
00:03:48,817 --> 00:03:54,792
Merkle-Damgard chain and we can do the
same thing on the outer pad. If you think

50
00:03:54,792 --> 00:04:00,766
of little h as a PRF where the key is the
upper inputs. Again, we're applying this

51
00:04:00,766 --> 00:04:06,519
PRF using a different key to a fixed value
IV and as a result, we're gonna get

52
00:04:06,519 --> 00:04:11,687
another random value K2 So now when we
compute HMAC using these keys, K1 and K2,

53
00:04:11,687 --> 00:04:16,630
this would actually look very familiar
this is basically NMAC. It's identical to

54
00:04:16,630 --> 00:04:21,449
NMac that we discussed in a previous
segment. And notice to argue that this is

55
00:04:21,449 --> 00:04:26,267
an NMac construction we have to assume
that the compression function, little h,

56
00:04:26,267 --> 00:04:31,148
is a PRF where the key is actually the
lower inputs to the function. Now let me

57
00:04:31,148 --> 00:04:36,090
say that these pads, the ipad and the
opad , these are fixed constants that are

58
00:04:36,090 --> 00:04:41,156
specified in the HMAC standard. So these
are literally just 512 bit constants that

59
00:04:41,156 --> 00:04:46,166
never change. And so when we go back to
look at the complete HMAC construction,

60
00:04:46,166 --> 00:04:51,213
you realize that the main difference
between this and NMAC is that these keys

61
00:04:51,213 --> 00:04:56,648
here since they are dependent, you notice
they're both just the same key XORed

62
00:04:56,648 --> 00:05:02,084
with different constants. Essentially, the
keys K1 and K2 are also somewhat dependent

63
00:05:02,084 --> 00:05:07,325
because they're computed by applying a PRF
to the same fixed value, namely IV, but

64
00:05:07,325 --> 00:05:12,101
with dependent keys. And so to argue that
K1 and K2 are pseudo random and

65
00:05:12,101 --> 00:05:17,224
independent of one another, one has to
argue that the compression function not

66
00:05:17,224 --> 00:05:22,282
only is a PRF where when the inputs, the
top input, is the key inputs, but it's

67
00:05:22,282 --> 00:05:27,341
also a PRF when dependent keys are used.
But under those assumptions, basically the

68
00:05:27,341 --> 00:05:32,146
exact same analysis NMAC would apply to
HMAC and we would get security argument

69
00:05:32,146 --> 00:05:36,835
that HMAC is a secure MAC. So as I said,
HMAC can be proven secure under these PRF

70
00:05:36,835 --> 00:05:41,582
assumptions about the compression function
H. The security bounds are just as they

71
00:05:41,582 --> 00:05:46,271
are for NMAC, in other words you should
not have to change the key as long as the

72
00:05:46,271 --> 00:05:51,289
number of messages you're MAC-ing Is
smaller than the size of the output tag to

73
00:05:51,289 --> 00:05:56,527
the one-half, but for HMAC SHA256 the
output space is 2 to the 256. The square

74
00:05:56,527 --> 00:06:01,715
root of that would put us at 2 to the
128. Which means that basically you can

75
00:06:01,715 --> 00:06:07,334
use HMAC SHA256 for as many outputs as you
want, and you'll always maintain security.

76
00:06:07,334 --> 00:06:12,704
And as a last point about HMAC I'll tell
you that TLS Standard actually requires

77
00:06:12,704 --> 00:06:18,129
that one support HMAC SHA-196 which means that
HMAC built form the SHA1 function and

78
00:06:18,129 --> 00:06:24,342
truncated to 96 bits. SHA-1 remember
outputs 160 bits. And we truncated to the

79
00:06:24,342 --> 00:06:29,414
most significant 96 bits. Now you might be
wondering, remember we said before that

80
00:06:29,414 --> 00:06:34,236
SHA-1 is no longer considered a secure
hash function, so how come we're using

81
00:06:34,236 --> 00:06:39,016
SHA-1 in HMac? Well, it turns out it's
actually fine. Because HMAC the analysis

82
00:06:39,016 --> 00:06:44,142
of HMAC doesn't need SHA-1 to be
collision resistant. All it needs is that

83
00:06:44,142 --> 00:06:49,145
the compression function of SHA-1
one be a PRF when either input is allowed

84
00:06:49,145 --> 00:06:52,803
to be the key. And as far as we know
that's still correct for the underlying

85
00:06:52,803 --> 00:06:56,376
compression function for SHA-1.
Even though it might not be collision

86
00:06:56,376 --> 00:06:59,994
resistant. As far as we know it's still
fine to use it inside of HMAC. So this is

87
00:06:59,994 --> 00:07:03,657
the end of our discussion of HMAC and in
our next segment we're going to look at

88
00:07:03,657 --> 00:07:04,698
timing attacks on HMAC.
