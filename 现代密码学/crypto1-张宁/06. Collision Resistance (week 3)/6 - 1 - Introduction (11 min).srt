1
00:00:00,000 --> 00:00:04,006
In this module, we're gonna talk about a
new concept called collision resistance,

2
00:00:04,006 --> 00:00:08,007
which plays an important role in providing
message integrity. Our end goal is to

3
00:00:08,007 --> 00:00:11,078
describe a very popular MAC algorithm
called HMAC, that's widely used in

4
00:00:11,078 --> 00:00:15,090
internet protocols. HMAC itself, is built
from collision resistant hash functions.

5
00:00:15,090 --> 00:00:20,014
Before we do that, let's do a quick recap
of where we are. In the last module we

6
00:00:20,014 --> 00:00:25,019
talked about message integrity where we
said that the MAC system is secure if it's

7
00:00:25,019 --> 00:00:30,007
existentially unforgeable under a chosen
message attack. This means that even an

8
00:00:30,007 --> 00:00:35,025
attacker who is given the tag on arbitrary
messages of his choice cannot construct a

9
00:00:35,025 --> 00:00:39,064
tag for some new message. And then we
showed that in fact any secure PRF

10
00:00:39,064 --> 00:00:44,076
immediately gives us a secure MAC. And so
then we turned around and said well can we

11
00:00:44,076 --> 00:00:49,040
build secure PRFs that take large messages
as inputs? And so we looked at four

12
00:00:49,040 --> 00:00:54,008
constructions. The first construction was
based on CBC, we call it when we looked at

13
00:00:54,008 --> 00:00:58,079
two variants of it, one called encrypted
CBC and one called CMAC. And we said that

14
00:00:58,079 --> 00:01:04,016
these are commonly used with AES. In fact,
in the 802.11i standard, a CBC-MAC is used

15
00:01:04,016 --> 00:01:09,034
for message integrity. In particular, with
the AES algorithm. We looked at another

16
00:01:09,034 --> 00:01:14,045
mode called NMAC, which also converts a
PRF for short inputs into a PRF that's

17
00:01:14,045 --> 00:01:19,081
capable of taking very large messages as
inputs. And these two were both sequential

18
00:01:19,081 --> 00:01:24,047
MAC-s. We then looked at the parallelizable
MAC called PMAC which again was able to

19
00:01:24,047 --> 00:01:29,014
convert a PRF for small inputs into a PRF
for very large inputs. But it did so in a

20
00:01:29,014 --> 00:01:33,052
parallel fashion so a multiprocessor
system would be more efficient with PMAC

21
00:01:33,052 --> 00:01:37,074
than, say, with CBC-MAC. All three of
these built a MAC for large messages by

22
00:01:37,074 --> 00:01:42,036
constructing a PRF for large messages. And
then we looked at the Carter-Wegman MAC

23
00:01:42,036 --> 00:01:46,063
which is actually not a PRF. It's a
randomized MAC so a single message could

24
00:01:46,063 --> 00:01:51,025
actually have many, many different valid
tags and therefore a Carter-Wegman MAC is

25
00:01:51,025 --> 00:01:56,000
actually not a PRF. And if you remember,
the Carter-Wegman MAC was built by

26
00:01:56,000 --> 00:02:00,087
first of all, taking the bulk message and
hashing it down to a small tag using a

27
00:02:00,087 --> 00:02:05,061
fast one-time MAC and then encrypting that
tag using a PRF. The benefit of the

28
00:02:05,061 --> 00:02:10,009
Carter-Wegman MAC was that, as we said, the
hashing of the bulk message is done using

29
00:02:10,009 --> 00:02:13,085
a fast one time MAC. And then in this
module, we're gonna construct MAC-s from

30
00:02:13,085 --> 00:02:17,052
this new concept called collision
resistance. And so the first thing we're

31
00:02:17,052 --> 00:02:21,050
gonna do is construct collision resistant
hash functions. So let's first of all

32
00:02:21,050 --> 00:02:25,081
start by defining what does it mean for a
hash function to be collision resistant.

33
00:02:25,081 --> 00:02:29,086
So think of a hash function from some
message space to a tag space T, and you

34
00:02:29,086 --> 00:02:34,017
should be thinking of the message space as
much, much bigger than the tag space. So

35
00:02:34,017 --> 00:02:38,055
the messages could be gigabytes long, but
the tags would only be like 160 bits. Now

36
00:02:38,055 --> 00:02:42,082
a collision for the function H is a pair
of messages m0, m1, that happen to be

37
00:02:42,082 --> 00:02:46,097
distinct. However, when you apply the
function H to them, you end up with the

38
00:02:46,097 --> 00:02:51,058
same output. So the image you should have
in your mind is essentially there are two

39
00:02:51,058 --> 00:02:56,001
inputs, m0 and m1, and they belong to this
gigantic message space. However, when we

40
00:02:56,001 --> 00:03:00,045
apply the hash function to them, they
happen to collide and they both map to the

41
00:03:00,045 --> 00:03:04,094
same output in the tag space. Now we say
that the function is collision resistant

42
00:03:04,094 --> 00:03:09,038
if it's hard to find collisions for this
function. Now this should seem a little

43
00:03:09,038 --> 00:03:13,080
bit counterintuitive because. We know that
the output space is tiny compared to the

44
00:03:13,080 --> 00:03:17,071
input space. So, by the pigeonhole
principle, there must be lots and lots and

45
00:03:17,071 --> 00:03:21,060
lots of messages that map to the same
output. Just because there isn't enough

46
00:03:21,060 --> 00:03:25,048
space in the output space to accommodate
all the messages without collisions. And

47
00:03:25,048 --> 00:03:29,025
so, we know that there are lots of
collisions, and the question is, is there

48
00:03:29,025 --> 00:03:33,058
an efficient algorithm that finds any such
collisions explicitly. So we say the, the

49
00:03:33,058 --> 00:03:38,008
function is collision resistant, if, for
all explicit efficient algorithms A. And

50
00:03:38,008 --> 00:03:42,087
these algorithms are not able to print the
collision for the function H, okay? And as

51
00:03:42,087 --> 00:03:47,049
usual, we'll define the advantage as the
probability that the algorithm A is able

52
00:03:47,049 --> 00:03:51,048
to output a collision. Now I'm not gonna
formalize a term explicit here. All I'll

53
00:03:51,048 --> 00:03:55,027
say is that it's not enough to just say
that an algorithm exists, and algorithm

54
00:03:55,027 --> 00:03:58,092
that simply prints a collision. Cause we
know many collisions exist. What we

55
00:03:58,092 --> 00:04:02,085
actually want is an explicit algorithm
that we can actually write down and run on

56
00:04:02,085 --> 00:04:06,074
a computer to generate these collisions.
There are ways to formalize that, but I'm

57
00:04:06,074 --> 00:04:10,074
not gonna do that here. Now a classic
example of a collision resistant hash

58
00:04:10,074 --> 00:04:15,002
function is SHA-256 which happens
to output at 256 bits but can take

59
00:04:15,002 --> 00:04:19,058
arbitrary large input. For example, it can
take gigabytes and gigabytes of data and

60
00:04:19,058 --> 00:04:24,003
it will map it all to 256 bits. And yet
nobody knows how to find collisions for

61
00:04:24,003 --> 00:04:28,026
this particular function. So just to show
you that this concept of collision

62
00:04:28,026 --> 00:04:32,020
resistance is very useful, let's see a
very quick application for it. In

63
00:04:32,020 --> 00:04:36,077
particular, let's see how we can trivially
build a MAC given a collision resistant

64
00:04:36,077 --> 00:04:41,029
hash function. So, suppose we have a MAC
for short messages. So you should be

65
00:04:41,029 --> 00:04:46,027
thinking something like AES, which can MAC
sixteen byte messages. And then, suppose

66
00:04:46,027 --> 00:04:51,007
we have a hash function, a collision
resistant hash function from a large message

67
00:04:51,007 --> 00:04:55,074
space, that contains gigabyte messages
into our small message space. Say, into

68
00:04:55,074 --> 00:05:00,060
sixteen byte outputs. Then, basically, we
can define a new MAC, let's call it Ibig,

69
00:05:00,060 --> 00:05:05,027
which happens to be MAC-ing large
messages. And we'll define it simply by

70
00:05:05,027 --> 00:05:10,044
applying the small MAC to the output of
the hash function. And how do we verify a

71
00:05:10,044 --> 00:05:15,067
MAC? Well, basically, given a tag we
verify it by rehashing the given message

72
00:05:15,067 --> 00:05:19,095
and then checking that small MAC actually
verifies under the given tag. Okay, so

73
00:05:19,095 --> 00:05:24,012
this is a very simple way to show you how
collision resistance can take a primitive

74
00:05:24,012 --> 00:05:28,019
that's built for small inputs and expand it
into a primitive that's built for very

75
00:05:28,019 --> 00:05:32,021
large inputs. And in fact we're going to
see this not just for MAC-s. Later on when

76
00:05:32,021 --> 00:05:36,028
we talk about digital signatures, we're
going to do the same thing. We're going to

77
00:05:36,028 --> 00:05:40,015
build a digital signature scheme for small
inputs and then we're going to use

78
00:05:40,015 --> 00:05:44,025
collision resistance to expand the input
space and make it as large as we want. So

79
00:05:44,025 --> 00:05:48,087
the security theorem basically isn't
something that's trivial here. Basically

80
00:05:48,087 --> 00:05:53,056
it says if the underlying MAC is secure
and H is collision resistant, then the

81
00:05:53,056 --> 00:05:58,060
combination which can actually MAC large
messages, is also a secure MAC. And as

82
00:05:58,060 --> 00:06:03,022
a quick example, let's apply this to AES.
So let's use the one example that we

83
00:06:03,022 --> 00:06:09,003
mentioned, SHA-256. So in this
case SHA-256 outputs 256 bit outputs,

84
00:06:09,003 --> 00:06:15,022
which is 32 bytes. So we have to build a
MAC that can MAC 32 byte messages. And the

85
00:06:15,022 --> 00:06:20,083
way we could do that is basically by
applying the sixteen byte AES, plugging it

86
00:06:20,083 --> 00:06:26,024
into a two block CBC. A two block CBC
would expand AES from a PRF on sixteen

87
00:06:26,024 --> 00:06:32,000
bytes to a PRF on 32 bytes. And then take
the output of SHA-256 and plug it into

88
00:06:32,000 --> 00:06:37,090
this two block CBC based on AES. And then
we get a very, very simple, MAC which is

89
00:06:37,090 --> 00:06:43,036
secure assuming AES is a PRF and SHA-256
is collision resistant. So one thing I

90
00:06:43,036 --> 00:06:47,078
wanted to point out is that in fact
collision resistance is necessary for this

91
00:06:47,078 --> 00:06:51,097
construction to work. So in fact,
collision resistance is not just a made-up

92
00:06:51,097 --> 00:06:56,067
term. Collision resistance really is kind
of the essence of why this combined MAC is

93
00:06:56,067 --> 00:07:00,081
secure. And so let's just assume for a
minute that the function H, the hash

94
00:07:00,081 --> 00:07:05,000
function we're using, is not collision
resistant. In other words, there is an

95
00:07:05,000 --> 00:07:09,031
algorithm that can find two distinct
messages that happen to map to the same

96
00:07:09,031 --> 00:07:14,007
output. In this case, the combined MAC. Is
not going to be secure because what the

97
00:07:14,007 --> 00:07:19,009
adversary can do is simply use a chosen
message attack to get a tag for m0. And

98
00:07:19,009 --> 00:07:25,074
then output m1 comma that tag as a forgery
and indeed T is a valid MAC for m1 because

99
00:07:25,074 --> 00:07:30,088
H(m1) happens to be equal to H(m0). And
so in doing so just with a one chosen

100
00:07:30,088 --> 00:07:35,039
message attack the attacker was able to
break this combined MAC simply because the

101
00:07:35,039 --> 00:07:39,097
hash function was not collision resistant.
So it should be, again I want to emphasize

102
00:07:39,097 --> 00:07:43,083
that if someone advertised even one
collision for SHA-256, you know two

103
00:07:43,083 --> 00:07:48,002
messages, just one pair of messages that
happen to have the same output under

104
00:07:48,002 --> 00:07:52,010
SHA-256 that would already make this
construction insecure cause an attacker

105
00:07:52,010 --> 00:07:56,072
could then ask for the tag on one message
and in doing so he would obtain the tag on

106
00:07:56,072 --> 00:08:01,017
the other message as well, and that would
count as an existential forgery. Okay, so

107
00:08:01,017 --> 00:08:05,081
already, we see the collision resistance
is a very useful primitive, in that it

108
00:08:05,081 --> 00:08:10,027
lets us expand the input space of
cryptographic primitives. I wanna show you

109
00:08:10,027 --> 00:08:14,097
one more application where a collision
resistance is directly used for message

110
00:08:14,097 --> 00:08:19,079
integrity. Imagine again, we have files that we
wanna protect. Let's imagine these files

111
00:08:19,079 --> 00:08:24,066
are actually software packages that, we
wanna install on our system. So here are

112
00:08:24,066 --> 00:08:29,024
three different software packages. You
know, maybe one is GCC, on is Emacs, and

113
00:08:29,024 --> 00:08:33,079
another one is, I don't know, VI. Now the
user wants to download the software

114
00:08:33,079 --> 00:08:38,078
package and he wants to make sure that he
really did get a version of the package

115
00:08:38,078 --> 00:08:43,051
that he downloaded and it's not some
version that the attacker tampered with

116
00:08:43,051 --> 00:08:48,044
and modified its contents. So what he
could do is basically refer to a read-only

117
00:08:48,044 --> 00:08:53,061
public space that's relatively small. All
it has to do is hold small hashes of these

118
00:08:53,061 --> 00:08:58,078
software packages. So there isn't a lot of
space needed here. The only requirement is

119
00:08:58,078 --> 00:09:03,059
that this space is read-only. In other
words, the attacker cannot modify the

120
00:09:03,059 --> 00:09:08,088
hashes stored in this space. And then,
once he consults this public space, he can

121
00:09:08,088 --> 00:09:13,094
very easily compute the hash of a package
that he downloaded. Compare it to the

122
00:09:13,094 --> 00:09:18,098
value in the public space. And if the two
match. Then he knows that the version of

123
00:09:18,098 --> 00:09:23,034
the package he downloaded is, in fact, a
correct one. Why is that true? Well,

124
00:09:23,034 --> 00:09:29,015
because the function H is collision
resistant. The attacker cannot find an F1

125
00:09:29,015 --> 00:09:35,027
path, they would have the same hash as F1.
And as a result, the attacker cannot

126
00:09:35,027 --> 00:09:40,005
modify F1 without being detected because
there's no way that the hash of his F1

127
00:09:40,005 --> 00:09:45,000
[inaudible] would map to the value that's
stored in the public space. So, the reason

128
00:09:45,000 --> 00:09:49,072
I brought up this example is, I wanted to
contrast this with the MAC example. We

129
00:09:49,072 --> 00:09:54,062
kinda saw a similar situation with MAC-s.
In the MAC example, we needed a secret key

130
00:09:54,062 --> 00:09:59,020
to verify the individual file tags. But we
didn't need a resource that was a read

131
00:09:59,020 --> 00:10:02,072
only public space. With
collision-resistant hashes, we kind of get

132
00:10:02,072 --> 00:10:06,090
the exact compliment where in fact we
don't need a key to verify. Anyone can

133
00:10:06,090 --> 00:10:11,013
verify. You don't need a secret key for
it. However, now all of a sudden we need

134
00:10:11,013 --> 00:10:15,040
this extra resource which is some space
that the attacker cannot modify. And, in

135
00:10:15,040 --> 00:10:19,063
fact, later on, we're gonna see that with
digital signatures, we can kind get to the

136
00:10:19,063 --> 00:10:23,076
best of both worlds, where we have both
public verifiability, and we don't need a

137
00:10:23,076 --> 00:10:27,090
read only space. But so far, with either
MAC-s or collision resistance, we can have

138
00:10:27,090 --> 00:10:32,003
one, but not the other. So, I'll tell you
that, in fact, this kind of scheme is very

139
00:10:32,003 --> 00:10:35,080
popular. In fact, Linux distributions
often use public space where they

140
00:10:35,080 --> 00:10:39,062
advertise hashes of their software
packages. And anyone can make sure that

141
00:10:39,062 --> 00:10:44,001
they downloaded the right software package
before installing it on their computer. So

142
00:10:44,001 --> 00:10:48,002
this is, in fact, something that's used
quite extensively in the real world. Okay,

143
00:10:48,002 --> 00:10:51,018
so in the next segment we'll talk about
generic attack on collision resistance and

144
00:10:51,018 --> 00:10:53,092
then we'll go ahead and build collision
resistant hash functions.
