1
00:00:00,000 --> 00:00:04,059
In the last two segments we talked about
the CBC-MAC and NMAC to convert a PRF for

2
00:00:04,059 --> 00:00:08,096
small messages into a PRF for much larger
messages. Those two constructions were

3
00:00:08,096 --> 00:00:13,045
sequential, in the sense that if you had
multiple processors you couldn't make the

4
00:00:13,045 --> 00:00:17,082
construction work any faster. In this
segment we're gonna look at a parallel MAC

5
00:00:17,082 --> 00:00:21,065
that also converts a small PRF into a
large PRF, but does it in a very

6
00:00:21,065 --> 00:00:26,014
parallelizable fashion. In particular we're
gonna look at a parallel MAC construction

7
00:00:26,014 --> 00:00:30,029
called PMAC, that uses an underlying PRF
to construct a PRF for much larger

8
00:00:30,029 --> 00:00:34,062
messages. In particular, the PRF can
process much longer messages that can have

9
00:00:34,062 --> 00:00:39,007
variable length and have as many as L
blocks in them. Now the construction works

10
00:00:39,007 --> 00:00:43,032
as follows. We take our message and we
break it into blocks. And then we process

11
00:00:43,032 --> 00:00:47,075
each block independently of the other. So,
the first thing we do, is we evaluate some

12
00:00:47,075 --> 00:00:52,003
function P and we XOR the result
into the first message block, and then we

13
00:00:52,003 --> 00:00:56,052
apply our function F using a key k1.
We do the same for each one of the

14
00:00:56,052 --> 00:01:01,000
message blocks and you notice that we can
do it all parallel, all message blocks are

15
00:01:01,000 --> 00:01:05,038
processed independently of one another.
And we collect all these results into some

16
00:01:05,038 --> 00:01:09,064
final XOR and then we encrypt one more time
to get the final tag value. Now for a

17
00:01:09,064 --> 00:01:13,074
technical reason, actually on the very
last one. We actually don't need to apply

18
00:01:13,074 --> 00:01:17,074
the PRF F, but as I said, this is just
for technical reason, and I'm going to

19
00:01:17,074 --> 00:01:21,084
ignore that for now. Now, I want to
explain what the function P is for and

20
00:01:21,084 --> 00:01:26,028
what it does. So imagine, just for a
second, that the function P isn't actually

21
00:01:26,028 --> 00:01:30,067
there. That is, imagine we actually,
directly feed each message block into the

22
00:01:30,067 --> 00:01:34,062
PRF without applying any other
processing to it. Then I claim that the

23
00:01:34,062 --> 00:01:38,087
resulting MAC is completely insecure and
the reason is essentially no order is

24
00:01:38,087 --> 00:01:43,012
enforced between the message blocks. In
particular, if I swap two message blocks,

25
00:01:43,012 --> 00:01:47,052
that doesn't change the value of the final
tag. Because the XOR is commutative, the

26
00:01:47,052 --> 00:01:51,077
tag will be the same whether we swap the
blocks or not. As a result, an attacker

27
00:01:51,077 --> 00:01:56,001
can request the tag for a particular
message, and then he obtains the tag for a

28
00:01:56,001 --> 00:02:00,021
message where two of the blocks are
swapped and that counts as an existential

29
00:02:00,021 --> 00:02:04,061
forgery. So what this function P tries to
do is essentially enforce order on these

30
00:02:04,061 --> 00:02:08,079
blocks. And you notice that the function
takes, first of all, it's a heed function,

31
00:02:08,079 --> 00:02:13,008
so it takes a key as input. And second of
all, more importantly, it takes the block

32
00:02:13,008 --> 00:02:17,000
number as input. In other words, the
value of the function is different for

33
00:02:17,000 --> 00:02:20,087
each one of the blocks. And that's
actually exactly what's preventing this,

34
00:02:21,002 --> 00:02:25,006
blocks swapping attack. So the function P
actually, is a very easy to compute

35
00:02:25,006 --> 00:02:29,013
function. Essentially given the key and
the message block, all it is, is just a

36
00:02:29,013 --> 00:02:33,019
multiplication in some finite fields. So
it's a very, very simple function to

37
00:02:33,019 --> 00:02:36,094
compute. It adds very little to the
running time of PMAC. And yet, it's

38
00:02:36,094 --> 00:02:40,097
enough in ensure that the PMAC is
actually secure. As we've said, the key

39
00:02:40,097 --> 00:02:45,082
for PMAC is this pair of keys. One key for
the PRF, and one key for this masking

40
00:02:45,082 --> 00:02:50,014
function P. And finally, I'll tell you
that if the message length is not a

41
00:02:50,014 --> 00:02:54,076
multiple of the block length. That is,
imagine the last block is shorter than

42
00:02:54,076 --> 00:02:59,088
full block length, then PMAC actually uses
a padding that's similar to CMAC, so that

43
00:02:59,088 --> 00:03:04,004
there is no need for an additional dummy
block, ever. So that's the PMAC

44
00:03:04,004 --> 00:03:08,026
construction and as usual, we can state
its security theorem. So the security

45
00:03:08,026 --> 00:03:12,071
theorem, by now, you should be used to it.
Essentially, it says that if you give me

46
00:03:12,071 --> 00:03:16,071
an adversary attacking PMAC, I can
construct an adversary attacking the

47
00:03:16,071 --> 00:03:21,003
underlying PRF. Plus an additional error
term. And so, since again, the PRF is

48
00:03:21,003 --> 00:03:25,056
secure, we know that this term is
negligible. And so if we want this term to

49
00:03:25,056 --> 00:03:30,063
be negligible, we know that, we need this
error term to also be negligible. Here, as

50
00:03:30,063 --> 00:03:35,040
usual, q is the number of messages that
are MAC-ed using a particular key. And L

51
00:03:35,040 --> 00:03:39,093
is the maximum length of all those
messages. And PMAC is secure, as long as

52
00:03:39,093 --> 00:03:44,082
its product is less than the square root
of the block size. So for A, yes, this would be

53
00:03:44,082 --> 00:03:49,028
two to the 128, and the square root,
therefore, would be two to the 64th. So the

54
00:03:49,028 --> 00:03:53,044
MAC would be secure, as long as Q times L
is less than two to the 64th. And every time,

55
00:03:53,044 --> 00:03:57,025
as it gets closer to that value, of
course, you would have to change the key

56
00:03:57,025 --> 00:04:01,010
in order to continue MAC-ing more
messages. So the main thing to remember is

57
00:04:01,010 --> 00:04:05,041
that PMAC also gives us a PRF, and when it
processes the message blocks independently

58
00:04:05,041 --> 00:04:10,033
of one another. Turns out that PMAC also
has a very interesting property. Namely,

59
00:04:10,033 --> 00:04:15,056
that PMAC math is incremental. So let me
explain to you what that means. So suppose

60
00:04:15,056 --> 00:04:20,055
the function F that's used to construct PMAC
is not just a PRF, but, in fact, a

61
00:04:20,055 --> 00:04:25,025
permutation, PRP. So we can actually
invert it when we need to. Now suppose

62
00:04:25,025 --> 00:04:30,008
we've already computed the MAC for a
particularly long message m. And now,

63
00:04:30,008 --> 00:04:34,059
suppose just one message block of this
long message changes. So here, m[1] has

64
00:04:34,059 --> 00:04:38,099
changed into m'[1]. But the
remaining message blocks all remain the

65
00:04:38,099 --> 00:04:43,081
same. For other MAC-s, like CBC-MAC, even
though only one message block changed, you

66
00:04:43,081 --> 00:04:48,027
would have to recompute the tag on the
entire message. Recomputing the tag

67
00:04:48,027 --> 00:04:52,073
basically will take time that's
proportional to the length of the message.

68
00:04:52,073 --> 00:04:57,012
It turns out, with PMAC, if we only
change one block, or a small number of

69
00:04:57,012 --> 00:05:01,088
blocks, actually, we can recompute the
value of the tag for the new message very,

70
00:05:01,088 --> 00:05:05,074
very quickly. And let me ask you a puzzle
to see if you can figure out how to do

71
00:05:05,074 --> 00:05:09,036
that yourself. And remember, the function
F is a PRP, and therefore is invertible.

72
00:05:09,036 --> 00:05:13,002
So let's see if you can figure out how to
compute the MAC in the new message by

73
00:05:13,002 --> 00:05:16,087
yourself. So it turns out this can be
done. And you can quickly recompute the

74
00:05:16,087 --> 00:05:20,093
tag on the new message using this third
line here. Just to make sure we all see

75
00:05:20,093 --> 00:05:25,024
the solution let's quickly go back to the
original diagram for PMAC and I can show

76
00:05:25,024 --> 00:05:29,004
you what I mean. So imagine this one
message block changed into some other

77
00:05:29,004 --> 00:05:33,066
block, say, it changed into M'[1]. Then
what we could do is we can take the tag on

78
00:05:33,066 --> 00:05:38,060
the original message before the change was
made. So we can invert the function F, and

79
00:05:38,060 --> 00:05:43,036
determine the value before the function F
was applied. Now, well, since we now have

80
00:05:43,036 --> 00:05:48,006
an XOR of a bunch of blocks, what
we can do is we can cancel out the XOR

81
00:05:48,006 --> 00:05:53,033
that came from the original message block,
basically by XOR-ing this value that came

82
00:05:53,033 --> 00:05:58,068
from the original message block into this
XOR-ed accumulator. And then XOR-ing again

83
00:05:58,087 --> 00:06:03,046
the value that would come from the new
message block back into the XOR

84
00:06:03,046 --> 00:06:08,064
accumulator. And then apply the function F
again. And that will give us the tag for

85
00:06:08,064 --> 00:06:13,090
the new message, where just one block was
changed. So in symbols, basically, I wrote

86
00:06:13,090 --> 00:06:18,060
the formula over here. You can see,
basically, we decrypt the tag, and then we

87
00:06:18,060 --> 00:06:23,092
XOR with the block that comes from the
original message block. We XOR again with

88
00:06:23,092 --> 00:06:28,099
the block that comes from the new message
block. And then we re-encrypt the final

89
00:06:28,099 --> 00:06:33,089
XOR accumulator to get the new tag for the
message with a one block changed. So

90
00:06:33,089 --> 00:06:37,047
that's kind of a neat property. It kind of
shows that if you have very large

91
00:06:37,047 --> 00:06:41,030
messages, you can very quickly update the
tag. Of course you would need the secret

92
00:06:41,030 --> 00:06:45,017
key to do the update, but you can quickly
update the tag if just a small number of

93
00:06:45,017 --> 00:06:49,013
message blocks changed. Okay, so that
concludes our discussion of PMAC. And now

94
00:06:49,013 --> 00:06:53,031
I wanna switch topics a little bit, and
talk about the concept of a one time MAC,

95
00:06:53,031 --> 00:06:57,050
which is basically the analog of the one
time pad, but in the world of integrity.

96
00:06:57,050 --> 00:07:02,007
So let me explain what I mean by that. So
imagine we wanna build a MAC that is only

97
00:07:02,007 --> 00:07:06,065
used for integrity of a single message. In
other words, every time we compute the

98
00:07:06,065 --> 00:07:11,028
integrity of a particular message, we also
change the key. So that any particular key

99
00:07:11,028 --> 00:07:15,081
is used only for integrity of one message.
Then we can define the security game as

100
00:07:15,081 --> 00:07:20,033
basically saying, the attacker's gonna see
one message. Therefore, we only allow him

101
00:07:20,033 --> 00:07:24,063
to do one chosen message attack. So he
gets to submit one message query, and he

102
00:07:24,063 --> 00:07:29,005
is given the tag corresponding to that one
message query. And now his goal is to

103
00:07:29,005 --> 00:07:33,014
forge a message tag pair. Okay, so you
can see his goal was to produce one

104
00:07:33,014 --> 00:07:37,058
message tag pair that verifies correctly and
is different from the pair that he was

105
00:07:37,058 --> 00:07:41,079
actually given. As we'll see, just like
the one time pad and stream ciphers were

106
00:07:41,079 --> 00:07:45,077
quite useful, it turns out one time MAC-s
are also quite useful for the same

107
00:07:45,077 --> 00:07:50,023
applications when we only wanna use a key
to encrypt or to provide integrity for

108
00:07:50,023 --> 00:07:54,030
just a single message. So as usual we
would say that a one time act is secure,

109
00:07:54,030 --> 00:07:58,042
because basically no adversary can win
this game. Now the interesting thing is

110
00:07:58,042 --> 00:08:02,060
that one time MAC-s, just like the one time
pad can be secure against infinitely

111
00:08:02,060 --> 00:08:06,093
powerful adversaries. And not only that,
because they're only designed to be secure

112
00:08:06,093 --> 00:08:11,000
for one time use, they can actually be
faster than MAC-s that are based on PRFs.

113
00:08:11,000 --> 00:08:15,017
And so I just wanted to give you a quick
example of one one time MAC, this is a

114
00:08:15,017 --> 00:08:19,042
classic construction for a one time MAC,
let me show you how it works. The first

115
00:08:19,042 --> 00:08:24,025
step is to pick a prime that's slightly
larger than our block size. In this case

116
00:08:24,025 --> 00:08:29,002
we're going to use 128-bit blocks, so
let's pick the first prime that's bigger

117
00:08:29,002 --> 00:08:33,091
than two to the 128th. This happens to be
two to the 128th plus 51. And now the key

118
00:08:33,091 --> 00:08:38,081
is going to be a pair of random numbers in
the range 1 to our prime, so 1 to q. So we

119
00:08:38,081 --> 00:08:43,046
choose two random integers in the range 1
to q. Now we're given a message so we're

120
00:08:43,046 --> 00:08:47,052
going to take our message and break it
into blocks where each block is 128 bits,

121
00:08:47,052 --> 00:08:51,073
and we're going to regard each number as
an integer in the range 0 to 2 to the

122
00:08:51,073 --> 00:08:55,089
128th minus 1. Now the MAC is defined as
follows. The first thing we do is we take

123
00:08:55,089 --> 00:08:59,060
our message blocks and we kind of
construct the polynomial out of them. So

124
00:08:59,060 --> 00:09:03,061
if there are L blocks in our message,
we're going to construct the polynomial of

125
00:09:03,061 --> 00:09:07,082
degree L and you notice that the constant
term of the polynomial is set to zero. And

126
00:09:07,082 --> 00:09:11,050
then we define the MAC very simply.
Basically what we do is we take the

127
00:09:11,050 --> 00:09:15,028
polynomial that corresponds to the
message, we evaluate it at the point K

128
00:09:15,028 --> 00:09:19,017
that's one half of our secret key, and
then we add the value A which is the

129
00:09:19,017 --> 00:09:22,095
second half of our secret key. And that's
it. That's the whole MAC. So just

130
00:09:22,095 --> 00:09:27,015
basically construct the polynomial that
corresponds to our message, evaluate that

131
00:09:27,015 --> 00:09:31,035
polynomial at half of the secret key, and
add the other half of the secret key to

132
00:09:31,035 --> 00:09:35,050
the result, and of course reduce final
result modulo q. Okay so that's it, so

133
00:09:35,050 --> 00:09:40,049
the whole MAC, it's a one time secure MAC
and we will argue that this MAC is one

134
00:09:40,049 --> 00:09:45,041
time secure, essentially by arguing that
if I tell you the value of MAC for one

135
00:09:45,041 --> 00:09:49,093
particular message, that tells you nothing
at all about the value of the MAC at

136
00:09:49,093 --> 00:09:54,031
another message. And as a result, even
though you've seen the value of the MAC on

137
00:09:54,031 --> 00:09:58,064
a particular message, you have no way of
forging this MAC on some other message.

138
00:09:58,064 --> 00:10:03,018
Now I should emphasize that this is a one
time MAC, but it's not two time secure. In

139
00:10:03,018 --> 00:10:07,067
other words, if you get to see the value
of the MAC on two different messages, that

140
00:10:07,067 --> 00:10:11,094
actually completely compromises the
secret key. And you can actually predict a MAC

141
00:10:11,094 --> 00:10:16,026
for a third or fourth message of your
choice. So then the MAC becomes forgeable.

142
00:10:16,026 --> 00:10:20,074
But for one time use, it is a perfectly
secure MAC, and I'll tell you that in fact

143
00:10:20,074 --> 00:10:24,099
it's a very fast MAC to evaluate. So now
that we've constructed one time MAC-s,

144
00:10:24,099 --> 00:10:29,035
turns out there's actually a general
technique that will convert one time MAC-s

145
00:10:29,035 --> 00:10:33,055
into many time MAC-s. And I just wanted to
briefly show you how that works. So

146
00:10:33,055 --> 00:10:37,047
suppose we have our one time MAC, let's
call it S and V for signing and

147
00:10:37,047 --> 00:10:41,099
verification algorithms, and let's just
assume that the tags themselves are n bit

148
00:10:41,099 --> 00:10:46,079
strings. In addition, let's also look at a
PRF, a secure PRF, that also happens to

149
00:10:46,079 --> 00:10:51,069
output n bit strings but also takes as
inputs n bit strings. So let's now define

150
00:10:51,069 --> 00:10:56,047
a general construction for a MAC. These
MAC-s are called Carter-Wegman MAC-s that

151
00:10:56,047 --> 00:11:01,050
works as follows. Basically what we would
do is we would apply the one time MAC to

152
00:11:01,050 --> 00:11:06,040
the message M and then we're going to
encrypt the results using the PRF. So how do

153
00:11:06,040 --> 00:11:11,006
we encrypt the result? Well, we choose a
random r and then we compute kind of a

154
00:11:11,006 --> 00:11:15,064
one time path from this r by applying the
PRF to it. And then we XOR the result

155
00:11:15,064 --> 00:11:20,050
with the actual one time MAC. So the neat
thing about this construction is that the

156
00:11:20,050 --> 00:11:25,019
fast one time MAC is applied to the long
message, which could be gigabytes long.

157
00:11:25,019 --> 00:11:29,089
And the slower PRF is only applied to this
nonce r, which is then used to

158
00:11:29,089 --> 00:11:34,068
encrypt the final results of the MAC. And
you can argue that if the MAC that was

159
00:11:34,068 --> 00:11:39,046
given to us as a building block is a one
time secure MAC, and the PRF is secure,

160
00:11:39,046 --> 00:11:44,036
then, in fact, we get a many time secure
MAC that happens to output 2n bit tags.

161
00:11:44,036 --> 00:11:49,013
So we're gonna see Carter-Wegman MAC-s later
on when we talk about authenticated

162
00:11:49,013 --> 00:11:53,043
encryption. And, in fact, one of the NIST standard
methods for doing encryption with

163
00:11:53,043 --> 00:11:58,001
integrity, uses a Carter-Wegman MAC for
providing integrity. I want to mention

164
00:11:58,001 --> 00:12:03,012
that this Carter-Wegman MAC is a good
example of a randomized MAC where this nonce

165
00:12:03,012 --> 00:12:08,010
r is chosen afresh every time the tag is
computed. And so for example if you try to

166
00:12:08,010 --> 00:12:13,009
compute a tag for the same message twice
each time you'll choose a different r and

167
00:12:13,009 --> 00:12:18,013
as a result you'll get different tags both
times. And so this is a nice example of a

168
00:12:18,013 --> 00:12:22,069
MAC that's actually not a pseudo random
function, not a PRF, because a single

169
00:12:22,069 --> 00:12:27,067
message could actually be mapped to many
different tags all of which are valid for

170
00:12:27,067 --> 00:12:31,097
that one message. To conclude our
discussion on the Carter-Wegman MAC, let me

171
00:12:31,097 --> 00:12:36,036
ask you the following question. Here we
have the equation for the Carter-Wegman

172
00:12:36,036 --> 00:12:40,082
MAC. As usual, you see the nonce r as
part of the MAC. And the second part of

173
00:12:40,082 --> 00:12:45,033
the MAC I'm gonna denote by t. This is
basically the one time MAC applied to the

174
00:12:45,033 --> 00:12:49,067
message M, and then encrypted using the
pseudo-random function applied to the

175
00:12:49,067 --> 00:12:54,007
nonce r. So we'll denote the result of
this XOR by t. So my question to

176
00:12:54,007 --> 00:12:58,047
you is, given the Carter-Wegman MAC pair r,t
for particular message m, how

177
00:12:58,047 --> 00:13:03,045
would you verify that this MAC is valid?
And recall that its algorithm V here, is

178
00:13:03,045 --> 00:13:08,035
the verification algorithm for the
underlying one time MAC. So this is the

179
00:13:08,035 --> 00:13:13,034
right answer, and to see why, just observe
that this XOR here decrypts the quantity t

180
00:13:13,034 --> 00:13:17,085
to its plain text value, which is
basically the original underlying one time

181
00:13:17,085 --> 00:13:22,065
MAC. And so we can directly feed that into
the verification algorithm for the one

182
00:13:22,065 --> 00:13:26,076
time MAC. The last type of MAC I wanted
to tell you about is one that is very

183
00:13:26,076 --> 00:13:31,011
popular in internet protocols. It's called the HMAC. But before we talk about the HMAC we

184
00:13:31,011 --> 00:13:35,004
have to talk about hash functions and in particular, collision resistant hash

185
00:13:35,004 --> 00:13:39,020
functions and we are going to do that in
the next module. So this is the end of our

186
00:13:39,020 --> 00:13:43,015
first module on MAC-s and I wanted to point
out that there's beautiful theory that

187
00:13:43,015 --> 00:13:47,005
went into constructing all the MAC-s that
we saw. I gave you the highlights showed

188
00:13:47,005 --> 00:13:50,086
you the main constructions, but
there's really quite a bit of theory that

189
00:13:50,086 --> 00:13:54,067
goes into constructing these MAC-s, and if
you'd like to learn more about that, I

190
00:13:54,067 --> 00:13:58,062
listed a couple of key papers you might
want to look at. Let me quickly tell you what they

191
00:13:58,062 --> 00:14:03,017
are. The first one is, what's called the
three key construction, which is the basis

192
00:14:03,017 --> 00:14:07,853
of CMAC. A very elegant paper that give a
very efficient construction out of CBC-MAC.

193
00:14:07,853 --> 00:14:12,005
The second paper is a more technical
paper, but basically shows how to prove

194
00:14:12,005 --> 00:14:16,052
that bounds of CBC-MAC as a PRF. The
third paper talks about PMAC and its

195
00:14:16,052 --> 00:14:21,022
construction. Again, a very acute paper.
The fourth paper talks about security of

196
00:14:21,022 --> 00:14:26,028
NMAC and HMAC as well. HMAC we're going to
cover in, the next module. The last paper

197
00:14:26,028 --> 00:14:30,080
I listed asks an intriguing question.
Recall that all of our constructions, we

198
00:14:30,080 --> 00:14:35,073
always assume that AES is a pseudo-random
function for sixteen byte messages and we

199
00:14:35,073 --> 00:14:40,055
then built a pseudo-random function and
therefore a MAC for much longer messages.

200
00:14:40,055 --> 00:14:45,052
This paper says well, what do we do if AES
is not a pseudo-random function, but still

201
00:14:45,052 --> 00:14:50,064
satisfies some weaker security property
called an unpredictable function. And then

202
00:14:50,064 --> 00:14:55,026
they ask if AES is only an unpredictable
function, but not a pseudo-random

203
00:14:55,026 --> 00:15:00,003
function, can we still build MAC-s for long
messages? And so they succeed in actually

204
00:15:00,003 --> 00:15:03,059
giving constructions just based on the
weaker assumption that AES is an

205
00:15:03,059 --> 00:15:07,035
unpredictable function. But their
constructions are far less sufficient than

206
00:15:07,035 --> 00:15:11,016
CBC-MAC or NMAC, or PMAC that we discussed
in these segments. And so if you're

207
00:15:11,016 --> 00:15:15,027
interested in a different perspective on
how to build MAC-s from block ciphers like

208
00:15:15,027 --> 00:15:18,098
AES, please take a look at this paper. And
there are actually some nice open

209
00:15:18,098 --> 00:15:23,014
questions to work on in this area. So this
concludes our first segment on integrity.

210
00:15:23,014 --> 00:15:26,051
And in the next segment, we're gonna talk
about collision resistance.
