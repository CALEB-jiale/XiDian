1
00:00:00,000 --> 00:00:03,819
In the last segment we talked about the
CBC-MAC and the NMAC, but throughout

2
00:00:03,819 --> 00:00:07,688
the segment we always assumed that the
message length was a multiple of the block

3
00:00:07,738 --> 00:00:12,234
size. In this segment, we're going to see
what to do when the message length is not

4
00:00:12,284 --> 00:00:16,817
a multiple of the block size. So recall
that the encrypted CBC mac or ECBC-MAC for

5
00:00:16,817 --> 00:00:21,401
short uses pseudorandom permutation F to
actually compute the CBC function as we

6
00:00:21,401 --> 00:00:25,928
discussed in the last segment. But in the
last segment, we always assumed that the

7
00:00:25,928 --> 00:00:30,288
message itself could be broken into an
integer number of blocks for the block

8
00:00:30,288 --> 00:00:34,689
cipher. And the question is what to do
when the message length is not a multiple

9
00:00:34,689 --> 00:00:38,919
of the block size. So here we have a
message where the last block actually is

10
00:00:38,919 --> 00:00:43,258
shorter than the full block and the
question is how to compute the ECBC-MAC in

11
00:00:43,258 --> 00:00:47,707
that case. So the solution of course is to
pad the message and the first pad that

12
00:00:47,707 --> 00:00:52,376
comes to mind is to simply pad the message
with all zeros. In other words we take the

13
00:00:52,376 --> 00:00:57,045
last block and just add zeros to it until
the last block becomes as long as one full

14
00:00:57,045 --> 00:01:02,071
block size. And so my question to you is
whether the resulting MAC is secure. So

15
00:01:02,071 --> 00:01:06,911
the answer is no, the MAC is not secure.
And let me explain why, basically the

16
00:01:06,911 --> 00:01:12,324
problem is that it's possible now to come
up with messages so that message m and the

17
00:01:12,324 --> 00:01:17,738
message m concatenated zero happen to have
exactly the same Pad. And as a result once

18
00:01:17,738 --> 00:01:22,833
we plug in both m and m||0 into ECBC we'll
get the same tag out, which means that

19
00:01:22,833 --> 00:01:27,928
both m and m||0 have the
same tag and therefore the attacker can

20
00:01:27,928 --> 00:01:33,194
mount an existential forgery. He would ask
for the tag on the message m. And then he

21
00:01:33,194 --> 00:01:38,344
would output as its forgery the tag and the
message m||0. And it's

22
00:01:38,344 --> 00:01:43,432
easy to say why that's the case. Basically, to be absolutely clear here, we have our

23
00:01:43,432 --> 00:01:48,272
message m. Which after padding becomes m000. So we had to add three

24
00:01:48,272 --> 00:01:53,298
0's to it. And here we have the message m
zero, an m that ends with zero. And after

25
00:01:53,298 --> 00:01:58,324
padding, we basically now have to add two
0's to it. And lo and behold, they become

26
00:01:58,324 --> 00:02:03,118
the same pad, so that they're gonna have
exactly the same tag which allows the

27
00:02:03,118 --> 00:02:07,866
adversary to mount the existential forgery
attack. So this is not a good idea. In

28
00:02:07,866 --> 00:02:12,801
fact appending all 0s is a terrible idea.
And if you think about concrete case where

29
00:02:12,801 --> 00:02:17,222
this comes up imagine the automatic
clearing house system used for clearing

30
00:02:17,222 --> 00:02:21,794
checks. I might have a check for a $100
and the tag on that check. Well, now, the

31
00:02:21,794 --> 00:02:25,943
attacker basically could append a zero to
my check and make it a check for $1000,

32
00:02:25,943 --> 00:02:30,093
and that wouldn't actually change the tag.
So this ability to extend the message

33
00:02:30,093 --> 00:02:34,294
without changing the tag actually could
have pretty disastrous consequences. So I

34
00:02:34,294 --> 00:02:38,547
hope this example convinces you that the
padding function itself must be a one to

35
00:02:38,547 --> 00:02:42,904
one function. In other words, it should be
the case that two distinct messages always

36
00:02:42,904 --> 00:02:47,157
map to two distinct padded messages. We
shouldn't actually have a collision on the

37
00:02:47,157 --> 00:02:51,254
padding function. Another way of saying it
is that the padding function must be

38
00:02:51,254 --> 00:02:55,033
invertible. That guarantees that the
padding function is one to one. So a

39
00:02:55,033 --> 00:02:59,945
standard way to do this was proposed by
the International Standards Organization

40
00:02:59,945 --> 00:03:04,736
ISO. What they suggested is basically,
let's append the string 100000 to the end

41
00:03:04,736 --> 00:03:09,587
of the message to make the message be a
multiple of the block length. Now to see

42
00:03:09,587 --> 00:03:14,439
that this padding is invertible, all we do
is describe the inversion algorithm

43
00:03:14,489 --> 00:03:19,230
which simply is gonna scan the message
from right to left, until it hits the

44
00:03:19,280 --> 00:03:23,778
first one and then it's gonna remove all
the bits to the right of this one,

45
00:03:23,828 --> 00:03:27,929
including the one. And you see that once
we've removed the pattern this way, we

46
00:03:27,929 --> 00:03:32,355
obtain the original message. So here's an
example, so here we have a message where

47
00:03:32,355 --> 00:03:36,726
the last block happens to be shorter than
the block length, and then we

48
00:03:36,726 --> 00:03:40,878
append the 1,0,0 string to it.
It's very easy to see what the pad is,

49
00:03:40,878 --> 00:03:45,249
simply look for the first one from the
right, we can remove this pad and recover

50
00:03:45,249 --> 00:03:49,666
the original message back. Now there's one
corner case that's actually quite

51
00:03:49,666 --> 00:03:54,401
important, and that is what do we do if
the original message length is already the

52
00:03:54,401 --> 00:03:59,440
multiple of a block size? In that case
it's really very, very important that we

53
00:03:59,440 --> 00:04:04,143
add an extra dummy block. That contains
the pad 1000. And again, I can't tell you

54
00:04:04,143 --> 00:04:08,279
how many products and standards have
actually made this mistake where they

55
00:04:08,279 --> 00:04:12,691
didn't add a dummy block and as a result,
the MAC is insecure because there's an

56
00:04:12,691 --> 00:04:17,159
easy existential forgery attack. And let
me show you why. So suppose in case the

57
00:04:17,159 --> 00:04:21,736
message is a multiple of a block length,
suppose we didn't add a dummy block and we

58
00:04:21,736 --> 00:04:26,202
literally MAC-ed this message here. Well,
the result now is that if you look at

59
00:04:26,202 --> 00:04:31,120
the message which is a multiple of the
block size and a message which is not a

60
00:04:31,120 --> 00:04:35,915
multiple of the block size but is padded
to the block size, and imagine it so

61
00:04:35,915 --> 00:04:40,782
happens that this message m prime one
happens to end with 1-0-0. At this point,

62
00:04:40,782 --> 00:04:45,321
you realize that here, the original
message. Here, let me draw it this way.

63
00:04:45,321 --> 00:04:50,133
You realize that the original message
after padding. Would become identical to

64
00:04:50,133 --> 00:04:55,028
the second message that was not padded at
all. And as a result, if I ask for the tag

65
00:04:55,028 --> 00:04:59,806
on this message over here, I would obtain
also the tag on the second message that

66
00:04:59,806 --> 00:05:04,288
happened to end in 1-0-0. Okay, so if we
didn't add the dummy block, basically,

67
00:05:04,288 --> 00:05:08,594
again, the pad would be not invertible,
because two different messages, two

68
00:05:08,594 --> 00:05:13,135
distinct messages, happen to map to the
same padded result. Again, as a result,

69
00:05:13,135 --> 00:05:17,893
the MAC becomes insecure. So to summarize,
this ISO standard is a perfectly fine way

70
00:05:17,893 --> 00:05:22,535
to pad, except you have to remember also
to add a dummy block in case message is a

71
00:05:22,535 --> 00:05:26,749
multiple of the block length to begin
with. Now some of you might be wondering

72
00:05:26,749 --> 00:05:30,919
if there is a padding scheme that never
needs to add a dummy block, and the answer

73
00:05:30,919 --> 00:05:35,139
is that if you look at a deterministic
padding function, then it's pretty easy to

74
00:05:35,139 --> 00:05:39,054
argue that there will always be cases
where we need to pad, and the reason is

75
00:05:39,054 --> 00:05:43,815
just literally the number of messages that
are multiples of the block length is much

76
00:05:43,815 --> 00:05:48,510
smaller than the total number of messages
that need not be a multiple of the block

77
00:05:48,510 --> 00:05:52,853
length. And as a result we can't have a
one to one function from this bigger

78
00:05:52,853 --> 00:05:56,986
set of all messages to the smaller set of
messages which are a multiple of

79
00:05:56,986 --> 00:06:01,013
the block length. There will always be cases
where we have to extend the original

80
00:06:01,013 --> 00:06:05,040
message and in this case that would
correspond to adding this dummy padding

81
00:06:05,040 --> 00:06:09,279
block. However, there is a very clever
idea called CMAC which shows that using a

82
00:06:09,279 --> 00:06:13,639
randomized padding function we can avoid
having to ever add a dummy block. And so

83
00:06:13,639 --> 00:06:18,353
let me explain how CMAC works. So CMAC
actually uses three keys. And, in fact,

84
00:06:18,353 --> 00:06:22,941
sometimes this is called a three key
construction. So this first key, K, is

85
00:06:22,941 --> 00:06:27,654
used in the CBC, the standard CBC MAC
algorithm. And then the keys, K1 and K2,

86
00:06:27,654 --> 00:06:32,815
are used just for the padding scheme at
the very, very last block. And in fact in

87
00:06:32,815 --> 00:06:38,479
the CMAC standard, the keys K1, K2 are
derived from the key K by some sort of a

88
00:06:38,479 --> 00:06:43,834
pseudo random generator. So the way CMAC
works is as follows. Well, if the message

89
00:06:43,834 --> 00:06:48,960
happens to not be a multiple of a block
length, then we append the ISO padding to

90
00:06:48,960 --> 00:06:54,022
it. But then we also XOR this last
block with a secret key, K1, that the

91
00:06:54,022 --> 00:06:58,560
adversary doesn't know. However, if the
message is a multiple of the block length,

92
00:06:58,560 --> 00:07:02,872
then of course, we don't append anything
to it. But we XOR it with a different

93
00:07:02,872 --> 00:07:06,692
key, K2, that, again, the adversary
doesn't actually know. So it turns out,

94
00:07:06,692 --> 00:07:11,276
just by doing that, it's now impossible to
apply the extension attacks that we could

95
00:07:11,276 --> 00:07:14,933
do on the cascade function, and on
raw CBC. Because the poor

96
00:07:14,933 --> 00:07:18,971
adversary actually doesn't know what is
the last block that went into the

97
00:07:18,971 --> 00:07:22,900
function. He doesn't know K1, and therefore,
he doesn't know the value at this

98
00:07:22,900 --> 00:07:27,103
particular point and as a result, he can't do
an extension attack. In fact, this is a

99
00:07:27,103 --> 00:07:32,158
provable statement. And so that this
construction here is simply by XOR-ing

100
00:07:32,158 --> 00:07:36,441
K1 or XOR-ing K2 is really a PRF.
Despite not having to do a final

101
00:07:36,441 --> 00:07:40,327
encryption step after the raw CBC
function is computed. So, that's one

102
00:07:40,327 --> 00:07:44,768
benefit, that there's no final encryption
step. And the second benefit is that we resolve

103
00:07:44,768 --> 00:07:49,430
this ambiguity between whether padding did
happen or padding didn't happen by using

104
00:07:49,430 --> 00:07:54,149
two different keys to distinguish the case
that the message is a multiple of the block

105
00:07:54,149 --> 00:07:58,761
length versus the case where it's not but
we have a pad appended to the message. So

106
00:07:58,761 --> 00:08:03,099
the two distinct keys resolve this
ambiguity between the two cases, and as a

107
00:08:03,099 --> 00:08:06,866
result, this padding actually is
sufficiently secure. And as I said,

108
00:08:06,866 --> 00:08:11,660
there's actually a nice security theorem
that goes with CMAC that shows that the

109
00:08:11,660 --> 00:08:15,884
CMAC construction really is a pseudo-random
function, with the same security

110
00:08:15,884 --> 00:08:20,438
properties as CBC-MAC. So I wanted to
mention that CMAC is a federal standard

111
00:08:20,438 --> 00:08:24,864
standardized by NIST and if you now, these
days, wanted to use a CBC-MAC for

112
00:08:24,875 --> 00:08:29,373
anything, you would actually be using CMAC
as the standard way to do it. But

113
00:08:29,373 --> 00:08:34,290
particularly in CMAC, the underlying block
cypher is AES and that gives us a secure

114
00:08:34,290 --> 00:08:38,261
CBC-MAC derived from AES. So that's the end
on the segment and in the next segment

115
00:08:38,261 --> 00:08:39,549
we'll talk about a parallel MAC.
