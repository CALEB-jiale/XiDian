1
00:00:00,000 --> 00:00:04,412
In this segment and the next, I wanna show
you two very cute attacks on deployed

2
00:00:04,412 --> 00:00:08,603
authenticated encryption systems. But
first let's do a quick recap. So recall

3
00:00:08,603 --> 00:00:12,961
that authenticated encryption means that
the system provides CPA security plus

4
00:00:12,961 --> 00:00:17,207
cipher text integrity. And authenticated
encryption means that we can preserve

5
00:00:17,207 --> 00:00:21,178
confidentiality in the presence of an
active adversary, and moreover, the

6
00:00:21,178 --> 00:00:25,544
adversary can't modify the cipher text in
any way without being detected. We also

7
00:00:25,544 --> 00:00:29,485
showed that authenticated encryption
prevents these very powerful chosen cipher

8
00:00:29,485 --> 00:00:33,279
text attacks. Unfortunately, authenticated
encryption has a pretty significant

9
00:00:33,279 --> 00:00:37,122
limitation in that it simply can't help a
bad implementation. If you implement

10
00:00:37,122 --> 00:00:41,260
authenticated encryption incorrectly, then
your implementation will be vulnerable to

11
00:00:41,260 --> 00:00:45,094
active attacks. And then we looked at
standards constructions. I mentioned these

12
00:00:45,094 --> 00:00:49,108
three standards that provide authenticated
encryption. And I want to point out, when

13
00:00:49,108 --> 00:00:53,073
you need to use authenticated encryption
in practice, you should just be using one

14
00:00:53,073 --> 00:00:56,990
of these three standards. You shouldn't
try to implement authenticated encryption

15
00:00:56,990 --> 00:01:00,617
by yourself, and I hope that the attack
that I'll show you in this segment

16
00:01:00,617 --> 00:01:04,486
convinces you that this is not something
you should do yourself. Just use one of

17
00:01:04,486 --> 00:01:08,306
GCM, CCM or EAX. However, it's good for
you to know that in general, when you want

18
00:01:08,306 --> 00:01:12,223
to provide authenticated encryption, the
correct way to do things is encrypt, then

19
00:01:12,223 --> 00:01:15,850
MAC, because then no matter which
encryption and MAC algorithms you combine.

20
00:01:15,850 --> 00:01:19,493
The result will be authenticated
encryption, again assuming the encryption

21
00:01:19,493 --> 00:01:23,504
and Mac algorithm are implemented
correctly. Okay, so let's look at a very

22
00:01:23,504 --> 00:01:28,402
acute attack on the TLS record protocol.
In particular, when CBC encryption is

23
00:01:28,402 --> 00:01:33,617
used. Let me just briefly remind you that
the way TLS decryption works, is, first of

24
00:01:33,617 --> 00:01:38,176
all, an incoming cipher text is CBC
decrypted. Then the next thing that

25
00:01:38,176 --> 00:01:43,537
happens is the implementation will check
if the pad has the correct format. For

26
00:01:43,537 --> 00:01:49,170
example, if the pad is of length five, the
format should be 55555. And if it's not of

27
00:01:49,170 --> 00:01:54,054
the correct format. Then the cipher text
is rejected. So this basically checks that

28
00:01:54,054 --> 00:01:58,391
the ending of the decrypted record
contains the correct pad. And then if the

29
00:01:58,391 --> 00:02:02,899
pad has the correct format, then the next
thing that happens is that the MAC is

30
00:02:02,899 --> 00:02:07,350
checked, the tag is checked. And if the
tag turns out to be incorrect, again, the

31
00:02:07,350 --> 00:02:11,915
record is rejected. If the tag is valid,
then the remaining data is considered to

32
00:02:11,915 --> 00:02:16,194
be authentic and is given to the
application. So what I wanted to point out

33
00:02:16,194 --> 00:02:20,874
is there are two types of errors in TLS
decryption. One is a padding error and one

34
00:02:20,874 --> 00:02:25,473
is a MAC error. And it turns out it's very
important that the adversary not be told

35
00:02:25,473 --> 00:02:29,657
which of these errors occurred. And let me
briefly explain why. So, suppose an

36
00:02:29,657 --> 00:02:33,951
attacker can actually differentiate the
two types of errors. In other words, he

37
00:02:33,951 --> 00:02:38,645
can tell if a pad error occurred, or a Mac
error occurred. The result is what we call

38
00:02:38,645 --> 00:02:43,138
the padding oracle. ?Cause now, imagine
the adversary has a certain cipher text

39
00:02:43,138 --> 00:02:47,574
that it intercepted. And it wants to try
and decrypt that cipher text. What it

40
00:02:47,574 --> 00:02:52,010
could do, is it could take that cipher
text as is, and submit it to the server.

41
00:02:52,010 --> 00:02:56,365
The server is gonna decrypt the cipher
text and then look to see if the pad has

42
00:02:56,365 --> 00:03:00,491
the correct format. If the pad doesn't
have the correct format, we'll get one

43
00:03:00,491 --> 00:03:04,775
type of error. If the pad has the correct
format, it's very likely since this is

44
00:03:04,775 --> 00:03:08,896
just some random cipher text that the
adversary concocted himself, it's very

45
00:03:08,896 --> 00:03:13,452
likely the mac will be incorrect, and then
the adversary will observe a mac error. So

46
00:03:13,452 --> 00:03:17,682
if the pad is invalid, we'll see a pad
error, whereas if the pad is valid we'll

47
00:03:17,682 --> 00:03:21,747
see a mac error. As a result, the
adversary, after submitting the cipher

48
00:03:21,747 --> 00:03:26,603
text to the server, the adversary can tell
whether the last bytes in the decrypted

49
00:03:26,603 --> 00:03:31,400
cipher text have a valid pad or not. In
other words, whether the last bites in the

50
00:03:31,400 --> 00:03:36,564
decrypted cipher text are end with one. Or
2-2, or 3-3-3, or 4-4-4-4, and so on. So

51
00:03:36,564 --> 00:03:42,415
the adversary learns something about the
decrypted cipher text, just by submitting

52
00:03:42,415 --> 00:03:48,124
the cipher text to the server. So this is
a beautiful example of what's called a

53
00:03:48,124 --> 00:03:52,564
chosen cipher text attack. Where again,
the address that you submit the cipher

54
00:03:52,564 --> 00:03:56,617
text and then he gets to learn something
about the resulting plain text. And now

55
00:03:56,617 --> 00:04:00,772
the question is whether he can use that
information to completely decrypt a given

56
00:04:00,772 --> 00:04:04,876
cipher text. And I want to show you that a
padding oracle can actually be used to

57
00:04:04,876 --> 00:04:08,829
completely decrypt a given cipher text.
But before I say that, I want to remind

58
00:04:08,829 --> 00:04:13,295
you that older versions of TLS. Actually
leaked the type of error simply in the

59
00:04:13,295 --> 00:04:18,021
alert message that was sent back to the
peer. Different types of alerts were sent

60
00:04:18,021 --> 00:04:22,380
depending on which type of error occurred.
As soon as this attack came out, SSL

61
00:04:22,380 --> 00:04:27,131
implementations simply always reported the
same type of error, so just looking at the

62
00:04:27,131 --> 00:04:31,546
alert type wouldn't tell the adversary
which error occurred. Nevertheless, there

63
00:04:31,546 --> 00:04:35,849
was still a padding oracle. So let me
explain why. So this was observed by Canvel

64
00:04:35,849 --> 00:04:40,487
et. al. Canvel et. al. realized that
the way TLS decryption is implemented is

65
00:04:40,487 --> 00:04:44,902
first of all, the record is decrypted,
then the pad is checked, and if the pad is

66
00:04:44,902 --> 00:04:49,150
invalid, decryption is aborted and an
error is generated. If the pad is valid.

67
00:04:49,150 --> 00:04:53,792
Then the Mac is checked. And then if the
Mac is invalid, decryption is aborted, and

68
00:04:53,792 --> 00:04:58,321
an error is generated. As a result, this
causes a timing attack. You realize that

69
00:04:58,321 --> 00:05:03,021
if pad is invalid, then the alert message
is sent very quickly. And you notice here,

70
00:05:03,021 --> 00:05:07,435
that, in fact, you see that, within 21
milliseconds, the cipher text is rejected.

71
00:05:07,435 --> 00:05:11,686
However, if the pad is valid. Then now the
math needs to be checked, and when it's

72
00:05:11,686 --> 00:05:15,553
discovered to be invalid, the alert is
only generated at that point. In other

73
00:05:15,553 --> 00:05:19,726
words, then in that case it takes a little
bit longer until the alert is generated,

74
00:05:19,726 --> 00:05:23,797
and you see that on average this takes
about 23 milliseconds. So even though the

75
00:05:23,797 --> 00:05:28,114
same alert is sent back to the peer. The
adversary can simply observe the time

76
00:05:28,114 --> 00:05:32,787
until the alert message is generated. If
the time is short, it knows the pad was

77
00:05:32,787 --> 00:05:37,460
invalid. If the time is long, it knows the
pad was valid, but the Mac was invalid.

78
00:05:37,460 --> 00:05:42,232
And as a result the adversary still has a
padding oracle that can tell it whether

79
00:05:42,232 --> 00:05:46,463
the pad was valid or invalid. So now let's
see how to use a padding oracle. So I

80
00:05:46,463 --> 00:05:50,583
claim that if the attacker has a certain
cipher text C, he can completely decrypt

81
00:05:50,583 --> 00:05:54,449
the cipher text just using the padding
oracle. So let's see how to do it. And

82
00:05:54,449 --> 00:05:58,518
just as an example, suppose he wants to
obtain M1, in other words, a decryption of

83
00:05:58,518 --> 00:06:02,485
the second block of the cipher text. So
let's see what he would use. So here we

84
00:06:02,485 --> 00:06:06,649
have the cipher text that the attacker
intercepted. And this just happens to be

85
00:06:06,649 --> 00:06:11,133
the decryption of that cipher text. And
the reason I wrote this down is I wanted

86
00:06:11,133 --> 00:06:15,841
you to remember how CBC decryption works.
So you should keep in mind that one cipher

87
00:06:15,841 --> 00:06:20,269
text block is directly [inaudible] into
the decryption of the next cipher text

88
00:06:20,269 --> 00:06:24,753
block. Okay, so the adversary here wants
to basically learn just this part of the

89
00:06:24,753 --> 00:06:29,946
plain text. So, here's what he's gonna do.
So first of all he's going to throw away

90
00:06:30,164 --> 00:06:36,044
C2 so that, that last block really is just
C1, which is the one he's interested in

91
00:06:36,044 --> 00:06:41,852
decrypting. Now let's suppose that he has
a certain guess, G, for the last byte of

92
00:06:41,852 --> 00:06:47,442
M1, in other words, he just has a guess
for this very, very, very last byte. G is

93
00:06:47,442 --> 00:06:53,250
a value between zero and 255. What the
attacker will do is the following, he will

94
00:06:53,250 --> 00:06:59,091
XOR the value G XOR 01 into the last byte
of the block C0, the previous block. Yes

95
00:06:59,091 --> 00:07:04,435
so all he did is he took the last byte of
the previous block and [foreign] that with

96
00:07:04,435 --> 00:07:09,590
his guest [foreign] 01. Now lets think for
just a second and see what happens when

97
00:07:09,590 --> 00:07:14,808
this two block cipher text is decrypted.
Well C0 is gonna get decrypted to whatever

98
00:07:14,808 --> 00:07:20,088
its decrypted to that's just gonna be some
garbage that we don't care about but, now

99
00:07:20,088 --> 00:07:25,055
when C1 is decrypted the last byte is
gonna be [foreign] with this modified C0,

100
00:07:25,055 --> 00:07:30,663
and the result the last byte of the plain
text. Is gonna be also XORed with this

101
00:07:30,663 --> 00:07:37,257
extra value that we stuck into C zero. So
what goes in here is the actual original

102
00:07:37,257 --> 00:07:44,198
last byte in the plain text M1. But now it
gets XORed with G XOR zero X zero one. So

103
00:07:44,198 --> 00:07:49,233
now you see where I'm going with this. If
the guess G for the last byte of M1 is

104
00:07:49,233 --> 00:07:54,332
correct, then these two guys will cancel
one another. Last byte XOR G is just zero.

105
00:07:54,332 --> 00:07:59,556
And what we'll get is the last byte of the
plaintext is just 0x01. I should mention,

106
00:07:59,556 --> 00:08:04,528
by the way, 0x01 just means hex notation
for 01. So literally this is just a one

107
00:08:04,528 --> 00:08:09,371
byte representation of the number one.
Good. So, again, what this means, is if

108
00:08:09,371 --> 00:08:14,478
our guess for the last byte of M1 is
correct, then we get a pad that's well

109
00:08:14,478 --> 00:08:19,925
formed. It's just a number one. The number
one is a well formed pad, and therefore,

110
00:08:19,925 --> 00:08:25,448
the pad is valid. And the padding oracle
will say the pad is valid. If the guess is

111
00:08:25,448 --> 00:08:30,657
incorrect then we'll get a value here
that's not equal to one and then it's very

112
00:08:30,657 --> 00:08:35,995
likely that we have an invalid pad. And as
a result the padding worker will say the

113
00:08:35,995 --> 00:08:40,543
pad is invalid. So again you see that if
our guess for the last byte of M1 is

114
00:08:40,543 --> 00:08:44,936
correct, we learn that G was in fact a
correct guess. Whereas if our guess is

115
00:08:44,936 --> 00:08:49,429
incorrect, then we learn that G is an
incorrect guess. So what the attacker is

116
00:08:49,429 --> 00:08:54,311
gonna do is he's gonna create his modified
cipher text. You notice he only modifies

117
00:08:54,311 --> 00:08:59,253
the second block of the cipher text. We're
gonna send this to the padding oracle and

118
00:08:59,253 --> 00:09:04,136
then based on the results of the padding
oracle, we learn whether the last byte is

119
00:09:04,136 --> 00:09:08,900
equal to G or not. Well, now we can simply
repeat this again and again for G from

120
00:09:08,900 --> 00:09:13,539
zero to 255. This basically requires 256
chosen cipher text queries. Actually, I

121
00:09:13,539 --> 00:09:18,954
guess on average we'll only have to do 128
chosen ciphers and squares until we find

122
00:09:18,954 --> 00:09:23,828
the right G. Then, we learn the last byte
of M1. Well, so now we know the last byte

123
00:09:23,828 --> 00:09:28,320
of M1. I claim that we can now use the
exact same process to learn the second to

124
00:09:28,320 --> 00:09:32,811
last byte of M1. Let me ask you, what pad
are we gonna use to learn the second to

125
00:09:32,811 --> 00:09:37,515
last byte of M1? Well, it shouldn't be
surprising that, instead of just using the

126
00:09:37,515 --> 00:09:42,348
pad containing the byte one, we're gonna
use a two byte pad containing the bytes

127
00:09:42,348 --> 00:09:47,655
2-2. That's a well formed pad. And now we
can always make sure because we know the

128
00:09:47,655 --> 00:09:53,399
last byte of m1, when we do our XORing trick
we can always make sure that the last byte

129
00:09:53,399 --> 00:09:59,280
of the plain text is in fact 02 and now we
can guess the second to last byte of m2 by

130
00:09:59,280 --> 00:10:04,887
simply trying lots of values in g until we
find one that makes the pad, in fact, be

131
00:10:04,887 --> 00:10:10,153
0202. And by issuing 256 additional
queries to the padding oracle we will get

132
00:10:10,153 --> 00:10:15,364
to learn the second to last byte of m1.
And now we can iterate this again and

133
00:10:15,364 --> 00:10:21,088
again, and basically since the length of
the block is sixteen bytes after sixteen

134
00:10:21,088 --> 00:10:28,475
times 256 queries. We get to learn all of
them one. So this is a pretty significant

135
00:10:28,475 --> 00:10:33,441
attack that is able to decrypt blocks of
the TLS record. So those of you who know

136
00:10:33,441 --> 00:10:37,766
the inner workings of TLS should complain
that this attack isn't gonna work. The

137
00:10:37,766 --> 00:10:42,361
problem is that when TLS receives a record
with a bad pad or a bad Mac, it shuts down

138
00:10:42,361 --> 00:10:46,362
the connection, and renegotiates a new
key. As a result, the attacker is now

139
00:10:46,362 --> 00:10:50,849
stuck with a cipher text encrypted using
an old key. And that key is no longer used

140
00:10:50,849 --> 00:10:54,904
anywhere, so it cannot submit any more
queries. So with TLS, basically, it can

141
00:10:54,904 --> 00:10:59,229
only submit one query, and that's it. Even
a single query still leaks information

142
00:10:59,229 --> 00:11:03,851
about the plain text to the attacker. But
it doesn't expose the entire plain text

143
00:11:03,851 --> 00:11:08,795
block m1. However this attack is so acute
that whenever there's a mistake like this

144
00:11:08,795 --> 00:11:13,798
in a protocol there will be some settings
in which it comes up and in this case the

145
00:11:13,798 --> 00:11:18,743
setting is in the case of an imap server.
So imap is a popular protocol for reading

146
00:11:18,743 --> 00:11:23,627
email from an imap email server, and it's
very common to protect the imap protocol

147
00:11:23,627 --> 00:11:28,090
by running it on top of a tls protocol.
Now, it turns out an imap. Every five

148
00:11:28,090 --> 00:11:32,943
minutes, the IMap client will connect to
the IMap server, and check whether there's

149
00:11:32,943 --> 00:11:37,559
new email. And the way it does it is by
first logging in to the IMap server, by

150
00:11:37,559 --> 00:11:42,175
sending this login username password
message. And then it goes ahead and check

151
00:11:42,175 --> 00:11:47,242
if there's new email available. Well, what
this means is that every five minutes, the

152
00:11:47,242 --> 00:11:52,278
attacker gets an encryption of exactly the
same message in particular, I guess, an

153
00:11:52,278 --> 00:11:57,189
encryption of the password. And so every
five minutes, it can mount one guess on

154
00:11:57,189 --> 00:12:02,243
the block that contains the password. And
so, if your password is eight characters

155
00:12:02,243 --> 00:12:07,249
long, the attacker simply needs to recover
those eight characters. And he's gonna

156
00:12:07,249 --> 00:12:12,130
recover them one byte at, at a time, by
doing one guess per five minutes. And so

157
00:12:12,130 --> 00:12:16,698
Canvel et. al. showed that, within a few
hours, you can basically recover the

158
00:12:16,698 --> 00:12:21,186
user's password. Just by mounting one
guest every five minutes. So this is a

159
00:12:21,186 --> 00:12:25,617
pretty significant attack against an
implementation of TLS and the defense

160
00:12:25,617 --> 00:12:30,404
against this was to always check the Mac,
whether the pad is valid or invalid. And

161
00:12:30,404 --> 00:12:35,190
as a result it takes the same amount of
time to respond whether the pad is valid

162
00:12:35,190 --> 00:12:39,858
or invalid. So this removes the timing
attack and makes this attack much harder

163
00:12:39,858 --> 00:12:44,511
to mount. So there are two lessons here.
First of all, you notice that if TLS had

164
00:12:44,511 --> 00:12:49,163
used encrypt then MAC, rather than MAC
then encrypt, then this whole issue would

165
00:12:49,163 --> 00:12:53,814
be completely moot, because if I encrypt
then MAC then MAC is checked first, and

166
00:12:53,814 --> 00:12:58,407
only then does decryption and pad-checking
take place. In encrypt then MAC, the

167
00:12:58,407 --> 00:13:03,294
cipher-text is discarded because the MAC
is invalid and we never even get to a pad

168
00:13:03,294 --> 00:13:08,004
check. As a result, any tampering or gain
is with a cipher-text will be discarded

169
00:13:08,004 --> 00:13:12,497
immediately because the MAC is simply
gonna fail. And second lesson to remember

170
00:13:12,497 --> 00:13:16,676
is that remember I told you that MAC10CBC
actually does provide authenticated

171
00:13:16,676 --> 00:13:21,016
encryption but only if you don't reveal
why the cryption failed. In this case the

172
00:13:21,016 --> 00:13:25,087
padding wall [inaudible] completely
destroyed the authenticating encryption

173
00:13:25,087 --> 00:13:29,427
property and basically I showed you an
attack this shows that now this mode does

174
00:13:29,427 --> 00:13:34,121
not provide authenticated encryption. So
let me ask you the following question.

175
00:13:34,121 --> 00:13:39,016
Supposing TLS instead of using MAC then
CBC, TLS did MAC then counter mode

176
00:13:39,016 --> 00:13:43,794
encryption. Would the padding oracle
attack still be possible or not? The

177
00:13:43,794 --> 00:13:48,029
answer is it wouldn?t be possible, simply
because counter-mode doesn't use any

178
00:13:48,029 --> 00:13:52,263
padding at all. So this padding oracle
attack only effects CBC encryption modes

179
00:13:52,263 --> 00:13:56,391
in TLS. Tls also supports counter-mode
encryption, and counter-mode encryption

180
00:13:56,391 --> 00:14:00,733
modes are simply not affected by these
padding attacks. So that's the end of this

181
00:14:00,733 --> 00:14:04,807
segment. In the next segment I want to
show you another very, very clever attack on

182
00:14:04,807 --> 00:14:06,576
authenticated encryption systems.
