1
00:00:00,000 --> 00:00:03,410
Now that we're done with message
integrity, we're gonna back and talk about

2
00:00:03,410 --> 00:00:07,092
encryption, and we're gonna show how to
construct encryption schemes that provide

3
00:00:07,092 --> 00:00:10,916
much stronger security guarantees than
what we had before. But first let's do a

4
00:00:10,916 --> 00:00:15,323
recap of where we are. So in previous
segments, we talked about confidentiality,

5
00:00:15,323 --> 00:00:20,125
in particular how to encrypt messages such
that we achieve semantic security against

6
00:00:20,125 --> 00:00:24,814
what's called a chosen plaintext attack.
Now I kept mentioning again and again that

7
00:00:24,814 --> 00:00:28,938
security against chosen plaintext attacks
only provides security against

8
00:00:28,938 --> 00:00:33,571
eavesdropping. In other words, this only
provides security against adversaries that

9
00:00:33,571 --> 00:00:37,638
listen to network traffic. But don't
actually change any packets, or don't

10
00:00:37,638 --> 00:00:41,729
inject their own packets, and so on. In
this module, our goal is actually to

11
00:00:41,729 --> 00:00:46,318
design encryption schemes that are secure
against adversaries that can tamper with

12
00:00:46,318 --> 00:00:50,641
traffic by blocking certain packets, and
injecting other packets and so on. And

13
00:00:50,641 --> 00:00:55,322
then we also looked at how to provide
message integrity where the message itself

14
00:00:55,322 --> 00:00:59,889
is not confidential. We just want to make
sure that the message is not modified

15
00:00:59,889 --> 00:01:04,223
while it's en route. And so we talked
about message authentication codes, MAC

16
00:01:04,223 --> 00:01:08,616
algorithms that provide existential
unforgeability against a chosen message

17
00:01:08,616 --> 00:01:13,067
attack. In other words, even though the
attacker is able to obtain the MACs on

18
00:01:13,067 --> 00:01:17,926
arbitrary messages of his choice, he can't
build MACs for any other messages. And we

19
00:01:17,926 --> 00:01:23,593
looked at a number of MAC constructions,
in particular CBC MAC, HMAC, a Parallel mac

20
00:01:23,593 --> 00:01:28,050
construction. And a fast MAC construction
called a Carter-Wegman MAC. In this

21
00:01:28,050 --> 00:01:32,420
module, we're going to show how to combine
these confidentiality and integrity

22
00:01:32,420 --> 00:01:36,679
mechanisms to obtain encryption schemes
that are secure against a much, much

23
00:01:36,679 --> 00:01:41,386
stronger adversary, namely an adversary that
can tamper with traffic while it's in the

24
00:01:41,386 --> 00:01:45,644
network, inject its own packets, block
certain packets, and so on. And our goal

25
00:01:45,644 --> 00:01:50,015
is basically to insure that even against
such powerful adversaries, we maintain

26
00:01:50,015 --> 00:01:54,274
confidentiality. In other words, the
adversary can't learn what the plain text

27
00:01:54,274 --> 00:01:58,759
is and the adversary can't even modify the
cipher text. And cause the recipient to

28
00:01:58,759 --> 00:02:03,518
think a different plain text was actually
sent. So before we do that I want to give

29
00:02:03,518 --> 00:02:08,387
you a few examples of adversaries that can
tamper with traffic. And as a result

30
00:02:08,387 --> 00:02:12,974
completely break security of CPA secure
encryption. This will show you that,

31
00:02:12,974 --> 00:02:17,789
actually, with that providing integrity,
confidentiality can also be destroyed. In

32
00:02:17,789 --> 00:02:22,363
other words, the two must go together,
integrity and confidentiality, if we're

33
00:02:22,363 --> 00:02:27,238
going to achieve security against active
adversaries. So let's look at an example

34
00:02:27,238 --> 00:02:31,581
from the word of networking. In
particular, let's look at TCP/IP. I'm gonna

35
00:02:31,581 --> 00:02:36,776
use a highly simplified version of TCP/IP
just so we can quickly focus on the attack

36
00:02:36,776 --> 00:02:41,738
and not get bogged down by the details. So
here we have two machines communicating

37
00:02:41,738 --> 00:02:45,995
with one another. A user sits at one
machine, and the other machine is a

38
00:02:45,995 --> 00:02:50,732
server. Now, the server, of course, has a
TCP/IP stack that's receiving packets. And

39
00:02:50,732 --> 00:02:55,529
then, based on the destination field in
those packets, it forwards the packets to

40
00:02:55,529 --> 00:03:00,146
the appropriate place. So here we have,
for example, two processes listening to

41
00:03:00,146 --> 00:03:04,523
these packets. A web server, say, over
here, and another user, we'll call him

42
00:03:04,523 --> 00:03:09,260
Bob, over here. The web server listens on
port 80, and here, this user Bob, listens

43
00:03:09,260 --> 00:03:13,972
on port 25. Now, when a packet comes in,
the TCP/IP stack looks at the destination

44
00:03:13,972 --> 00:03:18,323
port. In this case, it would be
destination 80, and as a result, the stack

45
00:03:18,323 --> 00:03:22,972
forwards the packets over to the web
server. If the destination port said port

46
00:03:22,972 --> 00:03:27,443
25, the TCP/IP stack would forward the
packet over to Bob, who's listening on

47
00:03:27,443 --> 00:03:32,469
port 25. Now, a fairly well known security
protocol called IPsec, encrypts these IP

48
00:03:32,469 --> 00:03:36,957
packets between the sender and the
recipient. So here, the sender and the

49
00:03:36,957 --> 00:03:41,694
recipients basically have a shared key.
And when the sender sends IP packets,

50
00:03:41,694 --> 00:03:46,687
those IP packets are encrypted using the
secret key K. Now when a packet arrives at

51
00:03:46,687 --> 00:03:51,344
the destination, and I mean it arrives at
the server, the TCP/IP stack will go ahead

52
00:03:51,344 --> 00:03:55,832
and decrypt the packet, and then look at
the destination port and send it to the

53
00:03:55,832 --> 00:04:00,153
appropriate place decrypted. You notice
the data here is decrypted. So in this

54
00:04:00,153 --> 00:04:04,585
case it would send it to the webserver
because the destination port is port 80.

55
00:04:04,585 --> 00:04:09,074
If the destination port happens to be port
25, the TCP/IP stack will decrypt the

56
00:04:09,074 --> 00:04:13,675
packet, look at the destination port, and
send the data in the clear to the process

57
00:04:13,675 --> 00:04:18,536
who's listening on port 25. So now I wanna
show you that without integrity, in this

58
00:04:18,536 --> 00:04:23,463
setup, we can't possibly achieve any form
of confidentiality and let's see why. So

59
00:04:23,463 --> 00:04:28,574
imagine the attacker intercepts a certain
packet that's intended for the web server.

60
00:04:28,574 --> 00:04:33,380
In other words, it's an encrypted packet
intended for port 80. Remember that the

61
00:04:33,380 --> 00:04:38,003
attacker can actually receive the
decryption of any packets that's intended

62
00:04:38,003 --> 00:04:42,809
for port 25 because the TCP stack will
happily decrypt packets for port 25 and

63
00:04:42,809 --> 00:04:47,872
send them over to Bob who's listening over
here. So what Bob is going to do, Bob here

64
00:04:47,872 --> 00:04:52,754
is the attacker, what he's going to do is
he's gonna intercept this packet en route,

65
00:04:52,754 --> 00:04:57,278
prevent the packet from reaching the
server as is, and instead, he's going to

66
00:04:57,278 --> 00:05:02,099
modify the packet. So now the destination
port is going to read like port 25. This

67
00:05:02,099 --> 00:05:06,980
is done on the cipher text and we're going
to see how to do that in just a minute.

68
00:05:06,980 --> 00:05:11,504
When this packet now arrives at the
server, the destination port says 25, the

69
00:05:11,504 --> 00:05:16,445
server will decrypt the packet, see that
the destination is 25 and forward the data

70
00:05:16,445 --> 00:05:21,261
over to Bob. So now Bob was simply by
changing the destination ports, Bob was

71
00:05:21,261 --> 00:05:26,388
able to read data that was not intended
for himself, but rather was intended for

72
00:05:26,388 --> 00:05:31,619
the web server. So, if the data is
encrypted using a CBC encryption with a

73
00:05:31,619 --> 00:05:37,067
random IV, remember this is a CPA secure
scheme. Never the less if that's the case,

74
00:05:37,067 --> 00:05:41,861
I'm gonna show you that it's trivial for
the attacker to change the decipher text.

75
00:05:41,861 --> 00:05:46,889
So that now he can obtain new cipher text
where the destination port is 25 instead

76
00:05:46,889 --> 00:05:51,054
of 80. The only thing that's gonna change
is just the IV field. In fact, everything

77
00:05:51,054 --> 00:05:55,725
else is gonna remain the same. So, let's
see how to do it. So here, just to remind

78
00:05:55,725 --> 00:06:00,870
yourself, that, in fact, what the attacker
captured is a CBC encrypted packet. Where

79
00:06:00,870 --> 00:06:05,020
he knows that the destination port is port
80, but he doesn't know what the data is.

80
00:06:05,020 --> 00:06:08,920
The attacker has no clue what the data is
but he does know that his packet is

81
00:06:08,920 --> 00:06:13,020
intended for the web server. His goal is
to build a new encrypted packet where now

82
00:06:13,020 --> 00:06:17,600
the destination port is port 25. So the
way he's gonna do is as we said is just by

83
00:06:17,600 --> 00:06:22,547
changing the IV, and let me remind you that
the way you decrypt CBC encrypted data is

84
00:06:22,547 --> 00:06:27,434
essentially the first plain text block is
simply decryption of the first cipher

85
00:06:27,434 --> 00:06:32,143
text block XORed with IV. And we
know that in the original packet this is

86
00:06:32,143 --> 00:06:36,732
gonna read dest equals 80. Cuz in the
original packet the destination port is

87
00:06:36,732 --> 00:06:41,619
port 80. So now my question to you is how
will the attacker have changed the IV so

88
00:06:41,619 --> 00:06:46,925
now the destination port will read dest
equals 25. So it's pretty easy to see that

89
00:06:46,925 --> 00:06:52,101
if the attacker simply takes the original
IV, XORs it with here, there are a bunch

90
00:06:52,101 --> 00:06:57,086
of zeros over here, and a bunch of zeros
over here. He's XORs it with the zeros,

91
00:06:57,086 --> 00:07:02,135
and then 80 XORs with zeros, and then 25,
in the appropriate place. Namely, in the

92
00:07:02,135 --> 00:07:07,186
port's bytes in the encrypted packets. Then
it's easy to see that when this new IV prime

93
00:07:07,186 --> 00:07:11,948
is sent along with the original
cipher text, when the attacker decrypts,

94
00:07:11,948 --> 00:07:17,076
you can see that the original cipher text
would decrypt to port 80, but now the new

95
00:07:17,076 --> 00:07:22,082
IV will cancel out this 80, this 80 here
cancels out the 80 that would be obtained

96
00:07:22,082 --> 00:07:26,661
in the original plain text and then by
XORing with 25, essentially the

97
00:07:26,661 --> 00:07:31,558
destination now becomes 25. So this is a
nice example, where with the simple change

98
00:07:31,558 --> 00:07:36,106
to the IV field, the attacker was able to
divert the packet. So that now, after

99
00:07:36,106 --> 00:07:40,182
decryption, the packet goes to the
attacker, instead of the actual web

100
00:07:40,182 --> 00:07:44,730
server. And as a result now the attacker
can read the plaintext data, that was

101
00:07:44,730 --> 00:07:49,396
intended for the server. So this nice
example shows that without integrity it's

102
00:07:49,396 --> 00:07:53,737
simply impossible for a CPA secure
encryption to provide confidentiality,

103
00:07:53,737 --> 00:07:58,378
when the attacker can modify packets
en route. CPA secure encryption only

104
00:07:58,378 --> 00:08:03,079
provides confidentiality if the attacker is
only eavesdropping on data, but can't

105
00:08:03,079 --> 00:08:07,445
actually modify a cipher text en route.
Where, as you see, if you can modify

106
00:08:07,445 --> 00:08:11,573
cipher text, a simple modification,
completely reveals the plaintext. I want

107
00:08:11,573 --> 00:08:16,065
to show you another tampering attack that
only requires network access to traffic.

108
00:08:16,065 --> 00:08:20,503
It doesn't actually require the attacker
to be present on the decryption machine.

109
00:08:20,503 --> 00:08:25,105
So let's look at an example where there's
a remote terminal application, where every

110
00:08:25,105 --> 00:08:29,707
time the user hits a keystroke, basically
an encrypted keystroke is sent over to the

111
00:08:29,707 --> 00:08:33,706
server, and let's pretend that the
encrypted keystroke is encrypted using

112
00:08:33,706 --> 00:08:38,342
counter mode. So here you have the
TCP/IP packet. D here corresponds to the

113
00:08:38,342 --> 00:08:43,269
one byte keystroke. And as we said, it's
encrypted using counter mode, and as you

114
00:08:43,269 --> 00:08:48,376
probably know every TCP/IP packet actually
contains a checksum. This is a sixteen bit

115
00:08:48,376 --> 00:08:52,943
checksum that's just used to detect
transmission errors. So, the server, if it

116
00:08:52,943 --> 00:08:57,630
receives a packet that has the wrong
checksum, it simply drops it on the floor

117
00:08:57,630 --> 00:09:02,076
and ignores it. Now the TCP header
including the checksum in the keystroke,

118
00:09:02,076 --> 00:09:06,206
all are encrypted using counter mode. Now
the attacker wants to learn what the

119
00:09:06,206 --> 00:09:09,973
keystroke was, and let me show you what he
can do. The attacker is gonna intercept

120
00:09:09,973 --> 00:09:13,739
this packet and he's not actually gonna
modify it, he's gonna send it over to the

121
00:09:13,739 --> 00:09:18,208
server. But he's gonna record the packet.
Later on he's gonna modify the packet and

122
00:09:18,208 --> 00:09:23,486
send a modified packet over to the server.
What he's going to do is he's gonna XOR

123
00:09:23,486 --> 00:09:28,205
the encrypted checksum field with a
value T and he's going to XOR the

124
00:09:28,205 --> 00:09:33,360
encrypted data field with a value S. And
he's going to do this for lots and lots of

125
00:09:33,360 --> 00:09:38,390
T and S. Now remember, a property
of counter mode is that if you XOR the

126
00:09:38,390 --> 00:09:43,538
cipher text with T after decryption, the
result in plain text is also XOR with T.

127
00:09:43,646 --> 00:09:49,020
Similarly, if You XOR the encrypted data with s after decryption.

128
00:09:49,020 --> 00:09:54,753
the resulting decrypted data will also be
encrypted with s. Now, the server's gonna

129
00:09:54,753 --> 00:09:59,456
decrypt this modified packet. And the
resulting packet is gonna have the

130
00:09:59,456 --> 00:10:03,527
check sum XORed with t, and the data XORed with s. Now what happens if the

131
00:10:03,527 --> 00:10:07,817
modified check sum is correct for this
modified packet, the server will send an

132
00:10:07,817 --> 00:10:12,107
ACK back. If the modified check sum
is incorrect for this modified packet, the

133
00:10:12,107 --> 00:10:16,374
server will just drop the packet on the
floor and do nothing. So the attacker can

134
00:10:16,374 --> 00:10:20,937
simply observe, look for an ACK packet or
not, and in doing so, he learns whether

135
00:10:20,937 --> 00:10:25,499
this particular XOR of T and XOR of S
pairs corresponds to a valid checksum or not.

136
00:10:25,499 --> 00:10:30,061
Now the attacker's going to do
this for lots and lots of T's and S's.

137
00:10:30,061 --> 00:10:34,508
And you notice what he learns is if I
modify the data by XORing it with this

138
00:10:34,508 --> 00:10:38,897
particular value S, that changes the
checksum by a particular value T. And

139
00:10:38,897 --> 00:10:43,401
he learns this for lots and lots of T and
S pairs. So it turns out for certain

140
00:10:43,401 --> 00:10:47,912
checksums, by looking at a sequence of
equations of this type. You can actually

141
00:10:47,912 --> 00:10:52,122
figure out what the value D is. I should
point out that for the TCP checksums on this,

142
00:10:52,122 --> 00:10:55,818
actually, might not be true, But
certainly, they're easy checksums for

143
00:10:55,818 --> 00:11:00,376
which this is actually absolutely true. So
again by looking at a lot of equations of

144
00:11:00,376 --> 00:11:04,977
this type the attacker can recover D. And
this is a really nice example of what's

145
00:11:04,977 --> 00:11:09,521
called a chosen cipher text attack. The
attacker basically submitted cipher text

146
00:11:09,521 --> 00:11:14,236
of his choice that was derived from that
cipher text that he wanted to decrypt. And

147
00:11:14,236 --> 00:11:18,497
then by looking at how the server
responded he was able to learn something

148
00:11:18,497 --> 00:11:23,041
about the resulting plaint text. And by
repeating this for many different values

149
00:11:23,041 --> 00:11:27,699
of T and S he was actually eventually able to
recover what the actual full plain text is.

150
00:11:27,699 --> 00:11:32,186
So in this segment we are gonna look
at many more examples of attacks of this

151
00:11:32,186 --> 00:11:36,225
type. These are called active attacks,
where the attackers actually modify

152
00:11:36,225 --> 00:11:40,707
traffic in route. And I hope that these
two simple example convinces you that all

153
00:11:40,707 --> 00:11:45,079
you provide is CPA security other words
security against eavesdropping. You can't

154
00:11:45,079 --> 00:11:49,561
even guarantee secrecy against an active
attacker. Not only does your cipher text

155
00:11:49,561 --> 00:11:53,545
not have integrity, in other words the
recipients might obtain a message

156
00:11:53,545 --> 00:11:58,275
different from the one sent by the sender.
But you don't even have confidentiality.

157
00:11:58,275 --> 00:12:03,146
And I showed you two examples where
without integrity the attacker can simply

158
00:12:03,146 --> 00:12:08,198
decrypt the packet by using the recipient
as an oracle for decrypting certain parts

159
00:12:08,198 --> 00:12:12,611
of the data. And so the lesson that I'm
gonna repeat again and again and again

160
00:12:12,611 --> 00:12:16,526
throughout this module is that if your
message needs integrity but no

161
00:12:16,526 --> 00:12:20,508
confidentiality, just use a MAC. But if
your message needs integrity and

162
00:12:20,508 --> 00:12:24,950
confidentiality, you have to use what's
called an authenticated encryption mode,

163
00:12:24,950 --> 00:12:29,278
which is precisely the topic of this
module. So the next thing we're gonna do

164
00:12:29,278 --> 00:12:33,888
is define what authenticated encryption
means. And we're gonna build authenticated

165
00:12:33,888 --> 00:12:38,442
encryption systems. But the point I want
you to remember is that the CPA security

166
00:12:38,442 --> 00:12:42,658
modes we discussed before should never
actually be used to encrypt data by

167
00:12:42,658 --> 00:12:46,987
themselves. So CBC with a random IV is a
building block towards authenticated

168
00:12:46,987 --> 00:12:51,212
encryption, but should never be used on
its own. Okay. So we're gonna define

169
00:12:51,212 --> 00:12:53,851
authenticated encryption in the next
segment.
