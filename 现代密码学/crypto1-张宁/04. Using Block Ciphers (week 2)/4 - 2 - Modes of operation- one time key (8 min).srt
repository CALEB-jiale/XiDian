1
00:00:00,000 --> 00:00:03,831
So as our first example lets look at a
very simple way of using a block cipher

2
00:00:03,831 --> 00:00:07,905
for encryption. In particular we'll see
how to use a block cipher with a one time

3
00:00:07,905 --> 00:00:12,108
key. So in this segment we're just gonna
use the block cipher to encrypt using keys

4
00:00:12,108 --> 00:00:15,907
that are used one time. In other words,
all the adversary gets to see is one ciphertext,

5
00:00:15,907 --> 00:00:19,600
and its goal is to break semantic
security of that ciphertext. Now, in the

6
00:00:19,600 --> 00:00:23,339
next segment, we're going to turn into
more, interesting applications of block

7
00:00:23,339 --> 00:00:26,939
ciphers and we're going to see how to
encrypt using keys that are used many,

8
00:00:26,939 --> 00:00:30,538
many times to encrypt many messages. So
before we start, I want to mention that

9
00:00:30,538 --> 00:00:34,464
there's like a classic mistake in using a
block cipher. Unfortunately, there are some

10
00:00:34,464 --> 00:00:38,251
products that actually work this way, and
they are badly broken, so I want to make

11
00:00:38,251 --> 00:00:42,130
sure that none of you guys actually make
this mistake. So this mode of operation is

12
00:00:42,130 --> 00:00:46,003
called an electronic code book. And it
works as follows: it's the first thing

13
00:00:48,211 --> 00:00:50,420
that comes to mind when you want to use a
block cipher for encryption. What we do is

14
00:00:50,420 --> 00:00:54,568
we take our message, we break it into
blocks, each block as big as the block's

15
00:00:54,568 --> 00:00:58,931
cipher block. So in the case of AES, we
would be breaking our message into sixteen

16
00:00:58,931 --> 00:01:03,099
byte blocks. And then we encrypt each
block separately. So this mode is often

17
00:01:03,099 --> 00:01:06,993
called electronic codebook. And,
unfortunately, it's terribly insecure

18
00:01:06,993 --> 00:01:11,460
because you realize if two blocks are
equal, for example here, these two blocks

19
00:01:11,460 --> 00:01:16,099
happen to be equal, then necessarily the
resulting ciphertext is also going to be equal.

20
00:01:16,099 --> 00:01:20,279
So an attacker who looks at the
ciphertext, even though he might not know

21
00:01:20,279 --> 00:01:24,590
what's actually written in these blocks,
we'll know that these two blocks are

22
00:01:24,590 --> 00:01:28,523
equal. And as a result, he learned
something about the plaintext that he

23
00:01:28,523 --> 00:01:33,002
shouldn't have learned. And if this isn't
clear enough for you abstractly, the best

24
00:01:33,002 --> 00:01:37,590
to explain this is using a picture. And so
here's this guy here that, you know, has

25
00:01:37,590 --> 00:01:42,361
this really dark black hair. And when we
encrypt. This image, this bitmap image

26
00:01:42,361 --> 00:01:47,056
using the electronic code book mode. You
see that his hair, that contains lots of

27
00:01:47,056 --> 00:01:50,932
ones. Basically always gets encrypted the
same way, so that his silhouette,

28
00:01:50,932 --> 00:01:54,935
actually, is completely visible, even in
the encrypted data. Okay, so this is a

29
00:01:54,935 --> 00:01:59,149
nice example of how the electronic code
book mode can actually leak information

30
00:01:59,149 --> 00:02:03,311
about the plaintext that could tell
something to the attacker. So the question

31
00:02:03,311 --> 00:02:07,367
is, how to correctly use block ciphers to
encrypt long messages. And so, I just

32
00:02:07,367 --> 00:02:11,159
want to briefly remind you of the notion
we're trying to achieve, which is

33
00:02:11,159 --> 00:02:15,268
basically semantic security using a one
time key. So the adversary outputs two

34
00:02:15,268 --> 00:02:18,969
messages, m0 and m1, and then he gets
either the encryption of m0 or the

35
00:02:18,969 --> 00:02:22,777
encryption of m1, these are two different
experiments. And then our goal is to say

36
00:02:22,777 --> 00:02:26,256
that the adversary can't distinguish
between these two experiments. So you

37
00:02:26,256 --> 00:02:30,283
can't distinguish the encryption of m0
from the encryption of m1. And the reason

38
00:02:30,283 --> 00:02:34,619
we call this security for a one time key
is that the key is only used to encrypt a

39
00:02:34,619 --> 00:02:38,485
single message. And as a result, the
adversary will ever only see one ciphertext

40
00:02:38,485 --> 00:02:42,716
encrypted using this key. Okay, so
the first thing we want to show is that in

41
00:02:42,716 --> 00:02:46,269
fact the mode we just looked at,
electronic code book, in fact, is not

42
00:02:46,269 --> 00:02:50,500
semantically secure. And this is true as
long as you're encrypting more than one

43
00:02:50,500 --> 00:02:54,575
block. So here's an example. Suppose we
encrypt two blocks using a block cipher.

44
00:02:54,575 --> 00:02:58,702
Let me show you that in fact electronic
code book will not be secure. So here's

45
00:02:58,702 --> 00:03:03,525
what we would do. So we're the adversary.
So we would output two messages, m0 and

46
00:03:03,525 --> 00:03:07,806
m1, where, in one message, the blocks are
distinct, and in the other message, the

47
00:03:07,806 --> 00:03:12,203
blocks are the same. The two blocks are
equal to one another. Well, so what is the

48
00:03:12,203 --> 00:03:16,270
challenger gonna do? The challenger's
going to encrypt either m0 or m1.

49
00:03:16,270 --> 00:03:20,228
Either way we are gonna get two blocks
back. So the ciphertext actually contains two

50
00:03:20,228 --> 00:03:23,886
blocks. The first block is going to be an
encryption of the word "Hello" and the

51
00:03:23,886 --> 00:03:27,695
second block is gonna be either an
encryption of the word "Hello" or the word

52
00:03:27,695 --> 00:03:31,854
"World". And if the two ciphertext blocks
are the same then the adversary knows that

53
00:03:31,854 --> 00:03:35,963
he received an encryption of the message
"Hello Hello" and as a difference he knows

54
00:03:35,963 --> 00:03:39,851
that he received encryption of the
message "Hello World". Okay? So, he just

55
00:03:39,851 --> 00:03:44,311
follows a simple strategy here. And if you
think about it for a second, you'll see

56
00:03:44,311 --> 00:03:48,300
what his advantage is. So, what is the
advantage? Well, this adversary when he

57
00:03:48,300 --> 00:03:52,003
received an encryption of the message
m1 he will always output 0.

58
00:03:52,003 --> 00:03:55,573
and when he receives an encryption of
the message m0 it will always output 1.

59
00:03:55,573 --> 00:03:58,603
And because of that the advantage,
basically, is 1, which means that the

60
00:03:58,603 --> 00:04:02,492
scheme is not secure, which again shows you
the electronic code book is not

61
00:04:02,492 --> 00:04:07,195
semantically secure and should never ever
be used to encrypt messages that are more

62
00:04:07,195 --> 00:04:12,293
than one block long. So, what should we
do? Well, so here's a simple example. What

63
00:04:12,293 --> 00:04:15,813
we could do is we could use what's called
a deterministic counter mode. So in a

64
00:04:15,813 --> 00:04:19,287
deterministic counter mode, basically we
build a stream cipher out of the block

65
00:04:19,287 --> 00:04:24,608
cipher. So suppose we have a PRF, F. So
again you should think of AES when I say

66
00:04:24,608 --> 00:04:29,143
that. So AES is also a secure PRF. And
what we'll do is, basically, we'll evaluate

67
00:04:29,143 --> 00:04:35,539
AES at the point zero, at the point one,
at the point two, up to the point L. This

68
00:04:35,539 --> 00:04:40,766
will generate a pseudo random pad. And I
will XOR that with all the message

69
00:04:40,766 --> 00:04:45,102
blocks and recover the ciphertext as a
result. Okay, so really this is just a

70
00:04:45,102 --> 00:04:49,561
stream cipher that's built out of a PRF,
like AES and triple DES, and it's a simple

71
00:04:49,561 --> 00:04:53,630
way to do encryption. I wanted to just
very quickly show you the security

72
00:04:53,630 --> 00:04:58,368
theorem. In fact, we've already seen the
security theorem when it applied to stream

73
00:04:58,368 --> 00:05:02,939
ciphers using pseudo-random generators, so
I'm not going to repeat this again. I'll

74
00:05:02,939 --> 00:05:07,343
just remind you that essentially for every
adversary A that's trying to attack

75
00:05:07,343 --> 00:05:11,746
deterministic counter mode, we prove that
there's an adversary B that's trying to

76
00:05:11,913 --> 00:05:16,510
attack the PRF. And since this quantity is
negligible, because the PRF is secure, we

77
00:05:16,510 --> 00:05:20,720
obtain that this quantity is negligible.
And therefore, the adversary has

78
00:05:20,720 --> 00:05:24,818
negligible advantage in defeating
deterministic counter mode. And the

79
00:05:24,818 --> 00:05:29,028
proof in pictures is a really simple
proof. So I'll just show it to you one

80
00:05:29,028 --> 00:05:33,013
more time for completeness. So basically,
what we want to show is, when the

81
00:05:33,013 --> 00:05:37,448
adversary's given the encryption of the
message m0, here, this is the encryption

82
00:05:37,448 --> 00:05:41,602
of the message, m0. m0 XOR counter
applied to the PRF, versus in giving the

83
00:05:41,602 --> 00:05:45,680
encryption of the message, m1. We wanna
argue these two distributions are

84
00:05:45,680 --> 00:05:50,183
computationally indistinguishable. So the
way we do that is basically we say, well

85
00:05:50,183 --> 00:05:54,734
the top distribution, if instead of a PRF,
we use a truly random function, namely

86
00:05:54,734 --> 00:05:59,362
here f is a truly random function, then
the adversary, because of the property of

87
00:05:59,362 --> 00:06:03,931
the PRF, the adversary cannot distinguish
these two experiments, right. A PRF is

88
00:06:03,931 --> 00:06:08,617
indistinguishable from a truly random
function, therefore when we replace the PRF

89
00:06:08,617 --> 00:06:13,244
on the left with a truly random function
on the right, the adversary is going to

90
00:06:13,244 --> 00:06:17,601
behave the same. Basically you can't
distinguish these two distributions. But

91
00:06:17,601 --> 00:06:22,067
now because F is a truly random function,
the pad here is a truly one time pad, and

92
00:06:22,067 --> 00:06:26,642
therefore no adversary can distinguish an
encryption of m0 from an encryption of m1

93
00:06:26,642 --> 00:06:30,836
under the one time pad. So, again, these
two distributions are the same. In fact,

94
00:06:30,836 --> 00:06:35,139
here there's an actual equality. These two
distributions literally are the same

95
00:06:35,139 --> 00:06:39,659
distribution. And similarly again when we
go back from a truly random function here

96
00:06:39,659 --> 00:06:43,799
to a PRF, because the PRF is secure, the
adversary can't distinguish these two

97
00:06:43,799 --> 00:06:48,063
bottom distributions, the left from the
right. And so by following these three

98
00:06:48,063 --> 00:06:52,655
equalities, basically we have proven that
the things we wanted to prove equal are

99
00:06:52,655 --> 00:06:56,340
actually computationally
indistinguishable. Okay, so that's a very

100
00:06:56,340 --> 00:07:00,874
simply proof to show that deterministic
counter mode is in fact secure and it's

101
00:07:00,874 --> 00:07:05,409
basically the same proof as we had when we
proved that a stream cipher gives us

102
00:07:05,409 --> 00:07:09,874
semantic security. Okay. So that completes
this segment and in the next segment we'll

103
00:07:09,874 --> 00:07:13,737
talk about modes that enable us to use a
key to encrypt multiple messages.
