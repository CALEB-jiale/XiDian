1
00:00:00,000 --> 00:00:02,833
There is an immense literature on attacking block ciphers.

2
00:00:02,833 --> 00:00:06,667
In this segment, I just want to give you a taste for
what these attacks look like.

3
00:00:06,667 --> 00:00:10,217
And I hope I'll convince you that you should never
ever design your own block cipher,

4
00:00:10,217 --> 00:00:14,164
and just stick to the standards like Triple DES
and AES.

5
00:00:14,164 --> 00:00:16,161
The first set of attacks that I want to talk about

6
00:00:16,161 --> 00:00:18,297
are attacks on the
implementation of the block cipher.

7
00:00:18,297 --> 00:00:23,400
As an example, imagine you have a smart card that's implementing a block cipher.

8
00:00:23,400 --> 00:00:27,214
So the smart card, for example, could be used for
credit card payments. It might have a

9
00:00:27,214 --> 00:00:31,486
secret key inside of it to authenticate
your credit card payments as you stick the

10
00:00:31,486 --> 00:00:36,510
card into a payment terminal, say. So now,
if an attacker obtains your smart card,

11
00:00:36,510 --> 00:00:41,039
what he could do is he could actually take
the smart card to a lab, and then run the

12
00:00:41,039 --> 00:00:45,407
card, and measure very precisely how much
time the card took to do encryption and

13
00:00:45,407 --> 00:00:48,901
decryption. Now, if the amount of time
that the implementation took to do

14
00:00:48,901 --> 00:00:53,529
encryption depends on bits of the secret
key, then by measuring the time, the

15
00:00:53,529 --> 00:00:57,284
attacker will learn something about your
secret key and in fact, he might be able

16
00:00:57,284 --> 00:01:02,044
to completely extract your secret key. And
there are many examples of implementations

17
00:01:02,044 --> 00:01:06,667
that simply by measuring the time very
precisely for many operations of

18
00:01:06,667 --> 00:01:11,587
encryption algorithms, you can completely
extract the secret key. Another example is,

19
00:01:11,587 --> 00:01:16,336
rather than just measuring the time, you
can actually measure the power consumption

20
00:01:16,336 --> 00:01:20,570
of the card as it's operating. So,
literally, you can connect it to a device

21
00:01:20,570 --> 00:01:24,805
that will measure the current that the
card is drawing and then graph the

22
00:01:24,805 --> 00:01:29,303
currents very, very precisely. Now, these
cards are not very fast, and as a result,

23
00:01:29,303 --> 00:01:33,993
you can actually measure the exact amount
of power consumed at every clock cycle as

24
00:01:33,993 --> 00:01:38,405
the card was executing. When you do that,
you actually get graphs of this form.

25
00:01:38,405 --> 00:01:42,257
So this is an example of a smart card
operating, while it's doing the

26
00:01:42,257 --> 00:01:46,557
DES computation. So you can see
very clearly, here's when it was doing

27
00:01:46,557 --> 00:01:50,912
the initial permutation. Here's when it's
doing the final permutation. And then,

28
00:01:50,912 --> 00:01:54,709
here, you can count. There are actually
sixteen hills and troughs

29
00:01:54,709 --> 00:01:59,104
corresponding to the sixteen rounds. And
essentially when you zoom in on a graph

30
00:01:59,104 --> 00:02:03,529
like this, you can basically read the key
bits off one by one, just by looking at

31
00:02:03,529 --> 00:02:08,421
how much power the card consumed as it was
doing the different operations. It turns out

32
00:02:08,421 --> 00:02:11,564
that, even cards that take steps to mask
this type of information, are still

33
00:02:11,564 --> 00:02:15,133
vulnerable. There's an attack called differential power analysis, where

34
00:02:15,133 --> 00:02:21,619
basically, you measure the power consumed
by the card over many, many, many, runs of

35
00:02:21,619 --> 00:02:26,067
the encryption algorithm. And as long as
there's any even small dependence between

36
00:02:26,067 --> 00:02:31,464
the amount of current consumed and the
bits of the secret key, basically that

37
00:02:31,464 --> 00:02:35,857
dependence will show up after enough runs of the encryption algorithm. And as a

38
00:02:35,857 --> 00:02:39,967
result you'll be able to completely
extract the secret key. Okay, so these

39
00:02:39,967 --> 00:02:43,988
attacks were actually discovered by Paul
Kocher and his colleagues up at

40
00:02:43,988 --> 00:02:48,468
Cryptography Research and there's actually
a fairly large industry devoted to just

41
00:02:48,468 --> 00:02:52,732
defending against these power attacks. As
far as timing attacks are concerned,

42
00:02:52,732 --> 00:02:55,467
I want to mention that these are real.
They're not just about smart cards.

43
00:02:55,467 --> 00:03:00,094
For example, you can imagine a multicore
processor where the encryption algorithm

44
00:03:00,094 --> 00:03:04,297
is running on one core and the attacker
code happens to be running on another

45
00:03:04,297 --> 00:03:09,427
core. Now these cores actually share the
same cache. And as a result, an attacker

46
00:03:09,427 --> 00:03:13,627
can actually measure or can actually look
at the exact cache misses that the

47
00:03:13,627 --> 00:03:18,100
encryption algorithm incurred. It turns
out that by looking at cache misses, you

48
00:03:18,100 --> 00:03:22,464
can completely figure out the secret key
used by the algorithms. So, one core can

49
00:03:22,464 --> 00:03:26,828
essentially extract information from the
other core, just by looking at cache misses.

50
00:03:26,828 --> 00:03:30,349
So implementing these block ciphers is actually quite subtle

51
00:03:30,349 --> 00:03:33,778
because you have to make sure that the
side channel attacks don't leak

52
00:03:33,778 --> 00:03:38,320
information about your secret key. Another
type of attack that's been discussed in

53
00:03:38,320 --> 00:03:41,733
the literature is what's called a fault
attack. So here, basically, if you're

54
00:03:41,733 --> 00:03:45,535
attacking a smart card, you can actually
cause the smart card to malfunction,

55
00:03:45,535 --> 00:03:50,226
perhaps by overclocking it, perhaps by
warming it up. Essentially, you can cause

56
00:03:50,226 --> 00:03:55,838
the processor to, malfunction, and output
erroneous data. It turns out that, if,

57
00:03:55,838 --> 00:04:00,558
during encryption, there are errors in the
last round of the encryption process, the

58
00:04:00,558 --> 00:04:05,336
resulting ciphertexts that are produced are
enough to actually expose the secret key K.

59
00:04:05,336 --> 00:04:09,682
That's quite an interesting result that
in fact if you have any errors, if you ever

60
00:04:09,682 --> 00:04:13,632
output a wrong result, that actually could
completely compromise your secret key.

61
00:04:13,632 --> 00:04:18,508
So, of course, the defense against this means
that before you output the result of your

62
00:04:18,508 --> 00:04:23,045
algorithm, you should check to make sure
that the correct result was computed.

63
00:04:23,045 --> 00:04:26,379
Now of course that's nontrivial, because how do
you know that the error didn't happen

64
00:04:26,379 --> 00:04:31,058
in your checking algorithm. But there are
known ways around that. So basically you

65
00:04:31,058 --> 00:04:35,037
can actually compute something three or
four times, take the majority over all those

66
00:04:35,037 --> 00:04:39,341
results, and be assured that the output
really is correct as long as not too many

67
00:04:39,341 --> 00:04:43,763
faults occurred inside of your computation. These are attacks on the implementation.

68
00:04:43,763 --> 00:04:47,205
I hope these examples can assure you that not only should you not

69
00:04:47,205 --> 00:04:51,168
invent your own block ciphers, you should
never even implement these crypto

70
00:04:51,168 --> 00:04:55,188
primitives yourself. Because A, you have
to make sure there are no side channel

71
00:04:55,188 --> 00:04:58,836
attachments on your implementation and B,
you have to make sure that the

72
00:04:58,836 --> 00:05:02,838
implementation is secure against fault
attacks. Okay so, instead you should just

73
00:05:02,838 --> 00:05:06,586
use standard libraries like the ones
available in OpenSSL and many other

74
00:05:06,586 --> 00:05:11,043
libraries out there. So don't implement
these primitives yourself, just use

75
00:05:11,043 --> 00:05:16,016
existing libraries. All right, so now I want
to turn to kind of more sophisticated

76
00:05:16,016 --> 00:05:20,482
attacks on block ciphers and I'll particularly
talk about how these attacks apply to DES.

77
00:05:20,482 --> 00:05:25,753
Okay so these attacks were discovered by
Biham and Shamir back in 1989, and I'll

78
00:05:25,753 --> 00:05:31,446
particularly describe a version of the
attack discovered by Matsui in 1993.

79
00:05:31,446 --> 00:05:36,500
So the goal here is basically given many,
many input-output pairs, can we actually

80
00:05:36,500 --> 00:05:41,524
recover the key better than exhaustive
search? So anything that runs better than

81
00:05:41,524 --> 00:05:45,400
exhaustive search already counts as an
attack on the block cipher. Okay, so the

82
00:05:45,400 --> 00:05:50,400
example I want to give you is what's called
linear cryptanalysis. And here imagine it

83
00:05:50,400 --> 00:05:56,037
so happens that, you know, c is the
encryption of m using key k, and

84
00:05:56,037 --> 00:06:00,895
suppose it so happens that if I look at
random key and a random message, somehow

85
00:06:00,895 --> 00:06:05,366
there's a dependence between the message,
ciphertext, and the key bits. In

86
00:06:05,366 --> 00:06:10,113
particular, if I XOR a subset of
the message bits, so this is just a

87
00:06:10,113 --> 00:06:17,375
subset of the message bits, if I XOR that with a certain subset of the ciphertext

88
00:06:17,375 --> 00:06:21,697
bits. —So these two the attacker
sees. The attacker has the message and the

89
00:06:21,697 --> 00:06:26,183
attacker has the ciphertext. And then you
compare that to an XOR of a subset of

90
00:06:26,183 --> 00:06:30,395
the key bits. Now if the two were
completely independent which is what you'd

91
00:06:30,395 --> 00:06:34,553
like, you definitely don't want your
message and your ciphertext to somehow

92
00:06:34,553 --> 00:06:38,710
predict your key bits, if the two are
like, completely independent, then this

93
00:06:38,710 --> 00:06:42,868
equality will hold with probability
exactly one-half. But suppose it so

94
00:06:42,868 --> 00:06:47,080
happens that there's a bias and this
probability holds with probability half

95
00:06:47,080 --> 00:06:52,158
plus epsilon for some small epsilon. It so
happens that, in fact, for DES, there is

96
00:06:52,158 --> 00:06:56,868
such a relation. The relation holds
specifically because of a bug in the design

97
00:06:56,868 --> 00:07:03,534
of the fifth S-box. It turns out the fifth
S-box happens to be too close to a linear

98
00:07:03,534 --> 00:07:07,000
function. And that linear function,
basically, as it propagates through the

99
00:07:07,000 --> 00:07:10,893
entire DES circuit, generates a relation
of this type. You notice, this is

100
00:07:10,893 --> 00:07:16,582
basically a linear relation that's being
computed here. So, this small tiny, tiny

101
00:07:16,582 --> 00:07:21,086
linearity in the fifth S-box generates
this relation over the entire circuit,

102
00:07:21,086 --> 00:07:25,769
where the epsilon is tiny. Epsilon is one
over 2^21, and I wrote down what

103
00:07:25,769 --> 00:07:29,528
that is. So the bias is really, really,
really small. But nevertheless, there is a

104
00:07:29,528 --> 00:07:33,336
bias using these particular subsets of bits. Now, I'm not going to show you how to

105
00:07:33,336 --> 00:07:37,095
derive this relation, or I'm not going to show you even what it is. I'll just tell you

106
00:07:37,095 --> 00:07:41,534
how to use a relation like this once you find it. Okay. So here's our relation

107
00:07:41,534 --> 00:07:45,533
that we have. And the question is how to
use it. So with a little bit of statistics

108
00:07:45,533 --> 00:07:50,484
you can actually use an equation like this
to determine some of the key bits. And

109
00:07:50,484 --> 00:07:54,844
here's you do it. Suppose you were given one over epsilon squared message-ciphertext pairs.

110
00:07:54,844 --> 00:07:58,612
And these have to be
independently random messages and the

111
00:07:58,612 --> 00:08:03,026
corresponding ciphertexts. What you would
do is you would use the formula above. In

112
00:08:03,026 --> 00:08:07,547
fact you would use the left-hand side of
the formula above to compute this relation

113
00:08:07,547 --> 00:08:11,907
between the message and ciphertext for
all the pairs you were given. Now what do

114
00:08:11,907 --> 00:08:16,122
you know? You know that for half plus
epsilon of these values, you know that

115
00:08:16,122 --> 00:08:20,605
these things will be equal to an
XOR of the key bits. So if you

116
00:08:20,605 --> 00:08:25,087
take majority over all the values you've
computed, it turns out it's not so

117
00:08:25,087 --> 00:08:30,107
difficult to see that in fact you'll get
the correct prediction for the XOR of the

118
00:08:30,107 --> 00:08:34,888
key bits with a probability of 97.7%. In
other words, if this relation happens to

119
00:08:34,888 --> 00:08:39,775
be correct more than half the time, then
the majority will be right. And because

120
00:08:39,775 --> 00:08:44,912
there's a bias, there's an epsilon bias, the probability that you will be correct

121
00:08:44,912 --> 00:08:49,566
more than half the time is, in fact,
97.7%. In which case, the majority, in

122
00:08:49,566 --> 00:08:53,763
fact, will give you the correct XOR of the
key bits. Okay? So this is kinda cool.

123
00:08:53,763 --> 00:08:58,667
Within one over epsilon squared time, you
can figure out an XOR of a bunch of key

124
00:08:58,667 --> 00:09:03,392
bits. So now, let's apply this to DES.
So, for DES, we have epsilon, which is one

125
00:09:03,392 --> 00:09:08,117
over 2^21. Which means that if you give me
2^42 input-output pairs, I can

126
00:09:08,117 --> 00:09:12,961
figure out an XOR of the key bits. And now,
it turns out, I'm not gonna exactly show

127
00:09:12,961 --> 00:09:17,652
you how, roughly speaking, using this
method, you don't just get one key bit. In

128
00:09:17,652 --> 00:09:22,352
fact, you get two key bits. You can kind
of use this relation. One's going in a

129
00:09:22,352 --> 00:09:27,297
forward direction and one's going in a
backwards direction. So that gives you two

130
00:09:27,297 --> 00:09:31,825
XORs of bits of the secret key. Okay, so
that's two bits of information about the

131
00:09:31,825 --> 00:09:35,591
secret key. And then it turns out you can
get twelve more bits, because,

132
00:09:35,591 --> 00:09:39,786
essentially, you can figure out what the
inputs are to the fifth S-box. Okay, so,

133
00:09:39,786 --> 00:09:44,143
I'm not going to exactly show you how. But it
turns out you can get twelve more bits,

134
00:09:44,143 --> 00:09:48,124
which is a total of fourteen bits overall.
So now, using this method, you've

135
00:09:48,124 --> 00:09:52,427
recovered fourteen bits of the secret key.
And of course, it took you time 2^42.

136
00:09:52,427 --> 00:09:56,438
Okay, so then, what do you do?
Well, so the rest of it is easy. Now what

137
00:09:56,438 --> 00:10:00,750
you're going to do is you're going to do
exhaustive search on the remaining bits.

138
00:10:00,750 --> 00:10:04,954
Well how many remaining bits are there?
Well, there are 42 remaining bits, so

139
00:10:04,954 --> 00:10:07,898
the exhaustive search will take you time 2^42. So what's the total attack time?

140
00:10:07,898 --> 00:10:12,450
Well, the first step of the algorithm
to determine the fourteen bits took 2^42 time,

141
00:10:12,450 --> 00:10:16,667
and the remaining brute force
search also took 2^42 time.

142
00:10:16,667 --> 00:10:22,211
So overall, the attack took two to the 43
time. Okay? So now, this is much better

143
00:10:22,211 --> 00:10:27,225
than exhaustive search. Within two to the
43 time, we broke DES. But of course, this

144
00:10:27,225 --> 00:10:32,178
required two to the 42 random input-output
pairs whereas exhaustive search only

145
00:10:32,178 --> 00:10:37,131
required three pairs. Okay, so this is a
fairly large number of input-output

146
00:10:37,131 --> 00:10:42,332
pairs that are needed, but given such a
large number, you can actually recover the

147
00:10:42,332 --> 00:10:46,560
key faster than exhaustive search. Okay,
so what's the lesson in all this?

148
00:10:46,560 --> 00:10:51,227
The lesson is, firstly, any tiny bit of
linearity, basically, in this— in the

149
00:10:51,227 --> 00:10:56,219
fifth S-box, which was not designed as
well as the other S-boxes, basically led

150
00:10:56,219 --> 00:11:01,908
to an attack on the algorithm. Okay. A tiny
beat of linearity already introduced this

151
00:11:01,908 --> 00:11:06,461
linear attack. And I want to emphasize
again that this is not the sort of thing

152
00:11:06,461 --> 00:11:10,499
you would think of when you design a cipher. And so again, the conclusion here is,

153
00:11:10,499 --> 00:11:15,345
there are very subtle attacks on block
ciphers, ones which you will not be able to

154
00:11:15,345 --> 00:11:19,484
find yourself. And so just stick to the
standards. Don't ever, ever, ever, ever

155
00:11:19,484 --> 00:11:23,133
design your block cipher. Okay, so that's
all I want to say about sophisticated

156
00:11:23,133 --> 00:11:27,548
attacks. Now let's move on to the last
type of attack that I want to mention, which

157
00:11:27,548 --> 00:11:31,769
I'll call quantum attacks, which are
again— these are generic attacks on

158
00:11:31,769 --> 00:11:35,333
all block ciphers. So let me explain what
I mean by this.

159
00:11:35,333 --> 00:11:40,453
So first of all, let's look at a generic problem, a generic search problem. Suppose I have a function

160
00:11:40,453 --> 00:11:45,222
on some large domain X, that happens to be
two outputs, either zero or one.

161
00:11:45,222 --> 00:11:49,771
And it so happens that this function is mostly
zero. And there's, like, maybe one input

162
00:11:49,771 --> 00:11:54,375
where the function happens to evaluate to
one. And your goal is basically, you know,

163
00:11:54,375 --> 00:11:58,812
find me the inputs where the function
happens to be one. Maybe there's only one

164
00:11:58,812 --> 00:12:02,991
such input. But your goal is to find it.
Well, so on a classical computer, what can

165
00:12:02,991 --> 00:12:07,172
you do? The function is given to you. It's
given to you as a black box. So the best

166
00:12:07,172 --> 00:12:11,094
you can do is just try all possible
inputs. So this is gonna take time which

167
00:12:11,094 --> 00:12:15,378
in linear in the size of the domain. Now,
it turns out there's an absolutely magical

168
00:12:15,378 --> 00:12:19,913
result that says that if you build a
computer that's based on quantum physics

169
00:12:19,913 --> 00:12:24,381
as opposed to classical physics, you can
solve this problem faster. So let me

170
00:12:24,381 --> 00:12:29,142
explain what I mean by this. So first of
all in the 70s and 80s it was observed, I

171
00:12:29,142 --> 00:12:33,845
think it was actually Richard Feynman who observed this initially, that said

172
00:12:33,845 --> 00:12:38,313
that it turns out to be very difficult to
simulate quantum experiments on a

173
00:12:38,313 --> 00:12:42,706
classical computer. So Feynman said, if
that's the case, maybe these quantum

174
00:12:42,706 --> 00:12:47,233
experiments are computing things that a
classical computer can't compute.

175
00:12:47,233 --> 00:12:51,939
So they're somehow able to compute very
quickly things that are very difficult to

176
00:12:51,939 --> 00:12:56,526
do classically. And that turned out to be
correct. And in fact, the example I want

177
00:12:56,526 --> 00:13:01,470
to show you is one of these amazing things that in fact, if you could build a

178
00:13:01,470 --> 00:13:06,117
quantum computer that's using quantum
physics, then it's, in fact, you can solve

179
00:13:06,117 --> 00:13:10,636
this search problem not in time X but in
time square root of X. So somehow, even

180
00:13:10,636 --> 00:13:14,612
though the computer doesn't know anything
about the function F, it's treating it as

181
00:13:14,612 --> 00:13:18,397
a black box, nevertheless, it's able to
find a point where the function is one, in

182
00:13:18,397 --> 00:13:22,037
time square root of X. I'm not going to explain this here, but, at the end of the

183
00:13:22,037 --> 00:13:25,966
class, we're gonna have an advanced topics
lecture. And if you'd like me to explain

184
00:13:25,966 --> 00:13:29,798
how this algorithm works, I can explain it
in that advanced topics lecture.

185
00:13:29,798 --> 00:13:33,678
It's actually quite interesting, and, in fact,
quantum computers have quite an impact on

186
00:13:33,678 --> 00:13:37,000
crypto. And again, as I said, I can
explain this in the very last lecture.

187
00:13:37,000 --> 00:13:42,190
All right. So what does this have to do with
breaking block cyphers? So far it's just a

188
00:13:42,190 --> 00:13:46,177
generic search problem. Well, oh actually
I should say before I show you the

189
00:13:46,177 --> 00:13:50,377
application, I should mention that, well,
you might be wondering, well, can someone

190
00:13:50,377 --> 00:13:54,417
build a quantum computer. And this is
still completely unknown. At this point,

191
00:13:54,417 --> 00:13:58,936
nobody really knows if we can build
large enough quantum computers to actually

192
00:13:58,936 --> 00:14:03,348
take advantage of this beautiful algorithm
due to Grover. Alright, so what does this

193
00:14:03,348 --> 00:14:07,548
have to do with block ciphers? Well, so
suppose I give you a message-ciphertext pair.

194
00:14:07,548 --> 00:14:12,221
Just one or just a few. We can
define a function as follows. It's a

195
00:14:12,221 --> 00:14:17,366
function on K, it's a function on, the key
space. And the function will basically

196
00:14:17,366 --> 00:14:22,198
output one if it so happens that the
encryption of m with k maps to c, and it

197
00:14:22,198 --> 00:14:27,406
will output zero otherwise. Now we argue
that basically this is exactly the type of

198
00:14:27,406 --> 00:14:32,363
function that's one at one point in the
key space and that's it. So by Grover's

199
00:14:32,363 --> 00:14:37,541
algorithm, we can actually find the secret
key in time square root of K.

200
00:14:37,541 --> 00:14:41,609
So what does that mean? For DES, this would
totally destroy DES. This would say

201
00:14:41,609 --> 00:14:46,267
that in time 2^28, you could
find a key. 2^28 is about 200 million.

202
00:14:46,267 --> 00:14:50,747
So 200 million steps which is, you know, just takes a millisecond on a modern computer.

203
00:14:50,747 --> 00:14:55,110
This would totally destroy DES. But even AES with 128-bit keys,

204
00:14:55,110 --> 00:14:59,827
you would be able to find the secret
key in time, roughly 2^64.

205
00:14:59,827 --> 00:15:04,248
And 2^64 is these days, considered
insecure. That's within the realm of

206
00:15:04,248 --> 00:15:08,353
exhaustive search. And so, basically, if
somebody was able to build a quantum

207
00:15:08,353 --> 00:15:12,625
computer, we would then say that AES-128
is no longer secure. Instead, if somebody,

208
00:15:12,625 --> 00:15:16,683
you know, if tomorrow, you open up the
newspaper, and you read an article that

209
00:15:16,683 --> 00:15:20,942
says, you know, so-and-so built a
quantum computer, the conclusion, the

210
00:15:20,942 --> 00:15:25,919
consequence of all that is that you should
immediately move to block ciphers that use

211
00:15:26,092 --> 00:15:30,837
256 bits, because then the running time
of Grover's algorithm is 2^128,

212
00:15:30,837 --> 00:15:35,061
which is more time than we consider
feasible, and the, basically there are

213
00:15:35,061 --> 00:15:39,112
example ciphers with 256 bits, for
example, AES-256. This is one of the

214
00:15:39,112 --> 00:15:43,567
reasons why AES was designed with 256
bits in mind. But to be honest, this is

215
00:15:43,567 --> 00:15:48,312
not the only reason. There are other reasons why you want it to have larger key sizes.

216
00:15:48,312 --> 00:15:53,529
Okay, so this is, as I said, just a taste of the different attacks on block ciphers,

217
00:15:53,529 --> 00:15:58,896
and I'm gonna leave it at that. If we decide on quantum for the last

218
00:15:58,896 --> 00:16:02,700
topic of the course, then we'll recover
that in the very last lecture.
