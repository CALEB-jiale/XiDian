1
00:00:00,000 --> 00:00:03,662
So now that we understand what block
ciphers are, let's look at a classic

2
00:00:03,662 --> 00:00:07,655
example called the Data Encryption
Standard. So, just a quick reminder. Block

3
00:00:07,655 --> 00:00:12,379
ciphers basically map N bits of input to N
bits of output. And we talked about two

4
00:00:12,379 --> 00:00:17,045
canonical examples, triple DES and AES. In
this segment, we're gonna talk about DES,

5
00:00:17,045 --> 00:00:21,480
and we'll talk about triple DES, actually,
in the next segment. And then I also

6
00:00:21,480 --> 00:00:26,031
mentioned before that block ciphers are
often built by iteration. In particular,

7
00:00:26,031 --> 00:00:30,985
we're gonna look at block ciphers that are
built by a form of iteration where a key K

8
00:00:30,985 --> 00:00:35,863
is first expanded into a bunch of round
keys. And then a round function is applied

9
00:00:35,863 --> 00:00:40,660
to the input message, again and again and
again. And essentially, after all these

10
00:00:40,660 --> 00:00:45,156
round functions are applied, we obtain the
resulting cipher text, okay? And again,

11
00:00:45,156 --> 00:00:49,253
what we're gonna look at, how DES, the
data encryption standard, uses this

12
00:00:49,253 --> 00:00:53,577
format. I just wanna be clear that, in
fact, to specify a block cipher of this

13
00:00:53,577 --> 00:00:57,788
type, one needs to specify the key
expansion mechanism, and one needs to

14
00:00:57,788 --> 00:01:02,113
specify the round function. In the segment
here, I'm gonna focus on the round

15
00:01:02,113 --> 00:01:06,551
function, and I'm not gonna talk much
about key expansion. But I just wanted to

16
00:01:06,551 --> 00:01:10,990
mention that, in fact, key expansion is
also a big part of describing how block

17
00:01:10,990 --> 00:01:15,892
cipher works. Okay, so let's talk about
the history of DES. Essentially, in the

18
00:01:15,892 --> 00:01:20,715
early 1970s, IBM realized that their
customers are demanding some form of

19
00:01:20,715 --> 00:01:25,869
encryption. And so they formed a crypto
group, and the head of that group, was

20
00:01:25,869 --> 00:01:30,492
Horst Feistel, who, in the early 70s,
designed a cipher called Lucifer. Now,

21
00:01:30,492 --> 00:01:35,560
it's interesting. In fact Lucifer had a
number of variations but one of the later

22
00:01:35,560 --> 00:01:40,559
variations in fact had a key length that
was 128 bits and a block length that's

23
00:01:40,559 --> 00:01:45,682
also 128 bits. Okay, in 1973 the governor
realized that it's buying many commercial

24
00:01:45,682 --> 00:01:50,867
off-the-shelf computers and so it wanted
its suppliers to actually have a good grip

25
00:01:50,867 --> 00:01:55,434
to algorithm that they could use in
products sold to the government. So in

26
00:01:55,434 --> 00:02:00,157
1973 the National Bureau of Standards as
it was called at the time put out a

27
00:02:00,157 --> 00:02:04,503
request for proposals for a block cipher
that is going to become a federal

28
00:02:04,503 --> 00:02:09,026
standard. And in fact IBM submitted a
variant of Lucifer. That variant actually

29
00:02:09,026 --> 00:02:13,901
went through some modification during the
standardization process and then finally

30
00:02:13,901 --> 00:02:18,482
in 1976, the national bureau standard
adopted DES as a federal standard. And, in

31
00:02:18,482 --> 00:02:23,122
fact, for DES it's interesting that the
key length was far reduced from Lucifer.

32
00:02:23,122 --> 00:02:27,602
It's only 56 bits. And the block length
was also reduced to 64 bits. And in

33
00:02:27,602 --> 00:02:31,838
fact, these decisions, especially the
decision to reduce the key length, is

34
00:02:31,838 --> 00:02:36,653
going to be a key length yield of DES and
was a source of many complaints over its

35
00:02:36,653 --> 00:02:41,062
life. In particular, already back in 1997,
DES was broken by exhaustive search

36
00:02:41,062 --> 00:02:45,994
meaning that a machine was able to search
through all two to the 56 possible keys to

37
00:02:45,994 --> 00:02:50,867
recover a particular challenge key. And in
fact we're going to talk about exhaustive

38
00:02:50,867 --> 00:02:54,683
search quite a bit. It's quite an
interesting question, and there are

39
00:02:54,683 --> 00:02:59,335
various ways to defend against exhaustive
search. And basically this 1997 experiment

40
00:02:59,335 --> 00:03:03,655
kinda spelled the doom of DES. It meant
that DES is itself, is no longer secure.

41
00:03:03,655 --> 00:03:08,251
And as a result, the National Institute of
Standards, as it became known, issued a

42
00:03:08,251 --> 00:03:12,755
request for proposals. For our next
generation's block cipher standard and in

43
00:03:12,755 --> 00:03:17,427
2000 it standardized on a cipher called Rijndael.
Which became the advanced encryption

44
00:03:17,427 --> 00:03:21,903
standard, AES. And we'll talk about AES
later on. But in this segment, I wanna

45
00:03:21,903 --> 00:03:26,199
describe how DES works. Now, DES is a
cipher, it's an amazingly successful

46
00:03:26,199 --> 00:03:30,496
cipher. It's been used in the banking
industry. In fact, there's a classic

47
00:03:30,496 --> 00:03:34,613
network called the Electronic
Clearinghouse, which banks use to clear

48
00:03:34,613 --> 00:03:39,447
checks with one another. And DES is used
for integrity in those transactions. It's

49
00:03:39,447 --> 00:03:43,922
also used in commerce. In fact, it was
very popular up until recently, as the

50
00:03:43,922 --> 00:03:48,699
main encryption mechanism for the web. Of
course, now, that's been replaced with AES

51
00:03:48,699 --> 00:03:52,977
and other ciphers. Overall, it's a
very successful cipher in terms of

52
00:03:52,977 --> 00:03:57,425
deployment. DES also has a very rich
history of attacks, which we'll talk about

53
00:03:57,425 --> 00:04:01,931
in the next segment. Okay, so now, let's
talking about the construction of DES. So,

54
00:04:01,931 --> 00:04:06,608
the core idea behind DES is what's called
a Feistel network, due to Horst Feistel.

55
00:04:06,608 --> 00:04:11,087
And basically, it's a very clever idea for
building the block cipher out of arbitrary

56
00:04:11,087 --> 00:04:15,485
functions, F1 to FD. Okay so imagine we
have these functions F1 to FD

57
00:04:15,485 --> 00:04:18,765
that happens to match n bits to n bits.
Now these are arbitrary functions,

58
00:04:18,765 --> 00:04:22,425
they don't have to be invertible or
anything. What we want to do is build an

59
00:04:22,425 --> 00:04:26,956
invertible function out of those D
functions and the way we'll do it is by

60
00:04:26,956 --> 00:04:31,484
building a new function we'll call capital
F that maps 2n bits to 2n bits.

61
00:04:31,484 --> 00:04:35,593
And the construction is described right
here. So here we have our inputs. You

62
00:04:35,593 --> 00:04:40,299
notice, there are two blocks of n bits.
In other words, the input is actually

63
00:04:40,299 --> 00:04:44,792
2n bits. The R and L stand for right and
left. Typically, people describe a

64
00:04:44,792 --> 00:04:49,205
Feistel network from top to bottom. In
which case, these n bits really would be

65
00:04:49,205 --> 00:04:52,214
right and left. But here it is more
convenient for me to describe it

66
00:04:52,214 --> 00:04:56,300
horizontally. So if we follow the R
inputs. You realize it basically gets

67
00:04:56,300 --> 00:05:01,555
copied into the L output, without any
change at all. Okay? However, the L

68
00:05:01,555 --> 00:05:07,260
inputs, is changed somewhat. What happens
is, basically, the R inputs is fit into

69
00:05:07,260 --> 00:05:12,888
the function F1 and the result is then
XORed with L0 and that becomes the new R1

70
00:05:12,888 --> 00:05:17,711
input. Okay, so this is called one round
of a Feistel network, and is done using

71
00:05:17,711 --> 00:05:22,584
the function F1. Now we do this again with
another round of the Feistel network

72
00:05:22,584 --> 00:05:26,122
with the function F2, and we do it again
and again and again, 'till we get to the

73
00:05:26,122 --> 00:05:31,969
last round, and we do it again with the
function FD. And finally, the output is

74
00:05:31,969 --> 00:05:37,542
R<u>d L<u>d. Okay. So, if you like, we can write
this in symbols. That basically, L<u>i is</u></u></u>

75
00:05:37,542 --> 00:05:43,003
simply equal to R<u>i-1. And R<u>i,
let's see, that's the more complicated</u></u>

76
00:05:43,003 --> 00:05:50,451
one. R<u>i is equal, well, let's just follow
the lines here. R<u>i is just equal to F<u>i</u></u></u>

77
00:05:50,451 --> 00:05:58,968
applied to, R<u>i-1 XOR L<u>i. Okay?
So this, and this is basically, i goes</u></u>

78
00:05:58,968 --> 00:06:06,618
from, 1 to d. So this is the, equation
that defines a Feistel network, mapping a

79
00:06:06,618 --> 00:06:09,673
2n bit input to 2n bit outputs. So
here we have the, again, I just copied the

80
00:06:09,673 --> 00:06:14,831
picture of the Feistel network. And the
amazing claim is that, in fact, it doesn't

81
00:06:14,831 --> 00:06:19,541
matter which functions you give me. For
any functions, F1 to FD that you give me,

82
00:06:19,541 --> 00:06:24,602
the resulting Feistel network function is,
in fact, invertible. And the way we're

83
00:06:24,602 --> 00:06:27,635
going to prove that is basically we're
going to construct an inverse, because not

84
00:06:27,635 --> 00:06:31,235
only is it invertible, it's efficiently
invertible. So let's see. So let's look at

85
00:06:31,235 --> 00:06:36,628
one round of a Feistel network, so
here, this is the inputs, R<u>i L<u>i, and this</u></u>

86
00:06:36,628 --> 00:06:41,618
is the output R<u>i+1, L<u>i+1. And now what I'm
going to ask you is to invert this.</u></u>

87
00:06:41,618 --> 00:06:48,781
So let's see. So suppose now the input that
we're given is R<u>i+1, L<u>i+1 and we want to</u></u>

88
00:06:48,781 --> 00:06:54,883
compute R<u>i L<u>i. So we want to compute the
round in the reverse direction. So let's</u></u>

89
00:06:54,883 --> 00:07:00,024
see if we can do it. Well, let's look at
R<u>i. So, R<u>i is very easy. Basically, R<u>i is</u></u></u>

90
00:07:00,024 --> 00:07:07,240
just equal to L<u>i+1. So L<u>i+1 just becomes
R<u>i. But now, let me ask you, to write the</u></u></u>

91
00:07:07,245 --> 00:07:12,157
expression for L<u>i in terms of R<u>i+1, and L<u>i+1.</u></u></u>

92
00:07:13,049 --> 00:07:17,991
So I hope everybody sees that, basically, L<u>i+1
is fed into the function F<u>i+1.</u></u>

93
00:07:17,991 --> 00:07:24,810
The result is XORed with R<u>i+1,
and that gives the L<u>i input.</u></u>

94
00:07:24,810 --> 00:07:28,181
So this the inverse of one round
of a Feistel network.

95
00:07:28,181 --> 00:07:32,865
And if we draw this as a diagram, let's just
write the picture for the inverse.

96
00:07:32,865 --> 00:07:38,810
So here you notice the input is R<u>i+1, L<u>i+1
and the output is R<u>i L<u>i. Right?</u></u></u></u>

97
00:07:38,810 --> 00:07:43,278
So we're computing, we're inverting, the
rounds. So you notice that the inverse of

98
00:07:43,278 --> 00:07:47,242
a Feistel round looks pretty much the
same as the Feistel round in the

99
00:07:47,242 --> 00:07:50,237
forward direction. It's literally, you
know, just for a technical reason, it's

100
00:07:50,237 --> 00:07:54,309
kinda the mirror image of one another. But
it's basically, the same construct. And

101
00:07:54,309 --> 00:07:59,133
when we put these inverted rounds back
together. We essentially get the inverse

102
00:07:59,133 --> 00:08:03,446
of the entire Feistel network. So you
notice we start off with the round number D

103
00:08:03,446 --> 00:08:07,632
with the inverse of round number D,
then we do the inverse of round number D-1

104
00:08:07,632 --> 00:08:11,458
and so on and so forth until we
get to the inverse of the first round. And

105
00:08:11,458 --> 00:08:18,063
we get our final outputs which is R<u>0, L<u>0,
like this is the inputs and we manage to</u></u>

106
00:08:18,063 --> 00:08:22,694
invert basically R<u>d, L<u>d and get R<u>0, L<u>0
and the interesting thing is that</u></u></u></u>

107
00:08:22,694 --> 00:08:25,882
basically these inversion circuits look
pretty much the same as the encryption

108
00:08:25,882 --> 00:08:31,105
circuits and the only difference is that
the functions are applied in reverse order.

109
00:08:31,105 --> 00:08:35,566
Right we started with F<u>d and ended with
F<u>1. Whereas when we were encrypting, we</u></u>

110
00:08:35,566 --> 00:08:40,539
started with F<u>1 and ended with F<u>d. So, for
hardware designers, this is very</u></u>

111
00:08:40,539 --> 00:08:44,808
attractive, because, basically, if you
wanna save hardware, you realize that your

112
00:08:44,808 --> 00:08:48,536
encryption hardware is identical to your
decryption hardware. So you only have to

113
00:08:48,536 --> 00:08:52,674
implement one algorithm, and you get both
algorithms the same way. The only

114
00:08:52,674 --> 00:08:56,899
difference is that the functions are
applied in reverse order. Okay. So this

115
00:08:56,899 --> 00:09:01,109
Feistel mechanism is a general method
for building invertible functions from

116
00:09:01,109 --> 00:09:06,224
arbitrary functions F<u>1 to F<u>d and in fact,
it's used in many different block ciphers.</u></u>

117
00:09:06,224 --> 00:09:11,040
Although, interestingly, it's not actually
used in AES. So, there are many other

118
00:09:11,040 --> 00:09:15,297
block ciphers that use a Feistel
network. Or, of course, they differ from

119
00:09:15,297 --> 00:09:19,838
DES in the functions F<u>1 to F<u>d. But AES
actually uses a completely different type</u></u>

120
00:09:19,838 --> 00:09:24,033
of structure that's actually not a
Feistel network. We'll see how AES

121
00:09:24,033 --> 00:09:29,043
works in a couple of segments. So now that
we know what Feistel networks are, let

122
00:09:29,043 --> 00:09:32,898
me mention an important theorem about the
theory of Feistel networks that shows

123
00:09:32,898 --> 00:09:37,794
why they're a good idea. This theorem is
due to Luby and Rackoff back in 1985, and it

124
00:09:37,794 --> 00:09:41,774
says the following. Suppose I have a
function that is a secure pseudorandom

125
00:09:41,774 --> 00:09:46,804
function, okay. So it's indistinguishable
from random and happens to act on N bits.

126
00:09:46,804 --> 00:09:52,857
So it maps N bits to N bits and uses a
key K. Then, it turns out, that if you use

127
00:09:52,857 --> 00:09:57,621
this function in three rounds of a Feistel
network. What you end up with is a secure

128
00:09:57,621 --> 00:10:03,208
pseudo random permutation. In other words,
what you end up with is an invertible

129
00:10:03,208 --> 00:10:07,724
function that is indistinguishable from a
truly random invertible function. And I

130
00:10:07,724 --> 00:10:11,457
hope you remember that the true definition
of a secure block cipher is that it needs

131
00:10:11,457 --> 00:10:16,106
to be a secure pseudo random permutation.
So what this theorem says, is that if you

132
00:10:16,106 --> 00:10:20,303
start with a secure pseudo random
function, you end up with a secure block

133
00:10:20,303 --> 00:10:23,824
cipher. Basically, that's what this is.
And let me explain in a little bit more

134
00:10:23,824 --> 00:10:28,939
detail what's actually going on here. So,
essentially, the PRF is used in every

135
00:10:28,939 --> 00:10:34,808
round of the Feistel network. So, in
other words, here, what's actually

136
00:10:34,808 --> 00:10:39,731
computed is the PRF using one secret key,
K0. Here, what's computed is the PRF

137
00:10:39,731 --> 00:10:45,959
using a different secret key, of course
applied to R1. And here we have yet

138
00:10:45,959 --> 00:10:51,578
another secret key, K1 applied, K2 applied
to R2. And you notice, this is why,

139
00:10:51,578 --> 00:10:55,371
basically this Feistel construction,
uses keys in K cubed. In other words, it

140
00:10:55,371 --> 00:11:01,004
uses three independent keys. So it's very
important that the keys are actually

141
00:11:01,004 --> 00:11:07,438
independent. So really, we need three,
independent keys. And then we end up with

142
00:11:07,438 --> 00:11:12,600
a secure pseudorandom permutation. Okay,
so that's the theory behind Feistel

143
00:11:12,600 --> 00:11:16,051
networks. And now that we understand that,
we can actually look at the specifics of DES.

144
00:11:16,051 --> 00:11:20,256
So DES is basically a sixteen round
Feistel network, okay. So there are

145
00:11:20,256 --> 00:11:26,349
functions F1 to F16 that map 32 bits to
32 bits, and as a result, the DES itself

146
00:11:26,349 --> 00:11:33,054
acts on 64 bit blocks, 2x32. Now the
sixteen round functions in DES are

147
00:11:33,054 --> 00:11:37,673
actually all derived from a single
function F. Just used with different keys.

148
00:11:37,673 --> 00:11:44,765
So in fact, these are the different round
keys. So K<u>i is, a round key. And it's</u>

149
00:11:44,765 --> 00:11:52,585
basically derived from the key K, derived
from the 56 bit DES key K. Okay and I'll

150
00:11:52,585 --> 00:11:56,567
describe what this function F is in just a
minute. But basically that, you see that

151
00:11:56,567 --> 00:12:01,856
by using sixteen different round keys, we
get sixteen different round functions. And

152
00:12:01,856 --> 00:12:06,460
that gives us the Feistel network. So just
on a high level how the DES works

153
00:12:06,460 --> 00:12:10,829
basically you have a 64 bit input. The
first thing it does is, this initial

154
00:12:10,829 --> 00:12:15,175
permutation that just permutes the 64 bits
around. Namely it maps bit number one to

155
00:12:15,175 --> 00:12:20,216
bit number six. Bit number two to bit
number seventeen, and so on. This is not

156
00:12:20,216 --> 00:12:24,702
for security reasons, this is just
specified in the standard. Then we go into

157
00:12:24,702 --> 00:12:29,076
the sixteen round Feistel network. That
actually, you now know how it works.

158
00:12:29,076 --> 00:12:33,810
Basically uses the function F1 to F16, as
specified before. And then, basically we

159
00:12:33,810 --> 00:12:38,721
have another permutation, it's called the
final permutation. That's just the inverse

160
00:12:38,721 --> 00:12:42,863
of the initial permutation. Again,
it just permutes bits around, this is not

161
00:12:42,863 --> 00:12:47,728
necessary for security reasons. And then
we finally get, the final outputs. Okay.

162
00:12:47,728 --> 00:12:53,400
Now, as we said, there's a key expansion
step, which I'm not gonna describe. But

163
00:12:53,400 --> 00:12:59,546
basically, this 56-bit DES key is expanded
into these rounds keys. Where each round

164
00:12:59,546 --> 00:13:05,028
key, is 48 bits. Okay, so we have sixteen
48 bit round keys, and they're basically

165
00:13:05,028 --> 00:13:10,243
used in the sixteen rounds of DES. And
then when you want to invert the cipher,

166
00:13:10,243 --> 00:13:15,458
all you do is you use these, round keys,
these sixteen round keys, in reverse

167
00:13:15,458 --> 00:13:20,490
order. Okay, so now that we understand the
DES structure, the only thing that's left

168
00:13:20,490 --> 00:13:24,809
to do is specify the function, capital F.
So let me explain how this function works.

169
00:13:24,809 --> 00:13:30,238
So basically, it takes, as inputs, its, 32
bit value, let's call it X. But in

170
00:13:30,238 --> 00:13:35,112
reality, you remember, this is R<u>0,
R<u>1, R-2, R<u>3, so on and so</u></u></u>

171
00:13:35,112 --> 00:13:40,352
forth. These are 32 bit values. And then
it takes, also, a 48 bit round key. So

172
00:13:40,352 --> 00:13:45,391
here we have our key K<u>i, which happens to
be 48 bits. The first thing it does, is it</u>

173
00:13:45,391 --> 00:13:50,039
goes through an expansion box. And this
expansion box basically take thirty two

174
00:13:50,039 --> 00:13:57,152
bits, and maps them into 48 bits. Now, all
the expansion box does is just replicates

175
00:13:57,152 --> 00:14:04,312
some bits, and move other bits around. So,
for example, bit #1 of X is replicated

176
00:14:04,312 --> 00:14:11,086
into positions 2 and 48 in the output.
Bit #2 of X is positioned in as bit

177
00:14:11,086 --> 00:14:15,124
#3 of the output. And so on and so
forth, just by replicating some of the

178
00:14:15,124 --> 00:14:20,588
bits of X, we expand the input into 48
bits. The next thing we do is we compute

179
00:14:20,588 --> 00:14:23,940
an XOR with the round key.
Sometimes people say that cryptographers

180
00:14:23,940 --> 00:14:30,437
only compute XORs. This is an example of
that, where, well, we just do XORs in this

181
00:14:30,437 --> 00:14:35,817
function. And then comes the magic of DES,
where, actually, these 48 bits are broken

182
00:14:35,817 --> 00:14:42,756
into eight groups of six bits. Six, seven,
eight. And so let me draw, and then what

183
00:14:42,756 --> 00:14:48,790
happens is, so yes. Each one of these,
each one of these wires is, six bits. And

184
00:14:48,790 --> 00:14:53,857
then they, they go into what, what are
called S boxes. And I'll explain S boxes

185
00:14:53,857 --> 00:15:01,524
in just a minute. The S boxes are kind of
the smarts of, DES. And then, the S

186
00:15:01,524 --> 00:15:07,380
box is basically a map, six bits to four
bits. So, the outputs of the S boxes are

187
00:15:07,380 --> 00:15:12,913
these four bits. They're collected. This
gives up 32 bits, right? Eight groups of

188
00:15:12,913 --> 00:15:17,914
four bits, gives us 32 bits and then
finally this is fed into yet another

189
00:15:17,914 --> 00:15:22,982
permutation which just maps the bits
around. So, for example bit number one

190
00:15:22,982 --> 00:15:27,045
will go to bit number nine, bit number two
will go to bit number fifteen and so on.

191
00:15:27,045 --> 00:15:34,353
So it just permutes the 32 bits around and
that's the final 32 bit output of this F function.

192
00:15:34,353 --> 00:15:39,306
Okay? So by using different
round keys, essentially, we get different

193
00:15:39,306 --> 00:15:44,355
round functions, and that's how we form
the sixteen round functions of DES. Now,

194
00:15:44,355 --> 00:15:49,093
the only thing that, left to specify are
these S boxes. So the S boxes, literally,

195
00:15:49,093 --> 00:15:54,982
are just functions from six bits to four
bits. They are just implemented as a look

196
00:15:54,982 --> 00:15:59,993
up table. Right? So describing a function
from six bits to four bits basically

197
00:15:59,993 --> 00:16:05,134
amounts to writing the output of the
function on all two to the six possible inputs.

198
00:16:05,134 --> 00:16:09,984
Two to the six is 64. So we just
have a table that literally contains 64 values.

199
00:16:09,984 --> 00:16:14,504
Where each value is four bits. So
here is an example, this happens to be the

200
00:16:14,504 --> 00:16:18,972
fifth S box, and you see that this is a
table that contains 64 values right?

201
00:16:18,972 --> 00:16:26,942
It's four by sixteen. So, 64 values. For
example, if you wanna look at, the output,

202
00:16:26,942 --> 00:16:35,468
that corresponds to 0-1-1-0-1-1. Okay, then
you look at these two bits. This is 01,

203
00:16:35,468 --> 00:16:41,689
and these four bits are 1101, and you see
that the output is 1001. The four bits

204
00:16:41,689 --> 00:16:46,977
output 1001. Okay, so the S boxes are just
implemented as these tables.

205
00:16:46,977 --> 00:16:51,524
Now the question is, how are these S boxes chosen.
How are these tables actually chosen by

206
00:16:51,524 --> 00:16:56,167
the designers of this. So to give you some
intuitions for that, lets start with a

207
00:16:56,167 --> 00:17:02,395
very bad choice for S boxes. So imagine
the S boxes were linear. What do I mean by

208
00:17:02,395 --> 00:17:07,266
that? I mean that imagine that these six
bit inputs literally were just

209
00:17:07,266 --> 00:17:12,678
XORed with one another in different
ways to produce the four bit outputs.

210
00:17:12,678 --> 00:17:17,893
Okay, another way of writing that is that
we can write the S box as a matrix vector product.

211
00:17:17,893 --> 00:17:23,314
So here you have the matrix Ai.
And the vector, the six bit vector X.

212
00:17:23,314 --> 00:17:27,826
And you can see that, if we write this matrix
vector product, basically, we take the

213
00:17:27,826 --> 00:17:32,107
inner product of this vector with the
input vector. Remember, these are all bits.

214
00:17:32,107 --> 00:17:36,446
So the six bits vector inner
product. Another six bit vector, and we do

215
00:17:36,446 --> 00:17:40,670
that modulo two, you realize, basically,
what we're computing is X2 XOR X3.

216
00:17:40,670 --> 00:17:44,668
Right? Because only position two and
position three have 1's in it.

217
00:17:44,668 --> 00:17:50,034
And similarly the next, inner product will
produce X1 XOR X4 XOR X5 and so on and

218
00:17:50,034 --> 00:17:55,096
so forth. Okay. So you can literally see
that if the S boxes are implemented this

219
00:17:55,096 --> 00:18:00,177
way. Then, all they do, is just apply the
matrix A to the input vector X. Which is

220
00:18:00,177 --> 00:18:05,456
why we say, that in this case the S boxes
are completely linear. Now, I claimed that

221
00:18:05,456 --> 00:18:10,670
in fact that if the S boxes were linear, then DES
would be totally insecure. The reason is,

222
00:18:10,670 --> 00:18:15,691
if the S boxes are linear, then all that
DES does is just compute XOR of various

223
00:18:15,691 --> 00:18:20,127
things and permute and shuffle bits
around. So it's just XORs and bit

224
00:18:20,127 --> 00:18:24,514
permutations, which means that as a
result, all of DES is just a linear

225
00:18:24,514 --> 00:18:30,505
function. In other words, there will be a
Matrix B. Of these dimensions. Basically,

226
00:18:30,505 --> 00:18:35,584
it's a matrix B that has width 832.
Basically what I will do is I will write

227
00:18:35,584 --> 00:18:41,065
the 64 bit message plus the sixteen round
keys as one long vector. Alright, so the

228
00:18:41,065 --> 00:18:46,411
message is 64 bits and there are sixteen
round keys. Each one is 48 and that, if

229
00:18:46,411 --> 00:18:51,825
you do the math, it's basically 832. Okay?
So I write these values, the keys and the

230
00:18:51,825 --> 00:18:57,439
message, as one long vector and then there
will be this matrix that essentially when

231
00:18:57,439 --> 00:19:02,143
you compute these matrix vector products.
Essentially you get the different bits of

232
00:19:02,143 --> 00:19:06,941
the ciphertext. So there's 64 of these
rows and as a result, you get 64 bits of

233
00:19:06,941 --> 00:19:10,954
ciphertext. Okay, so this is what it
means for DES to be linear. So if you

234
00:19:10,954 --> 00:19:14,693
think a little bit about this, you realize
that the S boxes are the only nonlinear

235
00:19:14,693 --> 00:19:19,116
part of DES. So if the S boxes were
linear, then the entire circuit is linear

236
00:19:19,116 --> 00:19:23,358
and therefore can be expressed as this
matrix. Now if that's the case then DES

237
00:19:23,358 --> 00:19:28,066
would be terrible as a secure pseudorandom
permutation. And let me give you a very

238
00:19:28,066 --> 00:19:33,596
simple example. Basically if you did the
XOR of three outputs of DES, well

239
00:19:33,596 --> 00:19:38,984
let's think what that means. Basically we
would be looking at B times, the matrix B

240
00:19:38,984 --> 00:19:43,649
that defines DES, times, one vector
XOR B times another vector,

241
00:19:43,649 --> 00:19:48,540
XOR B times a third vector. We
could take the B out of the parentheses so

242
00:19:48,540 --> 00:19:54,338
we'd be basically doing B times this
vector over here. But of course K XOR K XOR K,

243
00:19:54,338 --> 00:19:59,664
this is just K. And so if you
think about what that means, basically we

244
00:19:59,664 --> 00:20:06,503
just got back DES of K at the point M1 XOR M2 XOR M3. But this means that now DES

245
00:20:06,503 --> 00:20:10,896
has this horrible relation. That can be
tested. Right? So, basically, if you

246
00:20:10,896 --> 00:20:15,682
XOR the output of three values,
M1, M2, M3, you'll get the value of

247
00:20:15,682 --> 00:20:20,317
DES, at the point M1 XOR M2 XOR M3. Now this
is not a relation that is going to hold

248
00:20:20,317 --> 00:20:25,362
for a random function. A random function
is not going to satisfy this equality.

249
00:20:25,362 --> 00:20:29,707
And so you get a very easy test to tell you
that DES is not a random function.

250
00:20:29,707 --> 00:20:34,099
In fact, maybe you can take that as a small
exercise. It's not even difficult to see,

251
00:20:34,099 --> 00:20:39,195
that given enough input output pairs, you
can literally recover the entire secret key.

252
00:20:39,195 --> 00:20:44,988
Yeah. You just need 832 input output
pairs, and you'll be able recover the

253
00:20:44,988 --> 00:20:50,290
entire secret key. And so if the S boxes
were linear, DES would be completely

254
00:20:50,290 --> 00:20:55,652
insecure. It turns out, actually, even if
the S boxes were close to being linear. In

255
00:20:55,652 --> 00:21:01,119
other words, the S boxes were linear most
of the time. So maybe for 60 out of the 64

256
00:21:01,119 --> 00:21:06,322
inputs, the S boxes were linear. It turns
out that would also be enough to break

257
00:21:06,322 --> 00:21:11,092
DES, and we're gonna see why later on. In
particular, if you choose the S boxes at

258
00:21:11,092 --> 00:21:15,376
random, it turns out they'll tend to be
somewhat close to linear functions. As a

259
00:21:15,376 --> 00:21:19,606
result, you'll be able to totally break
DES. You'll just be able to recover the

260
00:21:19,606 --> 00:21:23,619
key, in basically, very little time. And
so, the designers of DES actually

261
00:21:23,619 --> 00:21:27,687
specified a number of rules they use for
choosing the S boxes. And it's not

262
00:21:27,687 --> 00:21:31,711
surprising, the first rule is that these
functions are far away from being linear.

263
00:21:31,711 --> 00:21:36,208
Okay. So, in other words, there is no
function that agrees with a large fraction

264
00:21:36,208 --> 00:21:39,840
of the outputs of the S box. And then
there are all these other rules, for

265
00:21:39,840 --> 00:21:44,146
example, there are exactly four to one
maps, right? So, every output has exactly

266
00:21:44,146 --> 00:21:48,433
four pre-images and so on and so forth. So
we understand now why they chose the S

267
00:21:48,433 --> 00:21:52,773
boxes they way they did and in fact its
all done to defeat certain attacks on DES.

268
00:21:52,773 --> 00:21:56,742
Okay. So that's the end of the
description of DES, and in the next few

269
00:21:56,742 --> 00:21:59,706
segments we are going to look at the
security of DES.
