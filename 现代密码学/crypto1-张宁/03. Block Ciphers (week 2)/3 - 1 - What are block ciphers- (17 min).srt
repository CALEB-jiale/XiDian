1
00:00:00,000 --> 00:00:03,553
Now that we understand stream ciphers,
we're gonna move on and talk about a more

2
00:00:03,553 --> 00:00:07,430
powerful primitive called a block cipher.
So a block cipher is made up of two

3
00:00:07,430 --> 00:00:11,800
algorithms, E and D. These are encryption
and decryption algorithms. And both of

4
00:00:11,800 --> 00:00:17,183
these algorithms take, as input, a key K.
Now, the point of a block cipher is that

5
00:00:17,183 --> 00:00:23,572
it takes an N bit plain text as input, and
it outputs exactly the same number of bits

6
00:00:23,572 --> 00:00:28,538
as outputs. So it maps N bits on inputs to
exactly N bits of outputs. Now there are

7
00:00:28,538 --> 00:00:33,000
two canonical examples of block ciphers.
The first one is called triple-DES. In

8
00:00:33,000 --> 00:00:37,895
triple-DES the block size, namely the
number of input bits, is 64. So triple-DES

9
00:00:37,895 --> 00:00:44,388
will map 64-bit blocks to 64-bit blocks
and it does it using a key that's 168 bits long.

10
00:00:44,388 --> 00:00:48,276
We're gonna talk about how Triple DES is built in the next segment.

11
00:00:48,276 --> 00:00:51,934
Another block cipher, which is more
recent, is called AES. Now, AES has

12
00:00:51,934 --> 00:00:55,846
slightly different parameters. So, here
the block size is 128 bits.

13
00:00:55,846 --> 00:01:01,687
So, AES will map a 128 bits of input to 128 bits of output.

14
00:01:01,687 --> 00:01:07,169
And it actually has three possible sizes of keys, and I wrote down these sizes over here.

15
00:01:07,169 --> 00:01:11,205
Basically the longer the key, the slower the cipher is,

16
00:01:11,205 --> 00:01:13,445
but presumably the
more secure it is to break and we're gonna

17
00:01:13,445 --> 00:01:18,208
talk about what it means for block ciphers
to be secure in just a minute. Now block

18
00:01:18,208 --> 00:01:21,990
ciphers are typically built by iteration. They
take in as input a key K, for example

19
00:01:21,990 --> 00:01:26,169
in the case of AES the key could be 128
bits long, and the first thing that

20
00:01:26,169 --> 00:01:31,467
happens to the key is that it gets expanded
into a sequence of keys K1 to Kn called

21
00:01:31,467 --> 00:01:36,523
round keys. Now, the way the cipher
uses these round keys is by iteratively

22
00:01:36,523 --> 00:01:41,024
encrypting the message again and again and
again using what's called a round

23
00:01:41,024 --> 00:01:45,760
function. So here we have this function R
that take two inputs. This function R is

24
00:01:45,760 --> 00:01:50,612
gonna be called a round function. It takes
as input the round key, and it takes as

25
00:01:50,612 --> 00:01:55,113
input the current state of the message.
So here we have our input message. Say,

26
00:01:55,113 --> 00:01:59,685
for AES, the message would be 128 bits
exactly, because each block in AES is

27
00:01:59,685 --> 00:02:04,920
exactly 128 bits. And then the first thing
that happens is we apply the first round

28
00:02:04,920 --> 00:02:09,713
function using the key K1 to the
message. And we get some new message out,

29
00:02:09,713 --> 00:02:14,548
as a result. Then we take this message m1, we apply the next round function to

30
00:02:14,548 --> 00:02:19,100
it using a different key, using the key k2.
Then we get the next round message out.

31
00:02:19,100 --> 00:02:23,533
And so on and so forth until all the
rounds have been applied and then the

32
00:02:23,533 --> 00:02:28,262
final output is actually the result of the
cipher. And again this would be also

33
00:02:28,262 --> 00:02:32,645
in the case of AES, this was 128 bits. And
the resulting cipher text would also be

34
00:02:32,645 --> 00:02:36,593
128 bits. Now, different ciphers have
different number of rounds, and they have

35
00:02:36,593 --> 00:02:40,439
different round functions. So, for
example, for triple DES the number

36
00:02:40,439 --> 00:02:44,438
of rounds is 48. And we're gonna see
exactly how the round function for triple

37
00:02:44,438 --> 00:02:48,488
DES works. For AES, for
example, the number of rounds

38
00:02:48,488 --> 00:02:52,282
is only ten, and again, we're gonna look
at how the round functions for AES

39
00:02:52,282 --> 00:02:54,209
work as well in just a minute.

40
00:02:54,563 --> 00:02:57,665
Before we do that, I just wanted to mention performance numbers.

41
00:02:57,665 --> 00:02:59,513
So you can see here, these are the performance numbers

42
00:02:59,513 --> 00:03:04,721
for the two typical block ciphers, triple DES and AES.

43
00:03:04,721 --> 00:03:08,490
And these are the corresponding numbers for the stream ciphers

44
00:03:08,490 --> 00:03:10,508
that we looked at in the previous module.

45
00:03:13,155 --> 00:03:15,019
And if you see that the block ciphers are

46
00:03:15,019 --> 00:03:18,209
considerably slower than stream ciphers. But we'll see that we can

47
00:03:18,209 --> 00:03:22,486
do many things with block ciphers that we
couldn't do very efficiently with,

48
00:03:22,486 --> 00:03:27,262
constructions like RC4. Now my goal for
this week is to show you how block ciphers work,

49
00:03:27,262 --> 00:03:31,700
but more importantly I want to show
you how to use block ciphers correctly,

50
00:03:31,700 --> 00:03:36,210
for either encryption or integrity or
whatever application you have in mind.

51
00:03:36,210 --> 00:03:40,606
So to show you how to use block ciphers correctly, it actually
makes a lot of sense

52
00:03:40,606 --> 00:03:45,345
to abstract the concept a little bit so we have a clean,
abstract concept of a block cipher

53
00:03:45,345 --> 00:03:49,856
to work with. And then we can argue and reason
about what constructions are correct and

54
00:03:49,856 --> 00:03:54,423
what constructions are incorrect. And so
an abstraction, it's a very elegant abstraction of a

55
00:03:54,423 --> 00:03:58,590
block cipher is what's called a pseudorandom function, a pseudorandom

56
00:03:58,590 --> 00:04:03,518
permutation. So let me explain what these
things are. So a pseudorandom function

57
00:04:03,518 --> 00:04:08,831
basically is defined over a key space, an
input space, and an output space.

58
00:04:08,831 --> 00:04:14,428
And all it is, is basically a function that takes
a key and an input as inputs and outputs

59
00:04:14,428 --> 00:04:20,095
some element in the output space. Okay, so
it takes an element in K, an element in X,

60
00:04:20,095 --> 00:04:24,746
and outputs an element in Y. And the only
requirement essentially, is that there's

61
00:04:24,746 --> 00:04:29,132
an efficient way to evaluate the function.
For functions we're not requiring that

62
00:04:29,132 --> 00:04:33,882
they be invertible, we just need them to
be evaluatable, given the key and the input x.

63
00:04:33,882 --> 00:04:38,118
Now, a related concept that more accurately captures what a block cipher is

64
00:04:38,118 --> 00:04:41,698
it's called a pseudo-random
permutation. So a pseudo-random

65
00:04:41,698 --> 00:04:46,261
permutation is, again, defined over a key
space, and then just a set X. And what it

66
00:04:46,261 --> 00:04:50,362
does is it takes an element in the key
space, an element of X, and outputs,

67
00:04:50,362 --> 00:04:54,579
basically, one element in X. Now, as
usual, the function E should be easy to

68
00:04:54,579 --> 00:04:59,026
evaluate. So there should be an algorithm
to evaluate the function E. But more

69
00:04:59,026 --> 00:05:04,382
importantly, once we fix the key K, it's
important that this function E be one-to-one.

70
00:05:04,382 --> 00:05:09,731
In other words, if you think of the
space X as the set here, and here's the

71
00:05:09,731 --> 00:05:14,805
same set X again, then basically the
function E, what it does, is, it's a one-to-one

72
00:05:14,805 --> 00:05:20,360
function, so every element in X
gets mapped to exactly one element in X.

73
00:05:20,360 --> 00:05:24,796
And then because it's one to one, of
course it's also invertible. So given some

74
00:05:24,796 --> 00:05:30,228
output there's only one input that maps to
that output. And the requirement is that

75
00:05:30,228 --> 00:05:35,660
there is an efficient inversion algorithm,
call it D, that given a particular output,

76
00:05:35,660 --> 00:05:39,984
will output the original preimage that
mapped to that output. So really, a

77
00:05:39,984 --> 00:05:44,718
pseudorandom permutation captures very
accurately and syntactically what a block

78
00:05:44,718 --> 00:05:49,393
cipher is, and often I'll use the terms
interchangeably, either a block cipher or

79
00:05:49,393 --> 00:05:53,834
a pseudorandom permutation. I'll use
whichever term depending on the context

80
00:05:53,834 --> 00:05:58,706
where we're discussing things. Okay,
so we have two examples, as we said, of

81
00:05:58,706 --> 00:06:04,031
pseudorandom permutations, triple DES and
AES, say for AES-128. The key space would

82
00:06:04,031 --> 00:06:09,225
be 128 bits and the output space would be
128 bits. For Triple DES, as we said, the

83
00:06:09,225 --> 00:06:13,721
block size is only 64 bits. And the key
size is 168 bits, okay. So we'll use

84
00:06:13,721 --> 00:06:18,108
these running examples actually throughout, so whenever I say a PRP, concretely

85
00:06:18,108 --> 00:06:21,667
you should be thinking AES or
triple DES. Now one thing that I

86
00:06:21,667 --> 00:06:26,994
wanted to point out is that in fact any
pseudo-random permutation, namely any block

87
00:06:26,994 --> 00:06:31,326
cipher, you can also think of it as a PRF.
In fact a PRP is a PRF that has more structure.

88
00:06:31,326 --> 00:06:35,935
In particular, a PRP is a PRF where
the input space and the output space are

89
00:06:35,935 --> 00:06:40,322
the same, so X is equal to Y, and in
fact is efficiently invertible once you

90
00:06:40,322 --> 00:06:44,944
have the secret key k. Okay. So
in some sense a PRP is a special case of a

91
00:06:44,944 --> 00:06:48,849
PRF, although that's not entirely accurate, and we'll see why in just a second.

92
00:06:48,849 --> 00:06:53,359
So, so far, we just described the,
kind of, the syntactic definition of what

93
00:06:53,359 --> 00:06:57,760
is a pseudo random permutation and a
pseudo random function? So now, let's talk

94
00:06:57,760 --> 00:07:01,936
about what it means for a PRF or a PRP to
be secure. And this concept will

95
00:07:01,936 --> 00:07:06,393
essentially capture what it means for a
block cipher to be secure, okay? So this

96
00:07:06,393 --> 00:07:09,778
is why I wanted to show you these
definitions, before we look at actual

97
00:07:09,778 --> 00:07:13,029
block cipher constructions, so at least
it's clear in your mind what it is we're

98
00:07:13,029 --> 00:07:19,267
trying to construct. Okay, so here we have
a PRF. And I'm gonna need a little bit of

99
00:07:19,267 --> 00:07:24,133
notation, not too much though, so I'm gonna
need to define the set "Funs of X, Y".

100
00:07:24,133 --> 00:07:30,133
This is basically the set of all functions from
the set X to the set Y, denoted here as a

101
00:07:30,133 --> 00:07:35,467
big circle, Funs[X, Y]. Now this set is
gigantic. Its size is basically, you know,

102
00:07:35,467 --> 00:07:41,120
the size of Y to the size of X, so for
example for AES, remember both X and Y

103
00:07:41,120 --> 00:07:45,600
would be 2 to the 128, so for AES the
size of the set is enormous. It'll be

104
00:07:45,600 --> 00:07:52,686
2 to the 128 times 2 to the 128.
So it's kind of a double exponential.

105
00:07:52,686 --> 00:07:57,797
So this is a gigantic number, this is more
particles than there are in the universe.

106
00:07:57,797 --> 00:08:02,070
But regardless, we can kind of think of this set abstractly. We never have to kind of

107
00:08:02,070 --> 00:08:06,936
write it down, we can just keep it in our head and not worry about computing on it.

108
00:08:06,936 --> 00:08:11,627
So this is a particular gigantic set of the set of all functions from X to Y.

109
00:08:11,627 --> 00:08:16,261
Now we're gonna look at a much smaller set of functions, namely I'll call this set

110
00:08:16,261 --> 00:08:20,945
S sub F, and that's gonna denote the
set of all functions from X to Y that are

111
00:08:20,945 --> 00:08:25,253
specified by the PRF as soon as we
fix the particular key k. Okay so,

112
00:08:25,253 --> 00:08:30,444
we fixed the key k, we let the second
argument float, and that basically defines

113
00:08:30,444 --> 00:08:34,554
a function from X to Y. Then we're going
to look at the set of all such functions

114
00:08:34,554 --> 00:08:39,600
for all possible keys in the key space.
Okay, so, if you think about it again,

115
00:08:39,600 --> 00:08:47,921
for AES, if we're using 128-bit keys, the size of
this, I'll say S-AES, is basically going to be

116
00:08:47,921 --> 00:08:53,201
2 to the 128, so much, much, much
smaller than the set of all possible

117
00:08:53,201 --> 00:08:58,165
functions from X to Y. And now, we say
that a PRF is secure, basically if a

118
00:08:58,165 --> 00:09:03,455
random function in, from X to Y. So we
literally, we pick some arbitrary function

119
00:09:03,455 --> 00:09:09,079
in this gigantic set of all functions from
X to Y. And we say that the PRF is secure,

120
00:09:09,079 --> 00:09:14,637
if, in fact, a random function from X to Y
is indistinguishable from a pseudo-random

121
00:09:14,637 --> 00:09:19,717
function from X to Y. Namely, when we pick
a random function from the set SF.

122
00:09:19,717 --> 00:09:21,867
Okay. So, more precisely basically again,

123
00:09:21,867 --> 00:09:25,267
the uniform distribution on the set of pseudorandom functions

124
00:09:25,267 --> 00:09:29,632
is indistinguishable from the uniform distribution on the set of all functions.

125
00:09:29,632 --> 00:09:32,067
Let me be just a little bit more precise,

126
00:09:32,067 --> 00:09:35,483
just to give you a little bit more intuition about what I mean by that and then we'll

127
00:09:35,483 --> 00:09:38,711
move on to actual constructions. So let me
a bit more precise about what it means for

128
00:09:38,711 --> 00:09:43,600
a PRF to be secure. And so what we'll do
is basically the following. So we have our

129
00:09:43,600 --> 00:09:48,150
adversary, who's trying to distinguish
truly random function from a pseudo-random

130
00:09:48,150 --> 00:09:52,030
function. So what we'll do is let them
interact with one of the two. So here in

131
00:09:52,030 --> 00:09:56,013
the top cloud, we're choosing a truly
random function. In the bottom cloud,

132
00:09:56,013 --> 00:10:00,377
we're just choosing a random key for a
pseudo-random function. And now what this

133
00:10:00,377 --> 00:10:04,906
adversary's gonna do is he's gonna submit
points in X. So he's gonna submit a bunch

134
00:10:04,906 --> 00:10:09,293
of Xs. In fact, he's gonna do this again
and again and again. So he's gonna

135
00:10:09,293 --> 00:10:14,722
submit X1, X2. X3, X4, and then for each
one of, of those queries, we're gonna give him

136
00:10:14,722 --> 00:10:19,693
either the value of the truly random
function at the point X, or the value of

137
00:10:19,693 --> 00:10:24,676
the pseudorandom function at the point X.
Okay, so the adversary doesn't know which

138
00:10:24,676 --> 00:10:29,299
ones he's getting. By the way, for all
queries, he's always getting either the truly

139
00:10:29,299 --> 00:10:33,320
random function, or the pseudorandom function. In other words, he's either

140
00:10:33,320 --> 00:10:37,522
interacting with a truly random function
for all his queries, or he's interacting

141
00:10:37,522 --> 00:10:41,724
with a pseudorandom function for all his
queries. And we say that the PRF is

142
00:10:41,724 --> 00:10:45,926
secure if this poor adversary can't tell the
difference. He cannot tell whether he's

143
00:10:45,926 --> 00:10:49,921
interacting with a truly random function
or interacting with a pseudo random

144
00:10:49,921 --> 00:10:53,912
function. Okay, and we're gonna come back
actually later on and define PRFs more

145
00:10:53,912 --> 00:10:58,649
precisely but for now, I wanted to give
you the intuition for what it means for PRFs to be secure

146
00:10:58,649 --> 00:11:03,155
so you'll understand what it is that we're
trying to construct when we construct

147
00:11:03,155 --> 00:11:06,333
these pseudorandom functions. And I
should say that the definition for a

148
00:11:06,333 --> 00:11:11,242
pseudorandom permutation is pretty much
the same, except instead of choosing a

149
00:11:11,242 --> 00:11:15,910
random function, we're going to choose a
random permutation on the set X. In other

150
00:11:15,910 --> 00:11:21,964
words, a random one-to-one function on the
set X. The adversary can either query this

151
00:11:21,964 --> 00:11:27,306
random function on the set X, or he can
query a pseudorandom permutation, and the

152
00:11:27,306 --> 00:11:32,256
PRP is secure if the adversary cannot
tell the difference. Okay, so again the

153
00:11:32,256 --> 00:11:36,946
goal is to make these functions and
permutations look like truly random

154
00:11:36,946 --> 00:11:42,271
functions or permutations. Okay. So let's
look at a simple question. So suppose we

155
00:11:42,271 --> 00:11:48,050
have a secure PRF. So we know this PRF
F. Happens to be defined in the set X. And

156
00:11:48,050 --> 00:11:53,691
it so happens, you know, it outputs 128
bits every time. It so happens that this

157
00:11:53,691 --> 00:11:59,694
PRF cannot be distinguished from a truly
random function from X to {0,1} to the 128.

158
00:11:59,694 --> 00:12:05,335
Now we're gonna build a new PRF. Let's
call this PRF G. And the PRF G is gonna be

159
00:12:05,335 --> 00:12:11,121
defined as follows. We say, if x is equal
to zero, always output zero. Otherwise,

160
00:12:11,121 --> 00:12:15,654
if x is not equal to zero, just output the
value of F. So, my question to you is,

161
00:12:15,654 --> 00:12:19,414
do you think this G is a secure PRF?

162
00:12:19,476 --> 00:12:22,179
Well, so, the answer, of course, is that its very easy

163
00:12:22,179 --> 00:12:26,455
to distinguish the function G from a random function. All the adversary has to do

164
00:12:26,455 --> 00:12:30,930
is just query the function at X=0.
For a random function, the probability

165
00:12:30,930 --> 00:12:35,405
that the result is gonna be zero is one
over 2 to the 128. Whereas for the

166
00:12:35,405 --> 00:12:40,174
pseudo-random function, he's always gonna
get zero. Because at zero, the function is

167
00:12:40,174 --> 00:12:44,847
always defined to be zero, no matter what
the key. And so all he would do is he

168
00:12:44,847 --> 00:12:49,717
would say, hey, I'm interacting with a
pseudo-random function if he gets zero at X=0,

169
00:12:49,717 --> 00:12:54,525
and he'll say I'm interacting with
a random function if he gets nonzero at X=0.

170
00:12:54,525 --> 00:12:59,148
So it's very easy to distinguish
this G from random. So what this example shows

171
00:12:59,148 --> 00:13:04,080
is that even if you have a secure PRF, it's enough that on just one known input

172
00:13:04,080 --> 00:13:08,844
the output is kinda not random, the
output is fixed, and already the PRF is broken,

173
00:13:08,844 --> 00:13:13,178
even though you realize that
everywhere else the PRF is perfectly

174
00:13:13,178 --> 00:13:17,691
indistinguishable from random. Okay, so
let's just show you the power of PRFs.

175
00:13:17,691 --> 00:13:22,322
Let's look at a very easy application. I want to
show you that in fact pseudorandom functions

176
00:13:22,322 --> 00:13:27,432
directly give us a pseudorandom generator. Okay. So, let's assume we have

177
00:13:27,432 --> 00:13:32,779
a pseudo random function. So this one
happens to go from N bits to N bits. And then,

178
00:13:32,779 --> 00:13:37,720
let's define the following generator. Its seed space is going to be the

179
00:13:37,720 --> 00:13:42,491
key space for the PRF, and its output
space is gonna be, basically, t blocks of

180
00:13:42,491 --> 00:13:49,657
n bits each. Okay, so you can see the
output is a total of n times t bits for

181
00:13:49,657 --> 00:13:53,740
some parameter T that we can choose. And
it turns out, basically, you can do this

182
00:13:53,740 --> 00:13:57,642
very simple construction, this is
sometimes called counter mode,

183
00:13:57,642 --> 00:14:00,392
where essentially, you take the PRF and you
evaluate it at zero, you evaluate it at one,

184
00:14:00,392 --> 00:14:05,166
you evaluate it at two, at three, at
four, up to T, and you concatenate all these values.

185
00:14:05,166 --> 00:14:09,940
That's the generator, okay?
So we basically took the key for the PRF

186
00:14:09,940 --> 00:14:15,966
and we expanded it into n times t bits.
Okay. A key property of this generator is

187
00:14:15,966 --> 00:14:21,019
that it's parallelizable. What I mean by that
is if you have two processors or two cores

188
00:14:21,019 --> 00:14:25,952
that you can compute on, then you can have
one core compute the even entries of the

189
00:14:25,952 --> 00:14:30,629
output, and you can have another core
compute the odd entries of the output.

190
00:14:30,629 --> 00:14:34,926
So basically, if you have two cores, you can
make this generator run twice as fast as

191
00:14:34,926 --> 00:14:38,906
it would if you only have a single core.
So the nice thing about this is, of

192
00:14:38,906 --> 00:14:42,885
course, we know that pseudo-random
generators give us stream ciphers, and so

193
00:14:42,885 --> 00:14:47,183
this is an example of a parallelizable stream
cipher. And I just wanted to point out

194
00:14:47,183 --> 00:14:51,375
that many of the stream ciphers that we
looked at before, for example, RC4,

195
00:14:51,375 --> 00:14:55,725
those were inherently sequential. So even if you
had two processors, you couldn't make the

196
00:14:55,725 --> 00:15:00,148
stream cipher work any faster than if you
just had a single processor. Now the main

197
00:15:00,148 --> 00:15:04,451
question is why is this generator secure?
And so here I'm only gonna give you a

198
00:15:04,451 --> 00:15:08,164
little bit of intuition and we're gonna
come back and argue this more precisely

199
00:15:08,164 --> 00:15:13,113
later on. But I'll just say that security
basically falls directly from the PRF property.

200
00:15:13,113 --> 00:15:17,090
And the way we reason about security, is we say, well this PRF by definition

201
00:15:17,090 --> 00:15:21,985
is indistinguishable from a truly random function on 128 bits.

202
00:15:21,985 --> 00:15:27,000
So in other words, if I take this generator and
instead I define a generator using a truly

203
00:15:27,000 --> 00:15:30,800
random function, in other words, I'll
write the output of the generator as

204
00:15:30,800 --> 00:15:37,933
f(0) concatenated f(1), and so on
and so forth, using a truly random function,

205
00:15:37,933 --> 00:15:42,083
then the output of the
generator using the truly random function

206
00:15:42,083 --> 00:15:47,414
would be indistinguishable from
the output of the generator using

207
00:15:47,414 --> 00:15:52,507
a pseudorandom function. That is the essence of
the security property of a PRF. But with

208
00:15:52,507 --> 00:15:57,200
a truly random function, you notice that
the output is just truly random. Because

209
00:15:57,200 --> 00:16:02,068
for a truly random function, f(0) is
a random value. f(1) is an independent

210
00:16:02,068 --> 00:16:06,702
random value. f(2) is an independent
random value, and so on and so forth.

211
00:16:06,702 --> 00:16:11,218
So the entire output is a truly random
output. And so with a truly random function,

212
00:16:11,218 --> 00:16:15,793
a generator produces truly random outputs,
and is therefore a perfectly secure

213
00:16:15,793 --> 00:16:20,028
generator. And so you see how the PRF
security property lets us argue security.

214
00:16:20,028 --> 00:16:24,375
Basically, we argue that when we replace
the PRF with a truly random function, the

215
00:16:24,375 --> 00:16:28,614
construction is necessarily secure, and
that says that the construction with a

216
00:16:28,614 --> 00:16:32,800
pseudorandom function is also secure.
Okay? And we're gonna see a couple more

217
00:16:32,800 --> 00:16:37,092
examples like this later on. So now you
understand what a block cipher is, and you

218
00:16:37,092 --> 00:16:40,587
have intuition for what security
properties it's trying to achieve.

219
00:16:40,587 --> 00:16:44,820
And in the next segment, we're gonna look at
constructions for block ciphers.
