1
00:00:00,000 --> 00:00:03,457
In this segment, we're gonna study the
security of the ElGamal public key

2
00:00:03,457 --> 00:00:07,105
encryption system. So let me remind you
that when we first presented the

3
00:00:07,105 --> 00:00:11,349
Diffie-Hellman protocol, we said that the
security is based on the assumption that

4
00:00:11,349 --> 00:00:14,972
says that given G, G to the A, G to the B,
it's difficult to compute the

5
00:00:14,972 --> 00:00:19,269
Diffie-Hellman secret, G to the AB. This
is basically what the attacker has to do.

6
00:00:19,269 --> 00:00:23,410
He sees Alice's contribution. He sees
Bob's contribution and then his goal is to

7
00:00:23,410 --> 00:00:27,447
figure out what the Diffie-Hellman secret
is. And we said that this problem is

8
00:00:27,447 --> 00:00:31,329
difficult. The statement that the problem
is difficult is what's called the

9
00:00:31,329 --> 00:00:35,413
computational Diffie-Hellman assumption.
So, let's take this assumption more

10
00:00:35,413 --> 00:00:39,957
precisely. So, as usual we're going to
look at a finite cyclic group of order N,

11
00:00:39,957 --> 00:00:43,944
so G is some group, in your head you should be
thinking ZP star, but there could

12
00:00:43,944 --> 00:00:47,569
be other groups, for example, like an ellipctic curve group. And then we say that

13
00:00:47,569 --> 00:00:51,727
the computational Diffie-Hellman
assumption. I've often used the shorthand

14
00:00:51,727 --> 00:00:56,053
CDH for Computational Diffie Hellman.
We'll say this assumption holds in G if

15
00:00:56,053 --> 00:01:00,604
the following condition holds, namely for
all efficient algorithms. If we choose a

16
00:01:00,604 --> 00:01:04,761
random generator, and then we choose
random exponents A, B in ZN. Then when

17
00:01:04,761 --> 00:01:08,975
we give the algorithm G, G to the A, and G
to the B, the probability that the

18
00:01:08,975 --> 00:01:13,638
algorithm will produce the Diffie Hellman
secret is negligible. If this is true for

19
00:01:13,638 --> 00:01:18,368
all efficient algorithms, then we say that
the CDH assumption holds for G. CDH, as I

20
00:01:18,368 --> 00:01:23,202
said, stands for Computational Diffie
Hellman. As it turns out, this assumption

21
00:01:23,202 --> 00:01:27,643
is not ideal for analyzing the security of
the ElGamal system. And instead I'm gonna

22
00:01:27,643 --> 00:01:31,768
go ahead and make a slightly stronger
assumption called a hash Diffie-Hellman

23
00:01:31,768 --> 00:01:35,695
assumption. Okay. So what is hash
Diffie-Hellman assumption? Again, we are

24
00:01:35,695 --> 00:01:40,379
focusing on a particular group G and now
we're also gonna introduce a hash function

25
00:01:40,379 --> 00:01:45,007
H that maps pairs of elements in G into
the key space of some symmetric encryption

26
00:01:45,007 --> 00:01:49,133
system. And then we say that the hash
Diffie-Hellman a ssumption, or HDH for

27
00:01:49,133 --> 00:01:53,482
short, holds for this pair, G comma H for
the group in the hash function if the

28
00:01:53,482 --> 00:01:57,776
following is true. Basically, if I choose
a random generator and then I choose

29
00:01:57,776 --> 00:02:02,292
random exponents A and B in ZN and then I
also choose a random R and K, then the

30
00:02:02,292 --> 00:02:05,985
following distributions are
computationally indistinguishable. That

31
00:02:05,985 --> 00:02:09,658
is, if I give you G, G to the A, G to the
B, and then this hash value, this should

32
00:02:09,658 --> 00:02:13,472
look familiar to you. This is the hash
value that's used in the ElGamal system to

33
00:02:13,472 --> 00:02:17,380
derive the symmetric encryption key. What
we're saying is that this distribution is

34
00:02:17,380 --> 00:02:21,103
indistinguishable from a distribution
where you're also given. G, G to the A, G

35
00:02:21,103 --> 00:02:25,390
to the B. But now, instead of giving the
hash, you're given just really random key.

36
00:02:25,390 --> 00:02:29,913
So what this assumption says is that the
symmetric key that was derived during

37
00:02:29,913 --> 00:02:34,214
encryption in the ElGamal system,
essentially is indistinguishable from a

38
00:02:34,214 --> 00:02:38,012
truly random key that is derived
independently from the rest of the

39
00:02:38,012 --> 00:02:42,312
parameters of the system. It's a truly
independent random key, looks basically

40
00:02:42,312 --> 00:02:46,724
the same as the key that we used, to
derive from the G to the A and the G to

41
00:02:46,724 --> 00:02:51,895
the B. Now I'd like to point out that the
Hash Diffie-Hellman assumption is actually

42
00:02:51,895 --> 00:02:56,297
a stronger assumption than the
Computational Diffie-Hellman assumption.

43
00:02:56,297 --> 00:03:00,575
The way to see that is using the contra
positive, that is suppose the

44
00:03:00,575 --> 00:03:05,596
Computational Diffie-Hellman assumption
happens to be easy in the group G. Then I

45
00:03:05,596 --> 00:03:10,866
claim that in fact the Hash Diffie-Hellman
assumption is also easy in the group G. In

46
00:03:10,866 --> 00:03:15,826
fact, I'll say for G, H and this is true
in fact for all hash functions where the

47
00:03:15,826 --> 00:03:20,431
image of the hash function. It contains at
least two elements. In other words all I

48
00:03:20,431 --> 00:03:24,695
want to say is that the Hash Diffie-Hellman assumption
and it's easy for all

49
00:03:24,695 --> 00:03:29,270
hash functions to go match everything to a
single point. Which is true for almost all

50
00:03:29,270 --> 00:03:33,054
hash functions of interest to us. So
actually, this is a really simple

51
00:03:33,054 --> 00:03:37,168
statement to prove. Basically, if the
Computational Diffie-Hellman assumption is easy, what that

52
00:03:37,168 --> 00:03:41,665
says is that, given G to the A and G to the B, I can actually calculate G to the AB

53
00:03:41,665 --> 00:03:46,162
myself. Cuz I know the hash function H, I
can calculate this complete value here. So

54
00:03:46,162 --> 00:03:50,440
if you give me a tuple that's
sampled from the left or sampled from the

55
00:03:50,440 --> 00:03:54,706
right. I can very easily tell where it's
from. If it's sampled from the left, then

56
00:03:54,706 --> 00:03:59,227
once I've calculated G to the AB myself, I
can just test that the last element in the

57
00:03:59,227 --> 00:04:03,377
tuple is, in fact, the hash of G to
the B and G to the AB. If it is, I know

58
00:04:03,377 --> 00:04:07,707
the sample is from the left. If it isn't,
I know the sample is from the right. Okay,

59
00:04:07,707 --> 00:04:12,881
so this gives me pretty high advantage, in
distinguishing these two distributions. So

60
00:04:12,881 --> 00:04:17,422
CDH is easy, it's very easy to see that
these distributions are distinguishable.

61
00:04:17,422 --> 00:04:21,964
And this basically says that if the Hash
Diffie-Hellman is in fact hard, then CDH

62
00:04:21,964 --> 00:04:26,678
must also be hard. Which then we say, that
therefore the Hash Diffie-Hellman is a

63
00:04:26,678 --> 00:04:31,220
stronger assumption. There might be group
where CDH is hard, but HDH is not hard.

64
00:04:31,220 --> 00:04:35,938
Okay. So we say HDH is a
stronger assumption. If you found this

65
00:04:35,938 --> 00:04:39,632
discussion of weak assumption versus
strong assumption confusing, it's not

66
00:04:39,632 --> 00:04:43,626
really that important, it's fine to ignore
it. The important thing that I want to

67
00:04:43,626 --> 00:04:47,470
show you is in fact that the Hash
Diffie-Hellman assumption is sufficient to

68
00:04:47,470 --> 00:04:51,613
prove the semantic security of the ElGamal
system. Before we do that let me quickly

69
00:04:51,613 --> 00:04:56,006
ask you the following puzzle just to make
sure the Hash Diffie-Hellman assumption is

70
00:04:56,006 --> 00:05:00,050
clear. So imagine our key space is {0, 1} to the 128. So 128 bit strings and our

71
00:05:00,050 --> 00:05:03,744
hash function will map pairs of group
elements into this 128 byte strings.

72
00:05:03,744 --> 00:05:08,061
Suppose it so happens that we chose a hash
function Such that it always outputs

73
00:05:08,061 --> 00:05:12,733
strings that begin with zero. In other
words, of the 128 bit strings the most

74
00:05:12,733 --> 00:05:17,780
significant bit of the output is always
zero. If we chose such a hash function,

75
00:05:17,780 --> 00:05:23,677
does the Hash Diffie-Hellman assumption
hold for this pair, G comma H. So the

76
00:05:23,677 --> 00:05:27,297
answer is no it doesn't hold. And the
reason is because it now very easy to

77
00:05:27,297 --> 00:05:31,207
distinguish the two distributions that we
have here. The distribution on the left

78
00:05:31,207 --> 00:05:35,313
an the distribution on the right. And the
way you would distinguish the two is

79
00:05:35,313 --> 00:05:39,501
basically if I choose a truly random
element in K, in {0, 1} to the 128,

80
00:05:39,501 --> 00:05:44,008
then mostly it can very well be zero with
probability one half. However, the tuple

81
00:05:44,008 --> 00:05:48,509
that's given to me is chosen from the left
distribution, then the most significant

82
00:05:48,509 --> 00:05:53,010
bit of the hash will always be zero and
therefore if I see zero, I'm gonna say the

83
00:05:53,010 --> 00:05:57,072
distribution is a distribution on the
left. If I see one, I'm gonna say the

84
00:05:57,072 --> 00:06:01,244
distribution is a distribution on the
right. That will give me advantage one

85
00:06:01,244 --> 00:06:05,087
half in distinguishing these two
distributions. And so as a result, the

86
00:06:05,087 --> 00:06:09,643
Hash Diffie-Hillman assumption is false in
this case. So clearly you could see that,

87
00:06:09,643 --> 00:06:13,760
even though CDH might be hard in a certain
group G, if you choose a bad hash

88
00:06:13,760 --> 00:06:18,367
function, then HDH will not hold for the
pair G comma H. Okay. But suppose it so

89
00:06:18,367 --> 00:06:22,830
happens that we choose a group G and a
hash function H for which the Hash Diffie

90
00:06:22,830 --> 00:06:27,237
Hellman assumption holds. And in fact, if
you choose the hash function to be just

91
00:06:27,237 --> 00:06:31,590
SHA-256, for all we know, the Hash
Diffie Hellman assumption holds in the

92
00:06:31,590 --> 00:06:35,983
group ZP star, and holds in elliptic curve
groups. My goal then is to show you that

93
00:06:35,983 --> 00:06:39,987
ElGamal is semantically secure under
the Hash Diffie-Hellman assumption. So let me

94
00:06:39,987 --> 00:06:44,042
quickly remind you how theElGamal
system works. While we're gonna choose a

95
00:06:44,042 --> 00:06:47,994
random generator G, we're gonna choose a
random 'a' in ZN, the public key is

96
00:06:47,994 --> 00:06:52,254
gonna be G, and G to the A, the secret key
is simply gonna be A. And now here I wrote

97
00:06:52,254 --> 00:06:56,412
shorthand for the ElGamal encryption.
Basically, what to encrypt, what we do is

98
00:06:56,412 --> 00:07:01,833
we choose a random B. We hash G as being H
to the B. Remember this H to the B is the

99
00:07:01,833 --> 00:07:06,120
value G to the AB. This is the Diffie
Hellman secret. The hash function gave us

100
00:07:06,120 --> 00:07:10,626
a symmetric encryption key K. We encrypt
the message with K, and we output G to the

101
00:07:10,626 --> 00:07:14,858
B and the symmetric cipher text. To
decrypt we have to value U, and the Diffie

102
00:07:14,858 --> 00:07:19,200
Hellman secret, G to the A. To derive a
symmetric key, we decrypt the cipher text.

103
00:07:19,359 --> 00:07:23,445
And then we output the plaintext message m. So let's see how to argue that,

104
00:07:23,445 --> 00:07:27,744
in fact, ElGamal is semantically secure under
this Hash Diffie-Hillman assumption is

105
00:07:27,744 --> 00:07:31,937
fairly simple. So well we have to argue,
remember we had, in semantic security, we

106
00:07:31,937 --> 00:07:35,546
have these two experiments. One
experiment, the attacker is given the

107
00:07:35,546 --> 00:07:39,845
encryption of m0. In the other experiment,
the attacker is given the encryption of m1.

108
00:07:39,845 --> 00:07:44,091
So I wrote the two experiments here. Here
you notice that the attacker starts by

109
00:07:44,091 --> 00:07:48,071
sending off the public key to the
adversary. The adversary then chooses two

110
00:07:48,071 --> 00:07:52,727
equal length messages m0 and m1. And then
if he gets the ElGamal encryption of M0,

111
00:07:52,727 --> 00:07:57,495
and a kind of rough shorthand for what
ElGamal ciphertext is, okay? Similarly, in

112
00:07:57,495 --> 00:08:01,660
encryption one, he simply gets the
encryption of M1 instead of M0, and

113
00:08:01,660 --> 00:08:06,489
everything else is the same about these
two experiments. Now, because of the Hash

114
00:08:06,489 --> 00:08:11,257
Diffie-Hellman assumption, we know that
even though the attacker got to see G, G

115
00:08:11,257 --> 00:08:16,267
to the a and G to the b, we know that the
output of the hash of G to the b, G to the

116
00:08:16,267 --> 00:08:20,981
ab is indistinguishable from random.
Therefore, if we replace the actual hash

117
00:08:20,981 --> 00:08:26,319
function by a truly generated random key K
that's independent of everything else, by

118
00:08:26,319 --> 00:08:31,148
the Hash Diffie-Hellman assumption, the
attacker can't distinguish these two

119
00:08:31,148 --> 00:08:34,648
games. And again, it's a simple exercise
for you to show that if he could

120
00:08:34,648 --> 00:08:38,570
distinguish these two games, then he would
break the Hash Diffie-Hellman assumption.

121
00:08:38,570 --> 00:08:42,705
But then the same is true for experiment
one. The attacker also could not

122
00:08:42,705 --> 00:08:47,237
distinguish the output of the hash
function from a truly random key, that was

123
00:08:47,237 --> 00:08:51,341
used the generate the challenge cipher
text. Okay. So now basically we look at

124
00:08:51,341 --> 00:08:55,297
these two experiments and we realize that,
wait a minute, what's going on in these

125
00:08:55,297 --> 00:08:59,106
two experiments? Basically everything is
the same except in one experiment, the

126
00:08:59,106 --> 00:09:02,866
attacker gets the encryption under
a symmetric encryption system of m0. In the

127
00:09:02,866 --> 00:09:06,920
other one, he gets the encryption under a
symmetric encryption system of m1 and the

128
00:09:06,920 --> 00:09:10,973
key is chosen at random independently over
everything else. So by the fact that the

129
00:09:10,973 --> 00:09:14,440
symmetric encryption system is
semantically secure, these two games are

130
00:09:14,440 --> 00:09:18,101
indistinguishable. If they were
distinguishable, then the attacker could

131
00:09:18,101 --> 00:09:21,984
break the semantic security of this
symmetric encryption system. So now we

132
00:09:21,984 --> 00:09:26,235
kinda prove this, you know, this chain of
equivalences. And that proves that the

133
00:09:26,235 --> 00:09:29,436
original games, in fact, are
indistinguishable, computationally

134
00:09:29,436 --> 00:09:33,320
indistinguishable. And therefore, the
ElGamal system is semantically secure.

135
00:09:33,320 --> 00:09:37,769
Okay so it's like I said a very simple
proof by pictures and you can make this

136
00:09:37,769 --> 00:09:42,218
into a rigorous proof without too much
work. But semantic security isn't enough,

137
00:09:42,218 --> 00:09:46,498
what we really want is chosen ciphertext
security, and the question is ElGamal chosen ciphertext

138
00:09:46,498 --> 00:09:50,496
secure? So it turns out to prove the
chosen ciphertext security of ElGamal we

139
00:09:50,496 --> 00:09:54,776
actually need a stronger assumption, Hash Diffie-Hellman or Computational Diffie-Hellman

140
00:09:54,776 --> 00:09:59,000
are actually not enough to prove
chosen ciphertext security of the system as far

141
00:09:59,000 --> 00:10:03,008
as we know. So to prove chosen-ciphertext
security, I'm going to introduce a new

142
00:10:03,008 --> 00:10:06,447
assumption called Interactive Diffie
Hellman assumption. And actually,

143
00:10:06,447 --> 00:10:10,384
technically we really don't like this
assumption. And we're going to try to get

144
00:10:10,384 --> 00:10:14,727
rid of this, later on. But for now, we
just want to analyze the security of the

145
00:10:14,727 --> 00:10:19,056
basic ElGamal system against chosen
ciphertext attack. So to argue that it is

146
00:10:19,056 --> 00:10:23,722
chosen ciphertext secure, here is what the
assumption says. Basically the challenger

147
00:10:23,722 --> 00:10:27,769
starts, you know, plays a game with the
adversary, he generates a random G,

148
00:10:27,769 --> 00:10:32,266
generates two exponents, and then he says
to the adversary as usual, G, G to the a

149
00:10:32,266 --> 00:10:36,509
and G to the b. Now the adversary's goal
is basically to figure out the

150
00:10:36,509 --> 00:10:41,054
Diffie-Helmman's secrets, mainly g to the
ab. He outputs the value of V and he wins

151
00:10:41,054 --> 00:10:45,278
the game if V happens to be equal to G to
the AB. So, so far this looks identical to

152
00:10:45,278 --> 00:10:48,943
the Computational Diffie-Hellman assumption,
there's no difference - this is

153
00:10:48,943 --> 00:10:52,862
the Computational Diffie-Hellman assumption
except in Interactive Diffie-Hellman would

154
00:10:52,862 --> 00:10:57,296
give the attacker a little bit more power.
So because the attacker has more power,

155
00:10:57,296 --> 00:11:01,948
it's harder to satisfy the assumption,
which is why we say that this assumption

156
00:11:01,948 --> 00:11:06,188
is stronger than Computational
Diffie-Hellman. Now what is this power to be

157
00:11:06,188 --> 00:11:10,840
given? We are given the ability to make
queries. In particular, he gets to submit

158
00:11:10,840 --> 00:11:15,551
two elements from the group G, so U1, V1
disappear from the group G. And then he's

159
00:11:15,551 --> 00:11:20,149
told whether U1 to the A is equal to V1,
so he gets one. If you wanted the A equals

160
00:11:20,149 --> 00:11:24,179
to V1 get zero, otherwise it's kind of a
bizarre type of query. What, how does it

161
00:11:24,179 --> 00:11:28,007
be possibly help the attacker? But it
turns out we need to be able to answer

162
00:11:28,007 --> 00:11:31,834
these types of queries to the adversary in
order to be able to prove chosen

163
00:11:31,834 --> 00:11:35,914
ciphertext security. And in fact, he can
do these type of queries again and again

164
00:11:35,914 --> 00:11:39,339
and again. So he can issue as many
queries like these as he wants and then the

165
00:11:39,339 --> 00:11:43,217
assumption says that despite all these
queries he still can't figure out the

166
00:11:43,217 --> 00:11:47,146
Diffie-Hellman secret, namely despite
making all these queries, the probability

167
00:11:47,146 --> 00:11:51,299
that he outputs the
Diffie-Hellman secret is negligible. Okay.

168
00:11:51,299 --> 00:11:55,516
So clearly if this assumption holds, that the Computational Diffie-Hellman assumption

169
00:11:55,516 --> 00:11:59,209
holds, because here, the adversary has more power,
and as a result we say that this assumption

170
00:11:59,209 --> 00:12:02,614
is stronger that Computational Diffie-Hellman, the thing,
we really don't like about this

171
00:12:02,614 --> 00:12:06,019
assumption, is the fact, that, it's
interactive, and that the adversary is allowed to

172
00:12:06,019 --> 00:12:09,940
make queries to the challenger, and as I
said, we're gonna trying to get rid

173
00:12:09,940 --> 00:12:14,462
of this interaction later on. But for now
I'll tell you that under this Interactive

174
00:12:14,462 --> 00:12:18,722
Diffie-Hellman assumption and under the
assumption that the symmetric encryption

175
00:12:18,722 --> 00:12:22,718
system provides authenticated encryption, and
under the assumption that the hash

176
00:12:22,718 --> 00:12:26,610
function is kind of an ideal hash
function, what we call the random oracle,

177
00:12:26,610 --> 00:12:31,079
then in fact the ElGamal system is chosen ciphertext secure and again this

178
00:12:31,079 --> 00:12:35,028
RO here denotes the fact that it's in the
random oracle model. Which is not

179
00:12:35,028 --> 00:12:38,892
important, so much for our purposes. The
main thing to remember that under

180
00:12:38,892 --> 00:12:42,756
kind of this weird, interactive
assumption we can actually prove that

181
00:12:42,756 --> 00:12:46,938
ElGamal is a chosen ciphertext secure.
And as far as we know this assumption

182
00:12:46,938 --> 00:12:51,332
actually holds for the group ZP star.
So what we're gonna do next is basically

183
00:12:51,332 --> 00:12:55,567
answer this question of whether we can get
rid of the interactive assumption. Can we

184
00:12:55,567 --> 00:12:59,855
prove security strictly based on CDH? And
similarly can we proof security without

185
00:12:59,855 --> 00:13:04,037
relying on random oracles? Just you know
without having to assume, that the hash

186
00:13:04,037 --> 00:13:08,295
function is ideal. Just you know, can we
prove security using a concrete hash

187
00:13:08,295 --> 00:13:11,600
function. And we'll do that very briefly
in the next segment.
